
Test_GFSK_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4cc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800a60c  0800a60c  0000b60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a910  0800a910  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a910  0800a910  0000b910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a918  0800a918  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a918  0800a918  0000b918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a91c  0800a91c  0000b91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a920  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000060  0800a980  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800a980  0000c56c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f80d  00000000  00000000  0000c08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004357  00000000  00000000  0002b897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  0002fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ba  00000000  00000000  00031998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ef4  00000000  00000000  00033052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ecae  00000000  00000000  00053f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4123  00000000  00000000  00072bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136d17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000814c  00000000  00000000  00136d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0013eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000060 	.word	0x20000060
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a5f4 	.word	0x0800a5f4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000064 	.word	0x20000064
 800017c:	0800a5f4 	.word	0x0800a5f4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <delay_us>:
#include "com_debug.h"
#include "stdio.h"
#include "stdarg.h"
#include "stdint.h"

void delay_us(uint32_t us) {
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000518:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <delay_us+0x30>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000520:	e002      	b.n	8000528 <delay_us+0x18>
		delay_counter_disp++;
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <delay_us+0x30>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	d8f6      	bhi.n	8000522 <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	20000168 	.word	0x20000168

08000544 <myPrintf>:

void myPrintf(const char *fmt, ...) {
 8000544:	b40f      	push	{r0, r1, r2, r3}
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	2164      	movs	r1, #100	@ 0x64
 8000558:	480a      	ldr	r0, [pc, #40]	@ (8000584 <myPrintf+0x40>)
 800055a:	f009 fbbd 	bl	8009cd8 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 800055e:	4809      	ldr	r0, [pc, #36]	@ (8000584 <myPrintf+0x40>)
 8000560:	f000 f814 	bl	800058c <bufferSize>
 8000564:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) temp, len, 1000);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	b29a      	uxth	r2, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056e:	4905      	ldr	r1, [pc, #20]	@ (8000584 <myPrintf+0x40>)
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <myPrintf+0x44>)
 8000572:	f003 fddd 	bl	8004130 <HAL_UART_Transmit>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000580:	b004      	add	sp, #16
 8000582:	4770      	bx	lr
 8000584:	2000007c 	.word	0x2000007c
 8000588:	200001b4 	.word	0x200001b4

0800058c <bufferSize>:

int bufferSize(char *buffer) {
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 8000598:	e002      	b.n	80005a0 <bufferSize+0x14>
		i++;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1c5a      	adds	r2, r3, #1
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1f6      	bne.n	800059a <bufferSize+0xe>
	return i;
 80005ac:	68fb      	ldr	r3, [r7, #12]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005dc:	68fb      	ldr	r3, [r7, #12]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <HAL_UART_RxCpltCallback+0x20>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d102      	bne.n	80005fe <HAL_UART_RxCpltCallback+0x16>
		TX_FLAG = 1;
 80005f8:	4b04      	ldr	r3, [pc, #16]	@ (800060c <HAL_UART_RxCpltCallback+0x24>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	200001b4 	.word	0x200001b4
 800060c:	20000256 	.word	0x20000256

08000610 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000616:	f000 fd61 	bl	80010dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800061a:	f000 f8d5 	bl	80007c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800061e:	f000 fa33 	bl	8000a88 <MX_GPIO_Init>
	MX_TIM1_Init();
 8000622:	f000 f943 	bl	80008ac <MX_TIM1_Init>
	MX_TIM2_Init();
 8000626:	f000 f995 	bl	8000954 <MX_TIM2_Init>
	MX_SubGHz_Phy_Init();
 800062a:	f008 ffa4 	bl	8009576 <MX_SubGHz_Phy_Init>
	MX_USART2_UART_Init();
 800062e:	f000 f9df 	bl	80009f0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8000632:	4858      	ldr	r0, [pc, #352]	@ (8000794 <main+0x184>)
 8000634:	f003 f93e 	bl	80038b4 <HAL_TIM_Base_Start>

	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000638:	4b57      	ldr	r3, [pc, #348]	@ (8000798 <main+0x188>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = PAYLOAD_LENGTH;
 800063e:	4b56      	ldr	r3, [pc, #344]	@ (8000798 <main+0x188>)
 8000640:	2206      	movs	r2, #6
 8000642:	721a      	strb	r2, [r3, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8; /*Convert byte into bit*/
 8000644:	4b54      	ldr	r3, [pc, #336]	@ (8000798 <main+0x188>)
 8000646:	2208      	movs	r2, #8
 8000648:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800064a:	4b53      	ldr	r3, [pc, #332]	@ (8000798 <main+0x188>)
 800064c:	2204      	movs	r2, #4
 800064e:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8000650:	4b51      	ldr	r3, [pc, #324]	@ (8000798 <main+0x188>)
 8000652:	2218      	movs	r2, #24
 8000654:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000656:	4b50      	ldr	r3, [pc, #320]	@ (8000798 <main+0x188>)
 8000658:	2200      	movs	r2, #0
 800065a:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800065c:	4b4e      	ldr	r3, [pc, #312]	@ (8000798 <main+0x188>)
 800065e:	2200      	movs	r2, #0
 8000660:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000662:	4b4d      	ldr	r3, [pc, #308]	@ (8000798 <main+0x188>)
 8000664:	22f2      	movs	r2, #242	@ 0xf2
 8000666:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000668:	4b4b      	ldr	r3, [pc, #300]	@ (8000798 <main+0x188>)
 800066a:	2201      	movs	r2, #1
 800066c:	729a      	strb	r2, [r3, #10]

	mod_params.PacketType = PACKET_TYPE_GFSK;
 800066e:	4b4b      	ldr	r3, [pc, #300]	@ (800079c <main+0x18c>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300; /*Not used in TX*/
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <main+0x18c>)
 8000676:	220d      	movs	r2, #13
 8000678:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = DEMO_DEFAULT_BR;
 800067a:	4b48      	ldr	r3, [pc, #288]	@ (800079c <main+0x18c>)
 800067c:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000680:	605a      	str	r2, [r3, #4]
	mod_params.Params.Gfsk.Fdev = DEMO_DEFAULT_FDEV;
 8000682:	4b46      	ldr	r3, [pc, #280]	@ (800079c <main+0x18c>)
 8000684:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8000688:	609a      	str	r2, [r3, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800068a:	4b44      	ldr	r3, [pc, #272]	@ (800079c <main+0x18c>)
 800068c:	220b      	movs	r2, #11
 800068e:	731a      	strb	r2, [r3, #12]

	SUBGRF_Init(DioIrqHndlr);
 8000690:	4843      	ldr	r0, [pc, #268]	@ (80007a0 <main+0x190>)
 8000692:	f007 fd27 	bl	80080e4 <SUBGRF_Init>
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000696:	2100      	movs	r1, #0
 8000698:	2000      	movs	r0, #0
 800069a:	f008 fb8f 	bl	8008dbc <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(rx_cmd, PAYLOAD_LENGTH);
 800069e:	2106      	movs	r1, #6
 80006a0:	4840      	ldr	r0, [pc, #256]	@ (80007a4 <main+0x194>)
 80006a2:	f007 fd71 	bl	8008188 <SUBGRF_SetPayload>
	SUBGRF_SetPacketParams(&pkt_params);
 80006a6:	483c      	ldr	r0, [pc, #240]	@ (8000798 <main+0x188>)
 80006a8:	f008 faea 	bl	8008c80 <SUBGRF_SetPacketParams>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 80006ac:	4a3e      	ldr	r2, [pc, #248]	@ (80007a8 <main+0x198>)
 80006ae:	463b      	mov	r3, r7
 80006b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80006b8:	463b      	mov	r3, r7
 80006ba:	4618      	mov	r0, r3
 80006bc:	f007 fda9 	bl	8008212 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 80006c0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80006c4:	f007 fdf4 	bl	80082b0 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 80006c8:	4838      	ldr	r0, [pc, #224]	@ (80007ac <main+0x19c>)
 80006ca:	f008 f8cd 	bl	8008868 <SUBGRF_SetRfFrequency>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 80006ce:	2301      	movs	r3, #1
 80006d0:	2200      	movs	r2, #0
 80006d2:	2102      	movs	r1, #2
 80006d4:	2002      	movs	r0, #2
 80006d6:	f008 f849 	bl	800876c <SUBGRF_SetPaConfig>
	//SUBGRF_SetTxParams(RFO_HP, POWER, RAMP_TIME);
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 80006da:	2206      	movs	r2, #6
 80006dc:	210e      	movs	r1, #14
 80006de:	2001      	movs	r0, #1
 80006e0:	f008 f92e 	bl	8008940 <SUBGRF_SetTxParams>
	SUBGRF_SetModulationParams(&mod_params);
 80006e4:	482d      	ldr	r0, [pc, #180]	@ (800079c <main+0x18c>)
 80006e6:	f008 f9f9 	bl	8008adc <SUBGRF_SetModulationParams>
	SUBGRF_SetDioIrqParams(
 80006ea:	2300      	movs	r3, #0
 80006ec:	2200      	movs	r2, #0
 80006ee:	f240 210f 	movw	r1, #527	@ 0x20f
 80006f2:	f240 200f 	movw	r0, #527	@ 0x20f
 80006f6:	f008 f85b 	bl	80087b0 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 80006fa:	482c      	ldr	r0, [pc, #176]	@ (80007ac <main+0x19c>)
 80006fc:	f008 f8b4 	bl	8008868 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000700:	2100      	movs	r1, #0
 8000702:	2001      	movs	r0, #1
 8000704:	f008 fcf8 	bl	80090f8 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8000708:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800070c:	f007 fed8 	bl	80084c0 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_IT(&huart2, tx_cmd, 6);
 8000710:	2206      	movs	r2, #6
 8000712:	4927      	ldr	r1, [pc, #156]	@ (80007b0 <main+0x1a0>)
 8000714:	4827      	ldr	r0, [pc, #156]	@ (80007b4 <main+0x1a4>)
 8000716:	f003 fd91 	bl	800423c <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000720:	4825      	ldr	r0, [pc, #148]	@ (80007b8 <main+0x1a8>)
 8000722:	f001 f86f 	bl	8001804 <HAL_GPIO_WritePin>
	delay_us(1000000);  // 500ms delay
 8000726:	4825      	ldr	r0, [pc, #148]	@ (80007bc <main+0x1ac>)
 8000728:	f7ff fef2 	bl	8000510 <delay_us>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000732:	4821      	ldr	r0, [pc, #132]	@ (80007b8 <main+0x1a8>)
 8000734:	f001 f866 	bl	8001804 <HAL_GPIO_WritePin>
	delay_us(1000000);
 8000738:	4820      	ldr	r0, [pc, #128]	@ (80007bc <main+0x1ac>)
 800073a:	f7ff fee9 	bl	8000510 <delay_us>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000744:	481c      	ldr	r0, [pc, #112]	@ (80007b8 <main+0x1a8>)
 8000746:	f001 f85d 	bl	8001804 <HAL_GPIO_WritePin>
		delay_us(1000000);
 800074a:	481c      	ldr	r0, [pc, #112]	@ (80007bc <main+0x1ac>)
 800074c:	f7ff fee0 	bl	8000510 <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000756:	4818      	ldr	r0, [pc, #96]	@ (80007b8 <main+0x1a8>)
 8000758:	f001 f854 	bl	8001804 <HAL_GPIO_WritePin>
		delay_us(1000000);
 800075c:	4817      	ldr	r0, [pc, #92]	@ (80007bc <main+0x1ac>)
 800075e:	f7ff fed7 	bl	8000510 <delay_us>

		if (TX_FLAG) {
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <main+0x1b0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00b      	beq.n	8000782 <main+0x172>
			SUBGRF_SetRfFrequency(FREQ_401_MHZ);
 800076a:	4816      	ldr	r0, [pc, #88]	@ (80007c4 <main+0x1b4>)
 800076c:	f008 f87c 	bl	8008868 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX); /*Set RF switch*/
 8000770:	2101      	movs	r1, #1
 8000772:	2001      	movs	r0, #1
 8000774:	f008 fcc0 	bl	80090f8 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_cmd, 16, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2110      	movs	r1, #16
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <main+0x1a0>)
 800077e:	f007 fd35 	bl	80081ec <SUBGRF_SendPayload>
		}

		HAL_UART_Receive_IT(&huart2, tx_cmd, 6);
 8000782:	2206      	movs	r2, #6
 8000784:	490a      	ldr	r1, [pc, #40]	@ (80007b0 <main+0x1a0>)
 8000786:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <main+0x1a4>)
 8000788:	f003 fd58 	bl	800423c <HAL_UART_Receive_IT>

		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 800078c:	f008 fefb 	bl	8009586 <MX_SubGHz_Phy_Process>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000790:	e7d5      	b.n	800073e <main+0x12e>
 8000792:	bf00      	nop
 8000794:	20000168 	.word	0x20000168
 8000798:	200000e0 	.word	0x200000e0
 800079c:	200000f4 	.word	0x200000f4
 80007a0:	08000b61 	.word	0x08000b61
 80007a4:	20000248 	.word	0x20000248
 80007a8:	0800a60c 	.word	0x0800a60c
 80007ac:	17fbc158 	.word	0x17fbc158
 80007b0:	20000250 	.word	0x20000250
 80007b4:	200001b4 	.word	0x200001b4
 80007b8:	48000400 	.word	0x48000400
 80007bc:	000f4240 	.word	0x000f4240
 80007c0:	20000256 	.word	0x20000256
 80007c4:	17ec7f18 	.word	0x17ec7f18

080007c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09a      	sub	sp, #104	@ 0x68
 80007cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2248      	movs	r2, #72	@ 0x48
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f009 fa8c 	bl	8009cf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ee:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <SystemClock_Config+0xbc>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <SystemClock_Config+0xbc>)
 80007f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <SystemClock_Config+0xbc>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800080e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081c:	2303      	movs	r3, #3
 800081e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000820:	2310      	movs	r3, #16
 8000822:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8000824:	2306      	movs	r3, #6
 8000826:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800082c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000832:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000834:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000838:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f001 faca 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x86>
		Error_Handler();
 800084a:	f000 fa07 	bl	8000c5c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 800084e:	234f      	movs	r3, #79	@ 0x4f
 8000850:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fe36 	bl	80024dc <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xb2>
		Error_Handler();
 8000876:	f000 f9f1 	bl	8000c5c <Error_Handler>
	}
}
 800087a:	bf00      	nop
 800087c:	3768      	adds	r7, #104	@ 0x68
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	58000400 	.word	0x58000400

08000888 <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_SUBGHZ_Init+0x20>)
 800088e:	2210      	movs	r2, #16
 8000890:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_SUBGHZ_Init+0x20>)
 8000894:	f002 fb96 	bl	8002fc4 <HAL_SUBGHZ_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 800089e:	f000 f9dd 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000110 	.word	0x20000110

080008ac <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008ca:	4b20      	ldr	r3, [pc, #128]	@ (800094c <MX_TIM1_Init+0xa0>)
 80008cc:	4a20      	ldr	r2, [pc, #128]	@ (8000950 <MX_TIM1_Init+0xa4>)
 80008ce:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 48 - 1;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	@ (800094c <MX_TIM1_Init+0xa0>)
 80008d2:	222f      	movs	r2, #47	@ 0x2f
 80008d4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_TIM1_Init+0xa0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_TIM1_Init+0xa0>)
 80008de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008e2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_TIM1_Init+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_TIM1_Init+0xa0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_TIM1_Init+0xa0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80008f6:	4815      	ldr	r0, [pc, #84]	@ (800094c <MX_TIM1_Init+0xa0>)
 80008f8:	f002 ff84 	bl	8003804 <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8000902:	f000 f9ab 	bl	8000c5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	480e      	ldr	r0, [pc, #56]	@ (800094c <MX_TIM1_Init+0xa0>)
 8000914:	f003 f931 	bl	8003b7a <HAL_TIM_ConfigClockSource>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0x76>
		Error_Handler();
 800091e:	f000 f99d 	bl	8000c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	@ (800094c <MX_TIM1_Init+0xa0>)
 8000934:	f003 fb12 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 800093e:	f000 f98d 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3720      	adds	r7, #32
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000011c 	.word	0x2000011c
 8000950:	40012c00 	.word	0x40012c00

08000954 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000972:	4b1d      	ldr	r3, [pc, #116]	@ (80009e8 <MX_TIM2_Init+0x94>)
 8000974:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000978:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48;
 800097a:	4b1b      	ldr	r3, [pc, #108]	@ (80009e8 <MX_TIM2_Init+0x94>)
 800097c:	2230      	movs	r2, #48	@ 0x30
 800097e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <MX_TIM2_Init+0x94>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_TIM2_Init+0x94>)
 8000988:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <MX_TIM2_Init+0x98>)
 800098a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098c:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <MX_TIM2_Init+0x94>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <MX_TIM2_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000998:	4813      	ldr	r0, [pc, #76]	@ (80009e8 <MX_TIM2_Init+0x94>)
 800099a:	f002 ff33 	bl	8003804 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM2_Init+0x54>
		Error_Handler();
 80009a4:	f000 f95a 	bl	8000c5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ac:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <MX_TIM2_Init+0x94>)
 80009b6:	f003 f8e0 	bl	8003b7a <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80009c0:	f000 f94c 	bl	8000c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_TIM2_Init+0x94>)
 80009d2:	f003 fac3 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80009dc:	f000 f93e 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000168 	.word	0x20000168
 80009ec:	000f4240 	.word	0x000f4240

080009f0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009f4:	4b22      	ldr	r3, [pc, #136]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 80009f6:	4a23      	ldr	r2, [pc, #140]	@ (8000a84 <MX_USART2_UART_Init+0x94>)
 80009f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a38:	4811      	ldr	r0, [pc, #68]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a3a:	f003 fb29 	bl	8004090 <HAL_UART_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000a44:	f000 f90a 	bl	8000c5c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a4c:	f005 fae5 	bl	800601a <HAL_UARTEx_SetTxFifoThreshold>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000a56:	f000 f901 	bl	8000c5c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4808      	ldr	r0, [pc, #32]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a5e:	f005 fb1a 	bl	8006096 <HAL_UARTEx_SetRxFifoThreshold>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000a68:	f000 f8f8 	bl	8000c5c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_USART2_UART_Init+0x90>)
 8000a6e:	f005 fa9c 	bl	8005faa <HAL_UARTEx_DisableFifoMode>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000a78:	f000 f8f0 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200001b4 	.word	0x200001b4
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff fd8b 	bl	80005b8 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff fd88 	bl	80005b8 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa8:	2004      	movs	r0, #4
 8000aaa:	f7ff fd85 	bl	80005b8 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 410a 	mov.w	r1, #35328	@ 0x8a00
 8000ab4:	4828      	ldr	r0, [pc, #160]	@ (8000b58 <MX_GPIO_Init+0xd0>)
 8000ab6:	f000 fea5 	bl	8001804 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 8000aba:	2200      	movs	r2, #0
 8000abc:	2138      	movs	r1, #56	@ 0x38
 8000abe:	4827      	ldr	r0, [pc, #156]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000ac0:	f000 fea0 	bl	8001804 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8000ac4:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8000ac8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4619      	mov	r1, r3
 8000ada:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <MX_GPIO_Init+0xd0>)
 8000adc:	f000 fd32 	bl	8001544 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA10 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_9;
 8000ae0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ae4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af2:	2307      	movs	r3, #7
 8000af4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afe:	f000 fd21 	bl	8001544 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 8000b02:	2338      	movs	r3, #56	@ 0x38
 8000b04:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000b18:	f000 fd14 	bl	8001544 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b20:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b24:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f000 fd07 	bl	8001544 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 8000b36:	2340      	movs	r3, #64	@ 0x40
 8000b38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b3e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_GPIO_Init+0xd4>)
 8000b4a:	f000 fcfb 	bl	8001544 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800

08000b60 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
	if (radioIrq == IRQ_RX_DONE) {
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d11c      	bne.n	8000baa <DioIrqHndlr+0x4a>
		SUBGRF_GetPayload(rx_cmd, &p_len, PAYLOAD_LENGTH);
 8000b70:	2206      	movs	r2, #6
 8000b72:	492d      	ldr	r1, [pc, #180]	@ (8000c28 <DioIrqHndlr+0xc8>)
 8000b74:	482d      	ldr	r0, [pc, #180]	@ (8000c2c <DioIrqHndlr+0xcc>)
 8000b76:	f007 fb17 	bl	80081a8 <SUBGRF_GetPayload>
		myPrintf("\nGFSK Received\r\n");
 8000b7a:	482d      	ldr	r0, [pc, #180]	@ (8000c30 <DioIrqHndlr+0xd0>)
 8000b7c:	f7ff fce2 	bl	8000544 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e00a      	b.n	8000b9c <DioIrqHndlr+0x3c>
			myPrintf(" %x", rx_cmd[i]);
 8000b86:	4a29      	ldr	r2, [pc, #164]	@ (8000c2c <DioIrqHndlr+0xcc>)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4828      	ldr	r0, [pc, #160]	@ (8000c34 <DioIrqHndlr+0xd4>)
 8000b92:	f7ff fcd7 	bl	8000544 <myPrintf>
		for (int i = 0; i < sizeof(rx_cmd); i++) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	d9f1      	bls.n	8000b86 <DioIrqHndlr+0x26>
		}
		myPrintf("\r\n");
 8000ba2:	4825      	ldr	r0, [pc, #148]	@ (8000c38 <DioIrqHndlr+0xd8>)
 8000ba4:	f7ff fcce 	bl	8000544 <myPrintf>
		delay_us(1000000);  // 500ms delay
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
		delay_us(1000000);

	}
}
 8000ba8:	e039      	b.n	8000c1e <DioIrqHndlr+0xbe>
	} else if (radioIrq == IRQ_TX_DONE) {
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d136      	bne.n	8000c1e <DioIrqHndlr+0xbe>
		TX_FLAG = 0;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <DioIrqHndlr+0xdc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
		myPrintf("\n\r Test Command Transmitted Successful:  \r");
 8000bb6:	4822      	ldr	r0, [pc, #136]	@ (8000c40 <DioIrqHndlr+0xe0>)
 8000bb8:	f7ff fcc4 	bl	8000544 <myPrintf>
		for (int i = 0; i < sizeof(tx_cmd); i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	e00a      	b.n	8000bd8 <DioIrqHndlr+0x78>
			myPrintf(" %02x", tx_cmd[i]);
 8000bc2:	4a20      	ldr	r2, [pc, #128]	@ (8000c44 <DioIrqHndlr+0xe4>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481e      	ldr	r0, [pc, #120]	@ (8000c48 <DioIrqHndlr+0xe8>)
 8000bce:	f7ff fcb9 	bl	8000544 <myPrintf>
		for (int i = 0; i < sizeof(tx_cmd); i++) {
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	2b05      	cmp	r3, #5
 8000bdc:	d9f1      	bls.n	8000bc2 <DioIrqHndlr+0x62>
		myPrintf("\n\n");
 8000bde:	481b      	ldr	r0, [pc, #108]	@ (8000c4c <DioIrqHndlr+0xec>)
 8000be0:	f7ff fcb0 	bl	8000544 <myPrintf>
		SUBGRF_SetRfFrequency(FREQ_402_MHZ);
 8000be4:	481a      	ldr	r0, [pc, #104]	@ (8000c50 <DioIrqHndlr+0xf0>)
 8000be6:	f007 fe3f 	bl	8008868 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8000bea:	2100      	movs	r1, #0
 8000bec:	2001      	movs	r0, #1
 8000bee:	f008 fa83 	bl	80090f8 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8000bf2:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8000bf6:	f007 fc63 	bl	80084c0 <SUBGRF_SetRxBoosted>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c00:	4814      	ldr	r0, [pc, #80]	@ (8000c54 <DioIrqHndlr+0xf4>)
 8000c02:	f000 fdff 	bl	8001804 <HAL_GPIO_WritePin>
		delay_us(1000000);  // 500ms delay
 8000c06:	4814      	ldr	r0, [pc, #80]	@ (8000c58 <DioIrqHndlr+0xf8>)
 8000c08:	f7ff fc82 	bl	8000510 <delay_us>
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c12:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <DioIrqHndlr+0xf4>)
 8000c14:	f000 fdf6 	bl	8001804 <HAL_GPIO_WritePin>
		delay_us(1000000);
 8000c18:	480f      	ldr	r0, [pc, #60]	@ (8000c58 <DioIrqHndlr+0xf8>)
 8000c1a:	f7ff fc79 	bl	8000510 <delay_us>
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000248 	.word	0x20000248
 8000c30:	0800a614 	.word	0x0800a614
 8000c34:	0800a628 	.word	0x0800a628
 8000c38:	0800a62c 	.word	0x0800a62c
 8000c3c:	20000256 	.word	0x20000256
 8000c40:	0800a630 	.word	0x0800a630
 8000c44:	20000250 	.word	0x20000250
 8000c48:	0800a65c 	.word	0x0800a65c
 8000c4c:	0800a664 	.word	0x0800a664
 8000c50:	17fbc158 	.word	0x17fbc158
 8000c54:	48000400 	.word	0x48000400
 8000c58:	000f4240 	.word	0x000f4240

08000c5c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <LL_AHB2_GRP1_EnableClock>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ca0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ca4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ca6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ce4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cec:	68fb      	ldr	r3, [r7, #12]
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d04:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
}
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f7ff ffdb 	bl	8000cf8 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2032      	movs	r0, #50	@ 0x32
 8000d48:	f000 fb0b 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000d4c:	2032      	movs	r0, #50	@ 0x32
 8000d4e:	f000 fb22 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <HAL_TIM_Base_MspInit+0x44>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d10c      	bne.n	8000d88 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000d72:	f7ff ffa9 	bl	8000cc8 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2018      	movs	r0, #24
 8000d7c:	f000 faf1 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d80:	2018      	movs	r0, #24
 8000d82:	f000 fb08 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d86:	e007      	b.n	8000d98 <HAL_TIM_Base_MspInit+0x3c>
  else if(htim_base->Instance==TIM2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d90:	d102      	bne.n	8000d98 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d92:	2001      	movs	r0, #1
 8000d94:	f7ff ff80 	bl	8000c98 <LL_APB1_GRP1_EnableClock>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40012c00 	.word	0x40012c00

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b096      	sub	sp, #88	@ 0x58
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2238      	movs	r2, #56	@ 0x38
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f008 ff95 	bl	8009cf4 <memset>
  if(huart->Instance==USART2)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1b      	ldr	r2, [pc, #108]	@ (8000e3c <HAL_UART_MspInit+0x98>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d12e      	bne.n	8000e32 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000ddc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 ff3a 	bl	8002c5c <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff ff35 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000df6:	f7ff ff4f 	bl	8000c98 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f7ff ff34 	bl	8000c68 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000e00:	230c      	movs	r3, #12
 8000e02:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e10:	2307      	movs	r3, #7
 8000e12:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1e:	f000 fb91 	bl	8001544 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	2025      	movs	r0, #37	@ 0x25
 8000e28:	f000 fa9b 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e2c:	2025      	movs	r0, #37	@ 0x25
 8000e2e:	f000 fab2 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3758      	adds	r7, #88	@ 0x58
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40004400 	.word	0x40004400

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <NMI_Handler+0x4>

08000e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <MemManage_Handler+0x4>

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f97e 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <TIM1_UP_IRQHandler+0x10>)
 8000e9e:	f002 fd4d 	bl	800393c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000011c 	.word	0x2000011c

08000eac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <USART2_IRQHandler+0x10>)
 8000eb2:	f003 fa0f 	bl	80042d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001b4 	.word	0x200001b4

08000ec0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000ec6:	f002 faff 	bl	80034c8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000110 	.word	0x20000110

08000ed4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_GetTick+0x24>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8000ef2:	f000 f892 	bl	800101a <TIMER_IF_GetTimerValue>
 8000ef6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000257 	.word	0x20000257

08000f08 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f8af 	bl	8001076 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f008 fed8 	bl	8009d04 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20010000 	.word	0x20010000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	20000258 	.word	0x20000258
 8000f88:	20000570 	.word	0x20000570

08000f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	@ (8000fec <TIMER_IF_SetTimerContext+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	2000025c 	.word	0x2000025c

08000ff0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000ff4:	4b02      	ldr	r3, [pc, #8]	@ (8001000 <TIMER_IF_GetTimerContext+0x10>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	2000025c 	.word	0x2000025c

08001004 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 800103a:	687b      	ldr	r3, [r7, #4]
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001046:	b480      	push	{r7}
 8001048:	b085      	sub	sp, #20
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001088:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800108a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800108c:	f7ff ff7e 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	@ (80010c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <LoopForever+0xe>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	@ (80010d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	@ (80010d4 <LoopForever+0x16>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010b6:	f008 fe2b 	bl	8009d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ba:	f7ff faa9 	bl	8000610 <main>

080010be <LoopForever>:

LoopForever:
    b LoopForever
 80010be:	e7fe      	b.n	80010be <LoopForever>
  ldr   r0, =_estack
 80010c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010cc:	0800a920 	.word	0x0800a920
  ldr r2, =_sbss
 80010d0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010d4:	2000056c 	.word	0x2000056c

080010d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC_IRQHandler>
	...

080010dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 f930 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80010ec:	f001 fbd8 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <HAL_Init+0x3c>)
 80010f4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f810 	bl	800111c <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
 8001106:	e001      	b.n	800110c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001108:	f7ff fe0e 	bl	8000d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800110c:	79fb      	ldrb	r3, [r7, #7]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_InitTick+0x6c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d024      	beq.n	800117a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001130:	f001 fbb6 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8001134:	4602      	mov	r2, r0
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <HAL_InitTick+0x6c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001140:	fbb3 f3f1 	udiv	r3, r3, r1
 8001144:	fbb2 f3f3 	udiv	r3, r2, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f932 	bl	80013b2 <HAL_SYSTICK_Config>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10f      	bne.n	8001174 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	d809      	bhi.n	800116e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115a:	2200      	movs	r2, #0
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	f04f 30ff 	mov.w	r0, #4294967295
 8001162:	f000 f8fe 	bl	8001362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001166:	4a09      	ldr	r2, [pc, #36]	@ (800118c <HAL_InitTick+0x70>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e007      	b.n	800117e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e004      	b.n	800117e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e001      	b.n	800117e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <HAL_IncTick+0x1c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_IncTick+0x20>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a03      	ldr	r2, [pc, #12]	@ (80011b0 <HAL_IncTick+0x20>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	20000260 	.word	0x20000260

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	@ (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff90 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff2d 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff44 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff92 	bl	80012a4 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff61 	bl	8001250 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff37 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa4 	bl	8001308 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e04f      	b.n	800147c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d008      	beq.n	80013fa <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2204      	movs	r2, #4
 80013ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e040      	b.n	800147c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 020e 	bic.w	r2, r2, #14
 8001408:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001414:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001418:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f003 021c 	and.w	r2, r3, #28
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001446:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00c      	beq.n	800146a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800145e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001468:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d005      	beq.n	80014aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2204      	movs	r2, #4
 80014a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e047      	b.n	800153a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 020e 	bic.w	r2, r2, #14
 80014b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	f003 021c 	and.w	r2, r3, #28
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00c      	beq.n	800151a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800150e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001518:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	4798      	blx	r3
    }
  }
  return status;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	e140      	b.n	80017d6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	4013      	ands	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8132 	beq.w	80017d0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d005      	beq.n	8001584 <HAL_GPIO_Init+0x40>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d130      	bne.n	80015e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ba:	2201      	movs	r2, #1
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f003 0201 	and.w	r2, r3, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	2b03      	cmp	r3, #3
 80015f0:	d017      	beq.n	8001622 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	2203      	movs	r2, #3
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d123      	bne.n	8001676 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	08da      	lsrs	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3208      	adds	r2, #8
 8001636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	691a      	ldr	r2, [r3, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	08da      	lsrs	r2, r3, #3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3208      	adds	r2, #8
 8001670:	6939      	ldr	r1, [r7, #16]
 8001672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0203 	and.w	r2, r3, #3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 808c 	beq.w	80017d0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80016b8:	4a4e      	ldr	r2, [pc, #312]	@ (80017f4 <HAL_GPIO_Init+0x2b0>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	2207      	movs	r2, #7
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016e2:	d00d      	beq.n	8001700 <HAL_GPIO_Init+0x1bc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a44      	ldr	r2, [pc, #272]	@ (80017f8 <HAL_GPIO_Init+0x2b4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d007      	beq.n	80016fc <HAL_GPIO_Init+0x1b8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a43      	ldr	r2, [pc, #268]	@ (80017fc <HAL_GPIO_Init+0x2b8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d101      	bne.n	80016f8 <HAL_GPIO_Init+0x1b4>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x1be>
 80016f8:	2307      	movs	r3, #7
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x1be>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x1be>
 8001700:	2300      	movs	r3, #0
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001712:	4938      	ldr	r1, [pc, #224]	@ (80017f4 <HAL_GPIO_Init+0x2b0>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001720:	4b37      	ldr	r3, [pc, #220]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001744:	4a2e      	ldr	r2, [pc, #184]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800174a:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800176e:	4a24      	ldr	r2, [pc, #144]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001774:	4b22      	ldr	r3, [pc, #136]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 8001776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800177a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800179a:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80017a2:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 80017a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017a8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <HAL_GPIO_Init+0x2bc>)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f aeb7 	bne.w	8001554 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40010000 	.word	0x40010000
 80017f8:	48000400 	.word	0x48000400
 80017fc:	48000800 	.word	0x48000800
 8001800:	58000800 	.word	0x58000800

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001820:	e002      	b.n	8001828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
	...

08001834 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <HAL_PWR_EnableBkUpAccess+0x18>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a03      	ldr	r2, [pc, #12]	@ (800184c <HAL_PWR_EnableBkUpAccess+0x18>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	58000400 	.word	0x58000400

08001850 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <HAL_PWREx_GetVoltageRange+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	58000400 	.word	0x58000400

08001868 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001874:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001878:	d101      	bne.n	800187e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	58000400 	.word	0x58000400

0800188c <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800189a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80018ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018d6:	d101      	bne.n	80018dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001930:	d101      	bne.n	8001936 <LL_RCC_HSE_IsReady+0x18>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <LL_RCC_HSE_IsReady+0x1a>
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800194e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800196a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800198a:	d101      	bne.n	8001990 <LL_RCC_HSI_IsReady+0x18>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <LL_RCC_HSI_IsReady+0x1a>
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	061b      	lsls	r3, r3, #24
 80019b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d101      	bne.n	80019da <LL_RCC_LSE_IsReady+0x18>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <LL_RCC_LSE_IsReady+0x1a>
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d101      	bne.n	8001a3c <LL_RCC_LSI_IsReady+0x18>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <LL_RCC_LSI_IsReady+0x1a>
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr

08001a46 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6013      	str	r3, [r2, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr

08001a62 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6013      	str	r3, [r2, #0]
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d101      	bne.n	8001a94 <LL_RCC_MSI_IsReady+0x16>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_RCC_MSI_IsReady+0x18>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d101      	bne.n	8001ab4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 030c 	and.w	r3, r3, #12
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001b86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001bb0:	f023 020f 	bic.w	r2, r3, #15
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c36:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cbe:	d101      	bne.n	8001cc4 <LL_RCC_PLL_IsReady+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_RCC_PLL_IsReady+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3a:	d101      	bne.n	8001d40 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d52:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001d5e:	d101      	bne.n	8001d64 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d82:	d101      	bne.n	8001d88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001da4:	d101      	bne.n	8001daa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001dc6:	d101      	bne.n	8001dcc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e36f      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dea:	f7ff fea6 	bl	8001b3a <LL_RCC_GetSysClkSource>
 8001dee:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df0:	f7ff ff8f 	bl	8001d12 <LL_RCC_PLL_GetMainSource>
 8001df4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80c4 	beq.w	8001f8c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x3e>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d176      	bne.n	8001efe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d173      	bne.n	8001efe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e353      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x68>
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e3e:	e006      	b.n	8001e4e <HAL_RCC_OscConfig+0x76>
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d222      	bcs.n	8001e98 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fd5a 	bl	8002910 <RCC_SetFlashLatencyFromMSIRange>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e331      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fe2b 	bl	8001aec <LL_RCC_MSI_SetCalibTrimming>
 8001e96:	e021      	b.n	8001edc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ea2:	f043 0308 	orr.w	r3, r3, #8
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe12 	bl	8001aec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fd1f 	bl	8002910 <RCC_SetFlashLatencyFromMSIRange>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e2f6      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001edc:	f000 fce0 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4aa7      	ldr	r2, [pc, #668]	@ (8002180 <HAL_RCC_OscConfig+0x3a8>)
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001ee6:	4ba7      	ldr	r3, [pc, #668]	@ (8002184 <HAL_RCC_OscConfig+0x3ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f916 	bl	800111c <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001ef4:	7cfb      	ldrb	r3, [r7, #19]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d047      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	e2e5      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d02c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f06:	f7ff fd9e 	bl	8001a46 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe ffe9 	bl	8000ee0 <HAL_GetTick>
 8001f0e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f12:	f7fe ffe5 	bl	8000ee0 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e2d2      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f24:	f7ff fdab 	bl	8001a7e <LL_RCC_MSI_IsReady>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f1      	beq.n	8001f12 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f50:	4313      	orrs	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fdc7 	bl	8001aec <LL_RCC_MSI_SetCalibTrimming>
 8001f5e:	e015      	b.n	8001f8c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f60:	f7ff fd7f 	bl	8001a62 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f64:	f7fe ffbc 	bl	8000ee0 <HAL_GetTick>
 8001f68:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f6c:	f7fe ffb8 	bl	8000ee0 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e2a5      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f7e:	f7ff fd7e 	bl	8001a7e <LL_RCC_MSI_IsReady>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f1      	bne.n	8001f6c <HAL_RCC_OscConfig+0x194>
 8001f88:	e000      	b.n	8001f8c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f8a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d058      	beq.n	800204a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x1d2>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	d108      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d14b      	bne.n	800204a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e289      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_OscConfig+0x204>
 8001fd6:	f7ff fc86 	bl	80018e6 <LL_RCC_HSE_Enable>
 8001fda:	e00d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x220>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001fe4:	d104      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x218>
 8001fe6:	f7ff fc51 	bl	800188c <LL_RCC_HSE_EnableTcxo>
 8001fea:	f7ff fc7c 	bl	80018e6 <LL_RCC_HSE_Enable>
 8001fee:	e003      	b.n	8001ff8 <HAL_RCC_OscConfig+0x220>
 8001ff0:	f7ff fc87 	bl	8001902 <LL_RCC_HSE_Disable>
 8001ff4:	f7ff fc58 	bl	80018a8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d012      	beq.n	8002026 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe ff6e 	bl	8000ee0 <HAL_GetTick>
 8002004:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002008:	f7fe ff6a 	bl	8000ee0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	@ 0x64
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e257      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800201a:	f7ff fc80 	bl	800191e <LL_RCC_HSE_IsReady>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f1      	beq.n	8002008 <HAL_RCC_OscConfig+0x230>
 8002024:	e011      	b.n	800204a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe ff5b 	bl	8000ee0 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202e:	f7fe ff57 	bl	8000ee0 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b64      	cmp	r3, #100	@ 0x64
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e244      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002040:	f7ff fc6d 	bl	800191e <LL_RCC_HSE_IsReady>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f1      	bne.n	800202e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d046      	beq.n	80020e4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d005      	beq.n	8002068 <HAL_RCC_OscConfig+0x290>
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d10e      	bne.n	8002080 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d10b      	bne.n	8002080 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e22a      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fc8e 	bl	800199a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800207e:	e031      	b.n	80020e4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d019      	beq.n	80020bc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	f7ff fc5a 	bl	8001940 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe ff28 	bl	8000ee0 <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002094:	f7fe ff24 	bl	8000ee0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e211      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80020a6:	f7ff fc67 	bl	8001978 <LL_RCC_HSI_IsReady>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f1      	beq.n	8002094 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fc70 	bl	800199a <LL_RCC_HSI_SetCalibTrimming>
 80020ba:	e013      	b.n	80020e4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020bc:	f7ff fc4e 	bl	800195c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff0e 	bl	8000ee0 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7fe ff0a 	bl	8000ee0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1f7      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80020da:	f7ff fc4d 	bl	8001978 <LL_RCC_HSI_IsReady>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f1      	bne.n	80020c8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d06e      	beq.n	80021ce <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d056      	beq.n	80021a6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002100:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	429a      	cmp	r2, r3
 800210e:	d031      	beq.n	8002174 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e1d0      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d013      	beq.n	800215a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002132:	f7ff fc67 	bl	8001a04 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002136:	f7fe fed3 	bl	8000ee0 <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213e:	f7fe fecf 	bl	8000ee0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b11      	cmp	r3, #17
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1bc      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002150:	f7ff fc68 	bl	8001a24 <LL_RCC_LSI_IsReady>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f1      	bne.n	800213e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002162:	f023 0210 	bic.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002174:	f7ff fc36 	bl	80019e4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7fe feb2 	bl	8000ee0 <HAL_GetTick>
 800217c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800217e:	e00c      	b.n	800219a <HAL_RCC_OscConfig+0x3c2>
 8002180:	20000004 	.word	0x20000004
 8002184:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe feaa 	bl	8000ee0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b11      	cmp	r3, #17
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e197      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800219a:	f7ff fc43 	bl	8001a24 <LL_RCC_LSI_IsReady>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f1      	beq.n	8002188 <HAL_RCC_OscConfig+0x3b0>
 80021a4:	e013      	b.n	80021ce <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	f7ff fc2d 	bl	8001a04 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe fe99 	bl	8000ee0 <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b2:	f7fe fe95 	bl	8000ee0 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b11      	cmp	r3, #17
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e182      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80021c4:	f7ff fc2e 	bl	8001a24 <LL_RCC_LSI_IsReady>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f1      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80d8 	beq.w	800238c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021dc:	f7ff fb44 	bl	8001868 <LL_PWR_IsEnabledBkUpAccess>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d113      	bne.n	800220e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021e6:	f7ff fb25 	bl	8001834 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7fe fe79 	bl	8000ee0 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7fe fe75 	bl	8000ee0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e162      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002204:	f7ff fb30 	bl	8001868 <LL_PWR_IsEnabledBkUpAccess>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f1      	beq.n	80021f2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d07b      	beq.n	800230e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b85      	cmp	r3, #133	@ 0x85
 800221c:	d003      	beq.n	8002226 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d109      	bne.n	800223a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7fe fe51 	bl	8000ee0 <HAL_GetTick>
 800223e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002248:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7fe fe43 	bl	8000ee0 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e12e      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800226c:	f7ff fba9 	bl	80019c2 <LL_RCC_LSE_IsReady>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0ef      	beq.n	8002256 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b81      	cmp	r3, #129	@ 0x81
 800227c:	d003      	beq.n	8002286 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b85      	cmp	r3, #133	@ 0x85
 8002284:	d121      	bne.n	80022ca <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe fe2b 	bl	8000ee0 <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002294:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80022a0:	e00a      	b.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a2:	f7fe fe1d 	bl	8000ee0 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e108      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ec      	beq.n	80022a2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80022c8:	e060      	b.n	800238c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7fe fe09 	bl	8000ee0 <HAL_GetTick>
 80022ce:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fdfb 	bl	8000ee0 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0e6      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80022fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ec      	bne.n	80022e6 <HAL_RCC_OscConfig+0x50e>
 800230c:	e03e      	b.n	800238c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe fde7 	bl	8000ee0 <HAL_GetTick>
 8002312:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002328:	e00a      	b.n	8002340 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fdd9 	bl	8000ee0 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002338:	4293      	cmp	r3, r2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0c4      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ec      	bne.n	800232a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7fe fdc6 	bl	8000ee0 <HAL_GetTick>
 8002354:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe fdb8 	bl	8000ee0 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0a3      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002382:	f7ff fb1e 	bl	80019c2 <LL_RCC_LSE_IsReady>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ef      	bne.n	800236c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 8099 	beq.w	80024c8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d06c      	beq.n	8002476 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d14b      	bne.n	800243c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	f7ff fc74 	bl	8001c90 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe fd9a 	bl	8000ee0 <HAL_GetTick>
 80023ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe fd96 	bl	8000ee0 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b0a      	cmp	r3, #10
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e083      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80023c2:	f7ff fc73 	bl	8001cac <LL_RCC_PLL_IsReady>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f1      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b40      	ldr	r3, [pc, #256]	@ (80024d4 <HAL_RCC_OscConfig+0x6fc>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023de:	4311      	orrs	r1, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023e4:	0212      	lsls	r2, r2, #8
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023f8:	430a      	orrs	r2, r1
 80023fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023fe:	4313      	orrs	r3, r2
 8002400:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002402:	f7ff fc37 	bl	8001c74 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fd63 	bl	8000ee0 <HAL_GetTick>
 800241a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fd5f 	bl	8000ee0 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b0a      	cmp	r3, #10
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e04c      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002430:	f7ff fc3c 	bl	8001cac <LL_RCC_PLL_IsReady>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f1      	beq.n	800241e <HAL_RCC_OscConfig+0x646>
 800243a:	e045      	b.n	80024c8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	f7ff fc28 	bl	8001c90 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fd4e 	bl	8000ee0 <HAL_GetTick>
 8002444:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fd4a 	bl	8000ee0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b0a      	cmp	r3, #10
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e037      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800245a:	f7ff fc27 	bl	8001cac <LL_RCC_PLL_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f1      	bne.n	8002448 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800246e:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <HAL_RCC_OscConfig+0x700>)
 8002470:	4013      	ands	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
 8002474:	e028      	b.n	80024c8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e023      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 0203 	and.w	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002494:	429a      	cmp	r2, r3
 8002496:	d115      	bne.n	80024c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d10e      	bne.n	80024c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3720      	adds	r7, #32
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	11c1808c 	.word	0x11c1808c
 80024d8:	eefefffc 	.word	0xeefefffc

080024dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e12c      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b98      	ldr	r3, [pc, #608]	@ (8002754 <HAL_RCC_ClockConfig+0x278>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d91b      	bls.n	8002536 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b95      	ldr	r3, [pc, #596]	@ (8002754 <HAL_RCC_ClockConfig+0x278>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 0207 	bic.w	r2, r3, #7
 8002506:	4993      	ldr	r1, [pc, #588]	@ (8002754 <HAL_RCC_ClockConfig+0x278>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250e:	f7fe fce7 	bl	8000ee0 <HAL_GetTick>
 8002512:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002514:	e008      	b.n	8002528 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002516:	f7fe fce3 	bl	8000ee0 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e110      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002528:	4b8a      	ldr	r3, [pc, #552]	@ (8002754 <HAL_RCC_ClockConfig+0x278>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d1ef      	bne.n	8002516 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fb02 	bl	8001b50 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800254c:	f7fe fcc8 	bl	8000ee0 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002554:	f7fe fcc4 	bl	8000ee0 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0f1      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002566:	f7ff fbdf 	bl	8001d28 <LL_RCC_IsActiveFlag_HPRE>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f1      	beq.n	8002554 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d016      	beq.n	80025aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff faf8 	bl	8001b76 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002586:	f7fe fcab 	bl	8000ee0 <HAL_GetTick>
 800258a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800258e:	f7fe fca7 	bl	8000ee0 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0d4      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025a0:	f7ff fbd3 	bl	8001d4a <LL_RCC_IsActiveFlag_C2HPRE>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f1      	beq.n	800258e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d016      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff faf0 	bl	8001ba0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025c0:	f7fe fc8e 	bl	8000ee0 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025c8:	f7fe fc8a 	bl	8000ee0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0b7      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025da:	f7ff fbc8 	bl	8001d6e <LL_RCC_IsActiveFlag_SHDHPRE>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f1      	beq.n	80025c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d016      	beq.n	800261e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fae9 	bl	8001bcc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025fa:	f7fe fc71 	bl	8000ee0 <HAL_GetTick>
 80025fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002600:	e008      	b.n	8002614 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002602:	f7fe fc6d 	bl	8000ee0 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e09a      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002614:	f7ff fbbd 	bl	8001d92 <LL_RCC_IsActiveFlag_PPRE1>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f1      	beq.n	8002602 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d017      	beq.n	800265a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fade 	bl	8001bf2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002636:	f7fe fc53 	bl	8000ee0 <HAL_GetTick>
 800263a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800263e:	f7fe fc4f 	bl	8000ee0 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e07c      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002650:	f7ff fbb0 	bl	8001db4 <LL_RCC_IsActiveFlag_PPRE2>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f1      	beq.n	800263e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d043      	beq.n	80026ee <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d106      	bne.n	800267c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800266e:	f7ff f956 	bl	800191e <LL_RCC_HSE_IsReady>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11e      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e066      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d106      	bne.n	8002692 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002684:	f7ff fb12 	bl	8001cac <LL_RCC_PLL_IsReady>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d113      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e05b      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800269a:	f7ff f9f0 	bl	8001a7e <LL_RCC_MSI_IsReady>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d108      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e050      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80026a8:	f7ff f966 	bl	8001978 <LL_RCC_HSI_IsReady>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e049      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fa2a 	bl	8001b14 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fc0e 	bl	8000ee0 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7fe fc0a 	bl	8000ee0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e035      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	f7ff fa2c 	bl	8001b3a <LL_RCC_GetSysClkSource>
 80026e2:	4602      	mov	r2, r0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d1ec      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <HAL_RCC_ClockConfig+0x278>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d21b      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fc:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_RCC_ClockConfig+0x278>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f023 0207 	bic.w	r2, r3, #7
 8002704:	4913      	ldr	r1, [pc, #76]	@ (8002754 <HAL_RCC_ClockConfig+0x278>)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe fbe8 	bl	8000ee0 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	e008      	b.n	8002726 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002714:	f7fe fbe4 	bl	8000ee0 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e011      	b.n	800274a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_RCC_ClockConfig+0x278>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d1ef      	bne.n	8002714 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002734:	f000 f8b4 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8002738:	4603      	mov	r3, r0
 800273a:	4a07      	ldr	r2, [pc, #28]	@ (8002758 <HAL_RCC_ClockConfig+0x27c>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <HAL_RCC_ClockConfig+0x280>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fcea 	bl	800111c <HAL_InitTick>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	58004000 	.word	0x58004000
 8002758:	20000004 	.word	0x20000004
 800275c:	20000008 	.word	0x20000008

08002760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276e:	f7ff f9e4 	bl	8001b3a <LL_RCC_GetSysClkSource>
 8002772:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002774:	f7ff facd 	bl	8001d12 <LL_RCC_PLL_GetMainSource>
 8002778:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x2c>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b0c      	cmp	r3, #12
 8002784:	d139      	bne.n	80027fa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d136      	bne.n	80027fa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800278c:	f7ff f987 	bl	8001a9e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d115      	bne.n	80027c2 <HAL_RCC_GetSysClockFreq+0x62>
 8002796:	f7ff f982 	bl	8001a9e <LL_RCC_MSI_IsEnabledRangeSelect>
 800279a:	4603      	mov	r3, r0
 800279c:	2b01      	cmp	r3, #1
 800279e:	d106      	bne.n	80027ae <HAL_RCC_GetSysClockFreq+0x4e>
 80027a0:	f7ff f98d 	bl	8001abe <LL_RCC_MSI_GetRange>
 80027a4:	4603      	mov	r3, r0
 80027a6:	0a1b      	lsrs	r3, r3, #8
 80027a8:	f003 030f 	and.w	r3, r3, #15
 80027ac:	e005      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x5a>
 80027ae:	f7ff f991 	bl	8001ad4 <LL_RCC_MSI_GetRangeAfterStandby>
 80027b2:	4603      	mov	r3, r0
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	4a36      	ldr	r2, [pc, #216]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x134>)
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	e014      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x8c>
 80027c2:	f7ff f96c 	bl	8001a9e <LL_RCC_MSI_IsEnabledRangeSelect>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d106      	bne.n	80027da <HAL_RCC_GetSysClockFreq+0x7a>
 80027cc:	f7ff f977 	bl	8001abe <LL_RCC_MSI_GetRange>
 80027d0:	4603      	mov	r3, r0
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	e005      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x86>
 80027da:	f7ff f97b 	bl	8001ad4 <LL_RCC_MSI_GetRangeAfterStandby>
 80027de:	4603      	mov	r3, r0
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x134>)
 80027e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ec:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d115      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80027f8:	e012      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d102      	bne.n	8002806 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002800:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x138>)
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e00c      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d109      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800280c:	f7ff f85a 	bl	80018c4 <LL_RCC_HSE_IsEnabledDiv2>
 8002810:	4603      	mov	r3, r0
 8002812:	2b01      	cmp	r3, #1
 8002814:	d102      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x138>)
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e001      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b1f      	ldr	r3, [pc, #124]	@ (800289c <HAL_RCC_GetSysClockFreq+0x13c>)
 800281e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002820:	f7ff f98b 	bl	8001b3a <LL_RCC_GetSysClkSource>
 8002824:	4603      	mov	r3, r0
 8002826:	2b0c      	cmp	r3, #12
 8002828:	d12f      	bne.n	800288a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800282a:	f7ff fa72 	bl	8001d12 <LL_RCC_PLL_GetMainSource>
 800282e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b02      	cmp	r3, #2
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0xde>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d003      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0xe4>
 800283c:	e00d      	b.n	800285a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800283e:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x138>)
 8002840:	60fb      	str	r3, [r7, #12]
        break;
 8002842:	e00d      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002844:	f7ff f83e 	bl	80018c4 <LL_RCC_HSE_IsEnabledDiv2>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x138>)
 8002850:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002852:	e005      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002856:	60fb      	str	r3, [r7, #12]
        break;
 8002858:	e002      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	60fb      	str	r3, [r7, #12]
        break;
 800285e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002860:	f7ff fa35 	bl	8001cce <LL_RCC_PLL_GetN>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	fb03 f402 	mul.w	r4, r3, r2
 800286c:	f7ff fa46 	bl	8001cfc <LL_RCC_PLL_GetDivider>
 8002870:	4603      	mov	r3, r0
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	3301      	adds	r3, #1
 8002876:	fbb4 f4f3 	udiv	r4, r4, r3
 800287a:	f7ff fa34 	bl	8001ce6 <LL_RCC_PLL_GetR>
 800287e:	4603      	mov	r3, r0
 8002880:	0f5b      	lsrs	r3, r3, #29
 8002882:	3301      	adds	r3, #1
 8002884:	fbb4 f3f3 	udiv	r3, r4, r3
 8002888:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800288a:	697b      	ldr	r3, [r7, #20]
}
 800288c:	4618      	mov	r0, r3
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	0800a708 	.word	0x0800a708
 8002898:	00f42400 	.word	0x00f42400
 800289c:	01e84800 	.word	0x01e84800

080028a0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b598      	push	{r3, r4, r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80028a4:	f7ff ff5c 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 80028a8:	4604      	mov	r4, r0
 80028aa:	f7ff f9b5 	bl	8001c18 <LL_RCC_GetAHBPrescaler>
 80028ae:	4603      	mov	r3, r0
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	4a03      	ldr	r2, [pc, #12]	@ (80028c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80028b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd98      	pop	{r3, r4, r7, pc}
 80028c4:	0800a6a8 	.word	0x0800a6a8

080028c8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b598      	push	{r3, r4, r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80028cc:	f7ff ffe8 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028d0:	4604      	mov	r4, r0
 80028d2:	f7ff f9b9 	bl	8001c48 <LL_RCC_GetAPB1Prescaler>
 80028d6:	4603      	mov	r3, r0
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	4a03      	ldr	r2, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd98      	pop	{r3, r4, r7, pc}
 80028e8:	0800a6e8 	.word	0x0800a6e8

080028ec <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ec:	b598      	push	{r3, r4, r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80028f0:	f7ff ffd6 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028f4:	4604      	mov	r4, r0
 80028f6:	f7ff f9b2 	bl	8001c5e <LL_RCC_GetAPB2Prescaler>
 80028fa:	4603      	mov	r3, r0
 80028fc:	0adb      	lsrs	r3, r3, #11
 80028fe:	4a03      	ldr	r2, [pc, #12]	@ (800290c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002904:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd98      	pop	{r3, r4, r7, pc}
 800290c:	0800a6e8 	.word	0x0800a6e8

08002910 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	4a10      	ldr	r2, [pc, #64]	@ (8002964 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002928:	f7ff f981 	bl	8001c2e <LL_RCC_GetAHB3Prescaler>
 800292c:	4603      	mov	r3, r0
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	4a0c      	ldr	r2, [pc, #48]	@ (8002968 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4a09      	ldr	r2, [pc, #36]	@ (800296c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0c9c      	lsrs	r4, r3, #18
 800294c:	f7fe ff80 	bl	8001850 <HAL_PWREx_GetVoltageRange>
 8002950:	4603      	mov	r3, r0
 8002952:	4619      	mov	r1, r3
 8002954:	4620      	mov	r0, r4
 8002956:	f000 f80b 	bl	8002970 <RCC_SetFlashLatency>
 800295a:	4603      	mov	r3, r0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	0800a708 	.word	0x0800a708
 8002968:	0800a6a8 	.word	0x0800a6a8
 800296c:	431bde83 	.word	0x431bde83

08002970 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08e      	sub	sp, #56	@ 0x38
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800297a:	4a3a      	ldr	r2, [pc, #232]	@ (8002a64 <RCC_SetFlashLatency+0xf4>)
 800297c:	f107 0320 	add.w	r3, r7, #32
 8002980:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002984:	6018      	str	r0, [r3, #0]
 8002986:	3304      	adds	r3, #4
 8002988:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800298a:	4a37      	ldr	r2, [pc, #220]	@ (8002a68 <RCC_SetFlashLatency+0xf8>)
 800298c:	f107 0318 	add.w	r3, r7, #24
 8002990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002994:	6018      	str	r0, [r3, #0]
 8002996:	3304      	adds	r3, #4
 8002998:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800299a:	4a34      	ldr	r2, [pc, #208]	@ (8002a6c <RCC_SetFlashLatency+0xfc>)
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80029a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029a6:	2300      	movs	r3, #0
 80029a8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b0:	d11b      	bne.n	80029ea <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029b6:	e014      	b.n	80029e2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80029b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	3338      	adds	r3, #56	@ 0x38
 80029be:	443b      	add	r3, r7
 80029c0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d807      	bhi.n	80029dc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	3338      	adds	r3, #56	@ 0x38
 80029d2:	443b      	add	r3, r7
 80029d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029da:	e021      	b.n	8002a20 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80029dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029de:	3301      	adds	r3, #1
 80029e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d9e7      	bls.n	80029b8 <RCC_SetFlashLatency+0x48>
 80029e8:	e01a      	b.n	8002a20 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ee:	e014      	b.n	8002a1a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	3338      	adds	r3, #56	@ 0x38
 80029f6:	443b      	add	r3, r7
 80029f8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80029fc:	461a      	mov	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d807      	bhi.n	8002a14 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	3338      	adds	r3, #56	@ 0x38
 8002a0a:	443b      	add	r3, r7
 8002a0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002a12:	e005      	b.n	8002a20 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a16:	3301      	adds	r3, #1
 8002a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d9e7      	bls.n	80029f0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <RCC_SetFlashLatency+0x100>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 0207 	bic.w	r2, r3, #7
 8002a28:	4911      	ldr	r1, [pc, #68]	@ (8002a70 <RCC_SetFlashLatency+0x100>)
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a30:	f7fe fa56 	bl	8000ee0 <HAL_GetTick>
 8002a34:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a36:	e008      	b.n	8002a4a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a38:	f7fe fa52 	bl	8000ee0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e007      	b.n	8002a5a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a4a:	4b09      	ldr	r3, [pc, #36]	@ (8002a70 <RCC_SetFlashLatency+0x100>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1ef      	bne.n	8002a38 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3738      	adds	r7, #56	@ 0x38
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	0800a668 	.word	0x0800a668
 8002a68:	0800a670 	.word	0x0800a670
 8002a6c:	0800a678 	.word	0x0800a678
 8002a70:	58004000 	.word	0x58004000

08002a74 <LL_RCC_LSE_IsReady>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d101      	bne.n	8002a8c <LL_RCC_LSE_IsReady+0x18>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <LL_RCC_LSE_IsReady+0x1a>
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <LL_RCC_SetUSARTClockSource>:
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0c1b      	lsrs	r3, r3, #16
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	401a      	ands	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_SetI2SClockSource>:
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ada:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <LL_RCC_SetLPUARTClockSource>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b00:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <LL_RCC_SetI2CClockSource>:
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b26:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b32:	43db      	mvns	r3, r3
 8002b34:	401a      	ands	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002b3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_SetLPTIMClockSource>:
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	041b      	lsls	r3, r3, #16
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_SetRNGClockSource>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b94:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002b98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <LL_RCC_SetADCClockSource>:
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_SetRTCClockSource>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <LL_RCC_GetRTCClockSource>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_RCC_ForceBackupDomainReset>:
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002c52:	bf00      	nop
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002c68:	2300      	movs	r3, #0
 8002c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d058      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002c7c:	f7fe fdda 	bl	8001834 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c80:	f7fe f92e 	bl	8000ee0 <HAL_GetTick>
 8002c84:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002c86:	e009      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7fe f92a 	bl	8000ee0 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	74fb      	strb	r3, [r7, #19]
        break;
 8002c9a:	e006      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002c9c:	4b7b      	ldr	r3, [pc, #492]	@ (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d13c      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002cb0:	f7ff ffa7 	bl	8002c02 <LL_RCC_GetRTCClockSource>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d00f      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ccc:	f7ff ffa5 	bl	8002c1a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd0:	f7ff ffb3 	bl	8002c3a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d014      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe f8fa 	bl	8000ee0 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002cee:	e00b      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe f8f6 	bl	8000ee0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d902      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	74fb      	strb	r3, [r7, #19]
            break;
 8002d06:	e004      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002d08:	f7ff feb4 	bl	8002a74 <LL_RCC_LSE_IsReady>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff5b 	bl	8002bd8 <LL_RCC_SetRTCClockSource>
 8002d22:	e004      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	74bb      	strb	r3, [r7, #18]
 8002d28:	e001      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fea9 	bl	8002a96 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fe9e 	bl	8002a96 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fec0 	bl	8002af0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fee6 	bl	8002b52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d004      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fedb 	bl	8002b52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fed0 	bl	8002b52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fea9 	bl	8002b1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fe9e 	bl	8002b1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fe93 	bl	8002b1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d011      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fe5e 	bl	8002ac6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e12:	d107      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fea5 	bl	8002b84 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d107      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d011      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fea3 	bl	8002bae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e70:	d107      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e80:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002e82:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	58000400 	.word	0x58000400

08002e90 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ea0:	4904      	ldr	r1, [pc, #16]	@ (8002eb4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	58000400 	.word	0x58000400

08002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec2:	4a04      	ldr	r2, [pc, #16]	@ (8002ed4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002ec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	58000400 	.word	0x58000400

08002ed8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	4a04      	ldr	r2, [pc, #16]	@ (8002ef4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002ee4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	58000400 	.word	0x58000400

08002ef8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8002efc:	4b03      	ldr	r3, [pc, #12]	@ (8002f0c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8002efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f02:	619a      	str	r2, [r3, #24]
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	58000400 	.word	0x58000400

08002f10 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002f14:	4b06      	ldr	r3, [pc, #24]	@ (8002f30 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d101      	bne.n	8002f24 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	58000400 	.word	0x58000400

08002f34 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d101      	bne.n	8002f48 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	58000400 	.word	0x58000400

08002f58 <LL_RCC_RF_DisableReset>:
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <LL_RCC_IsRFUnderReset>:
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f8c:	d101      	bne.n	8002f92 <LL_RCC_IsRFUnderReset+0x1a>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <LL_RCC_IsRFUnderReset+0x1c>
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002fa6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002faa:	4905      	ldr	r1, [pc, #20]	@ (8002fc0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	58000800 	.word	0x58000800

08002fc4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
    return status;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	e052      	b.n	8003080 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	799b      	ldrb	r3, [r3, #6]
 8002fe2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8002fe4:	7bbb      	ldrb	r3, [r7, #14]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_SUBGHZ_Init+0x2c>
 8002fea:	7bbb      	ldrb	r3, [r7, #14]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d109      	bne.n	8003004 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fe9c 	bl	8000d34 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8002ffc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003000:	f7ff ffcc 	bl	8002f9c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8003004:	7bbb      	ldrb	r3, [r7, #14]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d126      	bne.n	8003058 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2202      	movs	r2, #2
 800300e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8003010:	f7ff ffa2 	bl	8002f58 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003014:	4b1c      	ldr	r3, [pc, #112]	@ (8003088 <HAL_SUBGHZ_Init+0xc4>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	0cdb      	lsrs	r3, r3, #19
 8003022:	2264      	movs	r2, #100	@ 0x64
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	609a      	str	r2, [r3, #8]
        break;
 800303a:	e007      	b.n	800304c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8003042:	f7ff ff99 	bl	8002f78 <LL_RCC_IsRFUnderReset>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ee      	bne.n	800302a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800304c:	f7ff ff34 	bl	8002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8003050:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003054:	f7ff ff1c 	bl	8002e90 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8003058:	f7ff ff4e 	bl	8002ef8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10a      	bne.n	8003078 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 faac 	bl	80035c4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	719a      	strb	r2, [r3, #6]

  return status;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000004 	.word	0x20000004

0800308c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	461a      	mov	r2, r3
 8003098:	460b      	mov	r3, r1
 800309a:	817b      	strh	r3, [r7, #10]
 800309c:	4613      	mov	r3, r2
 800309e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	799b      	ldrb	r3, [r3, #6]
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d14a      	bne.n	8003140 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	795b      	ldrb	r3, [r3, #5]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e045      	b.n	8003142 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2201      	movs	r2, #1
 80030ba:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fb4c 	bl	8003760 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80030c8:	f7ff ff06 	bl	8002ed8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80030cc:	210d      	movs	r1, #13
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fa98 	bl	8003604 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80030d4:	897b      	ldrh	r3, [r7, #10]
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	b29b      	uxth	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4619      	mov	r1, r3
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fa90 	bl	8003604 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80030e4:	897b      	ldrh	r3, [r7, #10]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fa8a 	bl	8003604 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	82bb      	strh	r3, [r7, #20]
 80030f4:	e00a      	b.n	800310c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80030f6:	8abb      	ldrh	r3, [r7, #20]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	4619      	mov	r1, r3
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fa7f 	bl	8003604 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003106:	8abb      	ldrh	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	82bb      	strh	r3, [r7, #20]
 800310c:	8aba      	ldrh	r2, [r7, #20]
 800310e:	893b      	ldrh	r3, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d3f0      	bcc.n	80030f6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003114:	f7ff fed0 	bl	8002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fb45 	bl	80037a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
 800312a:	e001      	b.n	8003130 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	715a      	strb	r2, [r3, #5]

    return status;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	e000      	b.n	8003142 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b088      	sub	sp, #32
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	461a      	mov	r2, r3
 8003156:	460b      	mov	r3, r1
 8003158:	817b      	strh	r3, [r7, #10]
 800315a:	4613      	mov	r3, r2
 800315c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	799b      	ldrb	r3, [r3, #6]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	d14a      	bne.n	8003202 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	795b      	ldrb	r3, [r3, #5]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8003174:	2302      	movs	r3, #2
 8003176:	e045      	b.n	8003204 <HAL_SUBGHZ_ReadRegisters+0xba>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 faee 	bl	8003760 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003184:	f7ff fea8 	bl	8002ed8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8003188:	211d      	movs	r1, #29
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 fa3a 	bl	8003604 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8003190:	897b      	ldrh	r3, [r7, #10]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	b29b      	uxth	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	4619      	mov	r1, r3
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fa32 	bl	8003604 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80031a0:	897b      	ldrh	r3, [r7, #10]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	4619      	mov	r1, r3
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fa2c 	bl	8003604 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80031ac:	2100      	movs	r1, #0
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa28 	bl	8003604 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	82fb      	strh	r3, [r7, #22]
 80031b8:	e009      	b.n	80031ce <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fa77 	bl	80036b0 <SUBGHZSPI_Receive>
      pData++;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	3301      	adds	r3, #1
 80031c6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80031c8:	8afb      	ldrh	r3, [r7, #22]
 80031ca:	3301      	adds	r3, #1
 80031cc:	82fb      	strh	r3, [r7, #22]
 80031ce:	8afa      	ldrh	r2, [r7, #22]
 80031d0:	893b      	ldrh	r3, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3f1      	bcc.n	80031ba <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80031d6:	f7ff fe6f 	bl	8002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fae4 	bl	80037a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e001      	b.n	80031f2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	715a      	strb	r2, [r3, #5]

    return status;
 80031fe:	7ffb      	ldrb	r3, [r7, #31]
 8003200:	e000      	b.n	8003204 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003202:	2302      	movs	r3, #2
  }
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	72fb      	strb	r3, [r7, #11]
 800321c:	4613      	mov	r3, r2
 800321e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	799b      	ldrb	r3, [r3, #6]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b01      	cmp	r3, #1
 8003228:	d14a      	bne.n	80032c0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	795b      	ldrb	r3, [r3, #5]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8003232:	2302      	movs	r3, #2
 8003234:	e045      	b.n	80032c2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fa8f 	bl	8003760 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8003242:	7afb      	ldrb	r3, [r7, #11]
 8003244:	2b84      	cmp	r3, #132	@ 0x84
 8003246:	d002      	beq.n	800324e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8003248:	7afb      	ldrb	r3, [r7, #11]
 800324a:	2b94      	cmp	r3, #148	@ 0x94
 800324c:	d103      	bne.n	8003256 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	711a      	strb	r2, [r3, #4]
 8003254:	e002      	b.n	800325c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800325c:	f7ff fe3c 	bl	8002ed8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003260:	7afb      	ldrb	r3, [r7, #11]
 8003262:	4619      	mov	r1, r3
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f9cd 	bl	8003604 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800326a:	2300      	movs	r3, #0
 800326c:	82bb      	strh	r3, [r7, #20]
 800326e:	e00a      	b.n	8003286 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8003270:	8abb      	ldrh	r3, [r7, #20]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4619      	mov	r1, r3
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f9c2 	bl	8003604 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8003280:	8abb      	ldrh	r3, [r7, #20]
 8003282:	3301      	adds	r3, #1
 8003284:	82bb      	strh	r3, [r7, #20]
 8003286:	8aba      	ldrh	r2, [r7, #20]
 8003288:	893b      	ldrh	r3, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d3f0      	bcc.n	8003270 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800328e:	f7ff fe13 	bl	8002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	2b84      	cmp	r3, #132	@ 0x84
 8003296:	d002      	beq.n	800329e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fa85 	bl	80037a8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	75fb      	strb	r3, [r7, #23]
 80032aa:	e001      	b.n	80032b0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	715a      	strb	r2, [r3, #5]

    return status;
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	e000      	b.n	80032c2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b088      	sub	sp, #32
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	461a      	mov	r2, r3
 80032d6:	460b      	mov	r3, r1
 80032d8:	72fb      	strb	r3, [r7, #11]
 80032da:	4613      	mov	r3, r2
 80032dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d13d      	bne.n	8003368 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	795b      	ldrb	r3, [r3, #5]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e038      	b.n	800336a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2201      	movs	r2, #1
 80032fc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 fa2e 	bl	8003760 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003304:	f7ff fde8 	bl	8002ed8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8003308:	7afb      	ldrb	r3, [r7, #11]
 800330a:	4619      	mov	r1, r3
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f979 	bl	8003604 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003312:	2100      	movs	r1, #0
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f975 	bl	8003604 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800331a:	2300      	movs	r3, #0
 800331c:	82fb      	strh	r3, [r7, #22]
 800331e:	e009      	b.n	8003334 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f9c4 	bl	80036b0 <SUBGHZSPI_Receive>
      pData++;
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	3301      	adds	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800332e:	8afb      	ldrh	r3, [r7, #22]
 8003330:	3301      	adds	r3, #1
 8003332:	82fb      	strh	r3, [r7, #22]
 8003334:	8afa      	ldrh	r2, [r7, #22]
 8003336:	893b      	ldrh	r3, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d3f1      	bcc.n	8003320 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800333c:	f7ff fdbc 	bl	8002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa31 	bl	80037a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e001      	b.n	8003358 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	715a      	strb	r2, [r3, #5]

    return status;
 8003364:	7ffb      	ldrb	r3, [r7, #31]
 8003366:	e000      	b.n	800336a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	461a      	mov	r2, r3
 800337e:	460b      	mov	r3, r1
 8003380:	72fb      	strb	r3, [r7, #11]
 8003382:	4613      	mov	r3, r2
 8003384:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	799b      	ldrb	r3, [r3, #6]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d13e      	bne.n	800340e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	795b      	ldrb	r3, [r3, #5]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8003398:	2302      	movs	r3, #2
 800339a:	e039      	b.n	8003410 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f9dc 	bl	8003760 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80033a8:	f7ff fd96 	bl	8002ed8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80033ac:	210e      	movs	r1, #14
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f928 	bl	8003604 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80033b4:	7afb      	ldrb	r3, [r7, #11]
 80033b6:	4619      	mov	r1, r3
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f923 	bl	8003604 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	82bb      	strh	r3, [r7, #20]
 80033c2:	e00a      	b.n	80033da <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80033c4:	8abb      	ldrh	r3, [r7, #20]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	4619      	mov	r1, r3
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f918 	bl	8003604 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80033d4:	8abb      	ldrh	r3, [r7, #20]
 80033d6:	3301      	adds	r3, #1
 80033d8:	82bb      	strh	r3, [r7, #20]
 80033da:	8aba      	ldrh	r2, [r7, #20]
 80033dc:	893b      	ldrh	r3, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3f0      	bcc.n	80033c4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80033e2:	f7ff fd69 	bl	8002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f9de 	bl	80037a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	75fb      	strb	r3, [r7, #23]
 80033f8:	e001      	b.n	80033fe <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	715a      	strb	r2, [r3, #5]

    return status;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	e000      	b.n	8003410 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800340e:	2302      	movs	r3, #2
  }
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	461a      	mov	r2, r3
 8003424:	460b      	mov	r3, r1
 8003426:	72fb      	strb	r3, [r7, #11]
 8003428:	4613      	mov	r3, r2
 800342a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	799b      	ldrb	r3, [r3, #6]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d141      	bne.n	80034be <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	795b      	ldrb	r3, [r3, #5]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8003442:	2302      	movs	r3, #2
 8003444:	e03c      	b.n	80034c0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2201      	movs	r2, #1
 800344a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f987 	bl	8003760 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003452:	f7ff fd41 	bl	8002ed8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8003456:	211e      	movs	r1, #30
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f8d3 	bl	8003604 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800345e:	7afb      	ldrb	r3, [r7, #11]
 8003460:	4619      	mov	r1, r3
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f8ce 	bl	8003604 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8003468:	2100      	movs	r1, #0
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8ca 	bl	8003604 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8003470:	2300      	movs	r3, #0
 8003472:	82fb      	strh	r3, [r7, #22]
 8003474:	e009      	b.n	800348a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f919 	bl	80036b0 <SUBGHZSPI_Receive>
      pData++;
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	3301      	adds	r3, #1
 8003482:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8003484:	8afb      	ldrh	r3, [r7, #22]
 8003486:	3301      	adds	r3, #1
 8003488:	82fb      	strh	r3, [r7, #22]
 800348a:	8afa      	ldrh	r2, [r7, #22]
 800348c:	893b      	ldrh	r3, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d3f1      	bcc.n	8003476 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003492:	f7ff fd11 	bl	8002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f986 	bl	80037a8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e001      	b.n	80034ae <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	715a      	strb	r2, [r3, #5]

    return status;
 80034ba:	7ffb      	ldrb	r3, [r7, #31]
 80034bc:	e000      	b.n	80034c0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80034be:	2302      	movs	r3, #2
  }
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3720      	adds	r7, #32
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80034d0:	2300      	movs	r3, #0
 80034d2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80034d4:	f107 020c 	add.w	r2, r7, #12
 80034d8:	2302      	movs	r3, #2
 80034da:	2112      	movs	r1, #18
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fef4 	bl	80032ca <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80034e2:	7b3b      	ldrb	r3, [r7, #12]
 80034e4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80034e6:	89fb      	ldrh	r3, [r7, #14]
 80034e8:	021b      	lsls	r3, r3, #8
 80034ea:	b21a      	sxth	r2, r3
 80034ec:	7b7b      	ldrb	r3, [r7, #13]
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	4313      	orrs	r3, r2
 80034f2:	b21b      	sxth	r3, r3
 80034f4:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80034f6:	f107 020c 	add.w	r2, r7, #12
 80034fa:	2302      	movs	r3, #2
 80034fc:	2102      	movs	r1, #2
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fe84 	bl	800320c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f005 fe56 	bl	80091c0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8003514:	89fb      	ldrh	r3, [r7, #14]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f005 fe5c 	bl	80091dc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8003524:	89fb      	ldrh	r3, [r7, #14]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f005 feac 	bl	800928c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8003534:	89fb      	ldrh	r3, [r7, #14]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f005 feb2 	bl	80092a8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8003544:	89fb      	ldrh	r3, [r7, #14]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f005 feb8 	bl	80092c4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8003554:	89fb      	ldrh	r3, [r7, #14]
 8003556:	f003 0320 	and.w	r3, r3, #32
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f005 fe86 	bl	8009270 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8003564:	89fb      	ldrh	r3, [r7, #14]
 8003566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f005 fe42 	bl	80091f8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8003574:	89fb      	ldrh	r3, [r7, #14]
 8003576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800357e:	89fb      	ldrh	r3, [r7, #14]
 8003580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003584:	2b00      	cmp	r3, #0
 8003586:	d004      	beq.n	8003592 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8003588:	2101      	movs	r1, #1
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f005 fe42 	bl	8009214 <HAL_SUBGHZ_CADStatusCallback>
 8003590:	e003      	b.n	800359a <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8003592:	2100      	movs	r1, #0
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f005 fe3d 	bl	8009214 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800359a:	89fb      	ldrh	r3, [r7, #14]
 800359c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d002      	beq.n	80035aa <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f005 fe53 	bl	8009250 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f005 fe93 	bl	80092e0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <SUBGHZSPI_Init+0x3c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003600 <SUBGHZSPI_Init+0x3c>)
 80035d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035d6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80035d8:	4a09      	ldr	r2, [pc, #36]	@ (8003600 <SUBGHZSPI_Init+0x3c>)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80035e0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80035e2:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <SUBGHZSPI_Init+0x3c>)
 80035e4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80035e8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80035ea:	4b05      	ldr	r3, [pc, #20]	@ (8003600 <SUBGHZSPI_Init+0x3c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <SUBGHZSPI_Init+0x3c>)
 80035f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035f4:	6013      	str	r3, [r2, #0]
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	58010000 	.word	0x58010000

08003604 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003614:	4b23      	ldr	r3, [pc, #140]	@ (80036a4 <SUBGHZSPI_Transmit+0xa0>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	0cdb      	lsrs	r3, r3, #19
 8003622:	2264      	movs	r2, #100	@ 0x64
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	609a      	str	r2, [r3, #8]
      break;
 800363a:	e008      	b.n	800364e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3b01      	subs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8003642:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <SUBGHZSPI_Transmit+0xa4>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d1ed      	bne.n	800362a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800364e:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <SUBGHZSPI_Transmit+0xa8>)
 8003650:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003658:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <SUBGHZSPI_Transmit+0xa0>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	0cdb      	lsrs	r3, r3, #19
 8003666:	2264      	movs	r2, #100	@ 0x64
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	609a      	str	r2, [r3, #8]
      break;
 800367e:	e008      	b.n	8003692 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3b01      	subs	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003686:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <SUBGHZSPI_Transmit+0xa4>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d1ed      	bne.n	800366e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <SUBGHZSPI_Transmit+0xa4>)
 8003694:	68db      	ldr	r3, [r3, #12]

  return status;
 8003696:	7dfb      	ldrb	r3, [r7, #23]
}
 8003698:	4618      	mov	r0, r3
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000004 	.word	0x20000004
 80036a8:	58010000 	.word	0x58010000
 80036ac:	5801000c 	.word	0x5801000c

080036b0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80036be:	4b25      	ldr	r3, [pc, #148]	@ (8003754 <SUBGHZSPI_Receive+0xa4>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	0cdb      	lsrs	r3, r3, #19
 80036cc:	2264      	movs	r2, #100	@ 0x64
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e008      	b.n	80036f8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80036ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <SUBGHZSPI_Receive+0xa8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d1ed      	bne.n	80036d4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80036f8:	4b18      	ldr	r3, [pc, #96]	@ (800375c <SUBGHZSPI_Receive+0xac>)
 80036fa:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	22ff      	movs	r2, #255	@ 0xff
 8003700:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8003702:	4b14      	ldr	r3, [pc, #80]	@ (8003754 <SUBGHZSPI_Receive+0xa4>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	0cdb      	lsrs	r3, r3, #19
 8003710:	2264      	movs	r2, #100	@ 0x64
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	609a      	str	r2, [r3, #8]
      break;
 8003728:	e008      	b.n	800373c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3b01      	subs	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8003730:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <SUBGHZSPI_Receive+0xa8>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d1ed      	bne.n	8003718 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800373c:	4b06      	ldr	r3, [pc, #24]	@ (8003758 <SUBGHZSPI_Receive+0xa8>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	b2da      	uxtb	r2, r3
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	701a      	strb	r2, [r3, #0]

  return status;
 8003746:	7dfb      	ldrb	r3, [r7, #23]
}
 8003748:	4618      	mov	r0, r3
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000004 	.word	0x20000004
 8003758:	58010000 	.word	0x58010000
 800375c:	5801000c 	.word	0x5801000c

08003760 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	791b      	ldrb	r3, [r3, #4]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d111      	bne.n	8003794 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8003770:	4b0c      	ldr	r3, [pc, #48]	@ (80037a4 <SUBGHZ_CheckDeviceReady+0x44>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8003780:	f7ff fbaa 	bl	8002ed8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3b01      	subs	r3, #1
 8003788:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1f9      	bne.n	8003784 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8003790:	f7ff fb92 	bl	8002eb8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f807 	bl	80037a8 <SUBGHZ_WaitOnBusy>
 800379a:	4603      	mov	r3, r0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000004 	.word	0x20000004

080037a8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <SUBGHZ_WaitOnBusy+0x58>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	0d1b      	lsrs	r3, r3, #20
 80037c2:	2264      	movs	r2, #100	@ 0x64
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80037ca:	f7ff fbb3 	bl	8002f34 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80037ce:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	609a      	str	r2, [r3, #8]
      break;
 80037e0:	e009      	b.n	80037f6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80037e8:	f7ff fb92 	bl	8002f10 <LL_PWR_IsActiveFlag_RFBUSYS>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d0e9      	beq.n	80037ca <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80037f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000004 	.word	0x20000004

08003804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e049      	b.n	80038aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd fa96 	bl	8000d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 fa90 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e02e      	b.n	800392a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a16      	ldr	r2, [pc, #88]	@ (8003934 <HAL_TIM_Base_Start+0x80>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <HAL_TIM_Base_Start+0x34>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e6:	d115      	bne.n	8003914 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_TIM_Base_Start+0x84>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b06      	cmp	r3, #6
 80038f8:	d015      	beq.n	8003926 <HAL_TIM_Base_Start+0x72>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003900:	d011      	beq.n	8003926 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003912:	e008      	b.n	8003926 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e000      	b.n	8003928 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	40012c00 	.word	0x40012c00
 8003938:	00010007 	.word	0x00010007

0800393c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b02      	cmp	r3, #2
 8003950:	d122      	bne.n	8003998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b02      	cmp	r3, #2
 800395e:	d11b      	bne.n	8003998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0202 	mvn.w	r2, #2
 8003968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f9d6 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003984:	e005      	b.n	8003992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f9c9 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f9d8 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d122      	bne.n	80039ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d11b      	bne.n	80039ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0204 	mvn.w	r2, #4
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9ac 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f99f 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f9ae 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d122      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d11b      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0208 	mvn.w	r2, #8
 8003a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2204      	movs	r2, #4
 8003a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f982 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f975 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f984 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b10      	cmp	r3, #16
 8003a4c:	d122      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d11b      	bne.n	8003a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0210 	mvn.w	r2, #16
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2208      	movs	r2, #8
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f958 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f94b 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f95a 	bl	8003d42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d107      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0201 	mvn.w	r2, #1
 8003ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f926 	bl	8003d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b80      	cmp	r3, #128	@ 0x80
 8003acc:	d10e      	bne.n	8003aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad8:	2b80      	cmp	r3, #128	@ 0x80
 8003ada:	d107      	bne.n	8003aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa9f 	bl	800402a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afa:	d10e      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d107      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fa91 	bl	800403c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d10e      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d107      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f907 	bl	8003d54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d10e      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d107      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0220 	mvn.w	r2, #32
 8003b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fa53 	bl	8004018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_ConfigClockSource+0x1c>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0b6      	b.n	8003d04 <HAL_TIM_ConfigClockSource+0x18a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003bb4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003bb8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003bc0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bd2:	d03e      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0xd8>
 8003bd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bd8:	f200 8087 	bhi.w	8003cea <HAL_TIM_ConfigClockSource+0x170>
 8003bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be0:	f000 8086 	beq.w	8003cf0 <HAL_TIM_ConfigClockSource+0x176>
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be8:	d87f      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x170>
 8003bea:	2b70      	cmp	r3, #112	@ 0x70
 8003bec:	d01a      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0xaa>
 8003bee:	2b70      	cmp	r3, #112	@ 0x70
 8003bf0:	d87b      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x170>
 8003bf2:	2b60      	cmp	r3, #96	@ 0x60
 8003bf4:	d050      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x11e>
 8003bf6:	2b60      	cmp	r3, #96	@ 0x60
 8003bf8:	d877      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x170>
 8003bfa:	2b50      	cmp	r3, #80	@ 0x50
 8003bfc:	d03c      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0xfe>
 8003bfe:	2b50      	cmp	r3, #80	@ 0x50
 8003c00:	d873      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x170>
 8003c02:	2b40      	cmp	r3, #64	@ 0x40
 8003c04:	d058      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x13e>
 8003c06:	2b40      	cmp	r3, #64	@ 0x40
 8003c08:	d86f      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x170>
 8003c0a:	2b30      	cmp	r3, #48	@ 0x30
 8003c0c:	d064      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x15e>
 8003c0e:	2b30      	cmp	r3, #48	@ 0x30
 8003c10:	d86b      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x170>
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d060      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x15e>
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d867      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x170>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d05c      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x15e>
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d05a      	beq.n	8003cd8 <HAL_TIM_ConfigClockSource+0x15e>
 8003c22:	e062      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	f000 f973 	bl	8003f1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	609a      	str	r2, [r3, #8]
      break;
 8003c50:	e04f      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c62:	f000 f95c 	bl	8003f1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c74:	609a      	str	r2, [r3, #8]
      break;
 8003c76:	e03c      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c84:	461a      	mov	r2, r3
 8003c86:	f000 f8d1 	bl	8003e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2150      	movs	r1, #80	@ 0x50
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f928 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003c96:	e02c      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f000 f8ef 	bl	8003e88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2160      	movs	r1, #96	@ 0x60
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f918 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e01c      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f000 f8b1 	bl	8003e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2140      	movs	r1, #64	@ 0x40
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f908 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003cd6:	e00c      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 f8ff 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003ce8:	e003      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
      break;
 8003cee:	e000      	b.n	8003cf2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003cf0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bc80      	pop	{r7}
 8003d64:	4770      	bx	lr
	...

08003d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <TIM_Base_SetConfig+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x20>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d86:	d108      	bne.n	8003d9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a20      	ldr	r2, [pc, #128]	@ (8003e20 <TIM_Base_SetConfig+0xb8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0x52>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0x52>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	@ (8003e24 <TIM_Base_SetConfig+0xbc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0x52>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e28 <TIM_Base_SetConfig+0xc0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a0b      	ldr	r2, [pc, #44]	@ (8003e20 <TIM_Base_SetConfig+0xb8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d007      	beq.n	8003e08 <TIM_Base_SetConfig+0xa0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003e24 <TIM_Base_SetConfig+0xbc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d003      	beq.n	8003e08 <TIM_Base_SetConfig+0xa0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a09      	ldr	r2, [pc, #36]	@ (8003e28 <TIM_Base_SetConfig+0xc0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d103      	bne.n	8003e10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	615a      	str	r2, [r3, #20]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40014400 	.word	0x40014400
 8003e28:	40014800 	.word	0x40014800

08003e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f023 030a 	bic.w	r3, r3, #10
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	621a      	str	r2, [r3, #32]
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f023 0210 	bic.w	r2, r3, #16
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	031b      	lsls	r3, r3, #12
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ec4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f043 0307 	orr.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b087      	sub	sp, #28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	021a      	lsls	r2, r3, #8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	609a      	str	r2, [r3, #8]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e04a      	b.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1e      	ldr	r2, [pc, #120]	@ (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fa4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a11      	ldr	r2, [pc, #68]	@ (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	40012c00 	.word	0x40012c00

08004018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr

0800402a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	bc80      	pop	{r7}
 800403a:	4770      	bx	lr

0800403c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <LL_RCC_GetUSARTClockSource>:
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	401a      	ands	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	4313      	orrs	r3, r2
}
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <LL_RCC_GetLPUARTClockSource>:
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4013      	ands	r3, r2
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e042      	b.n	8004128 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d106      	bne.n	80040ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7fc fe75 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2224      	movs	r2, #36	@ 0x24
 80040be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 fc40 	bl	8004958 <UART_SetConfig>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e022      	b.n	8004128 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fea8 	bl	8004e40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800410e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 ff2e 	bl	8004f82 <UART_CheckIdleState>
 8004126:	4603      	mov	r3, r0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	@ 0x28
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004146:	2b20      	cmp	r3, #32
 8004148:	d173      	bne.n	8004232 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_Transmit+0x26>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e06c      	b.n	8004234 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2221      	movs	r2, #33	@ 0x21
 8004166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800416a:	f7fc feb9 	bl	8000ee0 <HAL_GetTick>
 800416e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004188:	d108      	bne.n	800419c <HAL_UART_Transmit+0x6c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	61bb      	str	r3, [r7, #24]
 800419a:	e003      	b.n	80041a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041a4:	e02c      	b.n	8004200 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2180      	movs	r1, #128	@ 0x80
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 ff34 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e039      	b.n	8004234 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	3302      	adds	r3, #2
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e007      	b.n	80041ee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3301      	adds	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1cc      	bne.n	80041a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2200      	movs	r2, #0
 8004214:	2140      	movs	r1, #64	@ 0x40
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 ff01 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e006      	b.n	8004234 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	e000      	b.n	8004234 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004232:	2302      	movs	r3, #2
  }
}
 8004234:	4618      	mov	r0, r3
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	@ 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004250:	2b20      	cmp	r3, #32
 8004252:	d137      	bne.n	80042c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <HAL_UART_Receive_IT+0x24>
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e030      	b.n	80042c6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a18      	ldr	r2, [pc, #96]	@ (80042d0 <HAL_UART_Receive_IT+0x94>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d01f      	beq.n	80042b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d018      	beq.n	80042b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	e853 3f00 	ldrex	r3, [r3]
 800428e:	613b      	str	r3, [r7, #16]
   return(result);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	69f9      	ldr	r1, [r7, #28]
 80042a6:	6a3a      	ldr	r2, [r7, #32]
 80042a8:	e841 2300 	strex	r3, r2, [r1]
 80042ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1e6      	bne.n	8004282 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	461a      	mov	r2, r3
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 ff78 	bl	80051b0 <UART_Start_Receive_IT>
 80042c0:	4603      	mov	r3, r0
 80042c2:	e000      	b.n	80042c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3728      	adds	r7, #40	@ 0x28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40008000 	.word	0x40008000

080042d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0ba      	sub	sp, #232	@ 0xe8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004302:	4013      	ands	r3, r2
 8004304:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d11b      	bne.n	8004348 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d015      	beq.n	8004348 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800432c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 82e3 	beq.w	8004904 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
      }
      return;
 8004346:	e2dd      	b.n	8004904 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8123 	beq.w	8004598 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004352:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004356:	4b8d      	ldr	r3, [pc, #564]	@ (800458c <HAL_UART_IRQHandler+0x2b8>)
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800435e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004362:	4b8b      	ldr	r3, [pc, #556]	@ (8004590 <HAL_UART_IRQHandler+0x2bc>)
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8116 	beq.w	8004598 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800436c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d011      	beq.n	800439c <HAL_UART_IRQHandler+0xc8>
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2201      	movs	r2, #1
 800438a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004392:	f043 0201 	orr.w	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d011      	beq.n	80043cc <HAL_UART_IRQHandler+0xf8>
 80043a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2202      	movs	r2, #2
 80043ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d011      	beq.n	80043fc <HAL_UART_IRQHandler+0x128>
 80043d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2204      	movs	r2, #4
 80043ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f2:	f043 0202 	orr.w	r2, r3, #2
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d017      	beq.n	8004438 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d105      	bne.n	8004420 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004414:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004418:	4b5c      	ldr	r3, [pc, #368]	@ (800458c <HAL_UART_IRQHandler+0x2b8>)
 800441a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2208      	movs	r2, #8
 8004426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442e:	f043 0208 	orr.w	r2, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800443c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004440:	2b00      	cmp	r3, #0
 8004442:	d012      	beq.n	800446a <HAL_UART_IRQHandler+0x196>
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004448:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8249 	beq.w	8004908 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d013      	beq.n	80044aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800448e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044be:	2b40      	cmp	r3, #64	@ 0x40
 80044c0:	d005      	beq.n	80044ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d054      	beq.n	8004578 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 ff8e 	bl	80053f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044de:	2b40      	cmp	r3, #64	@ 0x40
 80044e0:	d146      	bne.n	8004570 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004500:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800450e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800451a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1d9      	bne.n	80044e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d017      	beq.n	8004568 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800453e:	4a15      	ldr	r2, [pc, #84]	@ (8004594 <HAL_UART_IRQHandler+0x2c0>)
 8004540:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004548:	4618      	mov	r0, r3
 800454a:	f7fc ff9c 	bl	8001486 <HAL_DMA_Abort_IT>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d019      	beq.n	8004588 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800455a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004562:	4610      	mov	r0, r2
 8004564:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004566:	e00f      	b.n	8004588 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f9e0 	bl	800492e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456e:	e00b      	b.n	8004588 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f9dc 	bl	800492e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004576:	e007      	b.n	8004588 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9d8 	bl	800492e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004586:	e1bf      	b.n	8004908 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	bf00      	nop
    return;
 800458a:	e1bd      	b.n	8004908 <HAL_UART_IRQHandler+0x634>
 800458c:	10000001 	.word	0x10000001
 8004590:	04000120 	.word	0x04000120
 8004594:	080054bb 	.word	0x080054bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800459c:	2b01      	cmp	r3, #1
 800459e:	f040 8153 	bne.w	8004848 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 814c 	beq.w	8004848 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8145 	beq.w	8004848 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2210      	movs	r2, #16
 80045c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d0:	2b40      	cmp	r3, #64	@ 0x40
 80045d2:	f040 80bb 	bne.w	800474c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 818f 	beq.w	800490c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045f8:	429a      	cmp	r2, r3
 80045fa:	f080 8187 	bcs.w	800490c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004604:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 8087 	bne.w	800472a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004646:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800464a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004652:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800465e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1da      	bne.n	800461c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800468a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800468e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004692:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800469c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e1      	bne.n	8004666 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3308      	adds	r3, #8
 80046a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3308      	adds	r3, #8
 80046c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e3      	bne.n	80046a2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046f8:	f023 0310 	bic.w	r3, r3, #16
 80046fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800470a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800470c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004710:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e4      	bne.n	80046e8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004724:	4618      	mov	r0, r3
 8004726:	f7fc fe50 	bl	80013ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800473c:	b29b      	uxth	r3, r3
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	b29b      	uxth	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f8fb 	bl	8004940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800474a:	e0df      	b.n	800490c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004758:	b29b      	uxth	r3, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80d1 	beq.w	8004910 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800476e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 80cc 	beq.w	8004910 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800478c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800479a:	647b      	str	r3, [r7, #68]	@ 0x44
 800479c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e4      	bne.n	8004778 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3308      	adds	r3, #8
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	623b      	str	r3, [r7, #32]
   return(result);
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80047d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1e1      	bne.n	80047ae <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	60fb      	str	r3, [r7, #12]
   return(result);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0310 	bic.w	r3, r3, #16
 8004812:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	69b9      	ldr	r1, [r7, #24]
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	617b      	str	r3, [r7, #20]
   return(result);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e4      	bne.n	80047fe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800483a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f87d 	bl	8004940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004846:	e063      	b.n	8004910 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <HAL_UART_IRQHandler+0x59e>
 8004854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004858:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f001 fb82 	bl	8005f74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004870:	e051      	b.n	8004916 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487a:	2b00      	cmp	r3, #0
 800487c:	d014      	beq.n	80048a8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800487e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800488a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800488e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800489a:	2b00      	cmp	r3, #0
 800489c:	d03a      	beq.n	8004914 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
    }
    return;
 80048a6:	e035      	b.n	8004914 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <HAL_UART_IRQHandler+0x5f4>
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fe10 	bl	80054e6 <UART_EndTransmit_IT>
    return;
 80048c6:	e026      	b.n	8004916 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d009      	beq.n	80048e8 <HAL_UART_IRQHandler+0x614>
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 fb59 	bl	8005f98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048e6:	e016      	b.n	8004916 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d010      	beq.n	8004916 <HAL_UART_IRQHandler+0x642>
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	da0c      	bge.n	8004916 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f001 fb42 	bl	8005f86 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004902:	e008      	b.n	8004916 <HAL_UART_IRQHandler+0x642>
      return;
 8004904:	bf00      	nop
 8004906:	e006      	b.n	8004916 <HAL_UART_IRQHandler+0x642>
    return;
 8004908:	bf00      	nop
 800490a:	e004      	b.n	8004916 <HAL_UART_IRQHandler+0x642>
      return;
 800490c:	bf00      	nop
 800490e:	e002      	b.n	8004916 <HAL_UART_IRQHandler+0x642>
      return;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <HAL_UART_IRQHandler+0x642>
    return;
 8004914:	bf00      	nop
  }
}
 8004916:	37e8      	adds	r7, #232	@ 0xe8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr

0800492e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr

08004940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
	...

08004958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495c:	b08c      	sub	sp, #48	@ 0x30
 800495e:	af00      	add	r7, sp, #0
 8004960:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	431a      	orrs	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	431a      	orrs	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4313      	orrs	r3, r2
 800497e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b94      	ldr	r3, [pc, #592]	@ (8004bd8 <UART_SetConfig+0x280>)
 8004988:	4013      	ands	r3, r2
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004990:	430b      	orrs	r3, r1
 8004992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a89      	ldr	r2, [pc, #548]	@ (8004bdc <UART_SetConfig+0x284>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049c0:	4313      	orrs	r3, r2
 80049c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80049ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049d8:	430b      	orrs	r3, r1
 80049da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	f023 010f 	bic.w	r1, r3, #15
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a7a      	ldr	r2, [pc, #488]	@ (8004be0 <UART_SetConfig+0x288>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d127      	bne.n	8004a4c <UART_SetConfig+0xf4>
 80049fc:	2003      	movs	r0, #3
 80049fe:	f7ff fb26 	bl	800404e <LL_RCC_GetUSARTClockSource>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d81b      	bhi.n	8004a44 <UART_SetConfig+0xec>
 8004a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <UART_SetConfig+0xbc>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a25 	.word	0x08004a25
 8004a18:	08004a35 	.word	0x08004a35
 8004a1c:	08004a2d 	.word	0x08004a2d
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a2a:	e080      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a32:	e07c      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004a34:	2304      	movs	r3, #4
 8004a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a3a:	e078      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a42:	e074      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004a44:	2310      	movs	r3, #16
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a4a:	e070      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a64      	ldr	r2, [pc, #400]	@ (8004be4 <UART_SetConfig+0x28c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d138      	bne.n	8004ac8 <UART_SetConfig+0x170>
 8004a56:	200c      	movs	r0, #12
 8004a58:	f7ff faf9 	bl	800404e <LL_RCC_GetUSARTClockSource>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004a62:	2b0c      	cmp	r3, #12
 8004a64:	d82c      	bhi.n	8004ac0 <UART_SetConfig+0x168>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <UART_SetConfig+0x114>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004aa1 	.word	0x08004aa1
 8004a70:	08004ac1 	.word	0x08004ac1
 8004a74:	08004ac1 	.word	0x08004ac1
 8004a78:	08004ac1 	.word	0x08004ac1
 8004a7c:	08004ab1 	.word	0x08004ab1
 8004a80:	08004ac1 	.word	0x08004ac1
 8004a84:	08004ac1 	.word	0x08004ac1
 8004a88:	08004ac1 	.word	0x08004ac1
 8004a8c:	08004aa9 	.word	0x08004aa9
 8004a90:	08004ac1 	.word	0x08004ac1
 8004a94:	08004ac1 	.word	0x08004ac1
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ab9 	.word	0x08004ab9
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa6:	e042      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aae:	e03e      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ab6:	e03a      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004abe:	e036      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004ac0:	2310      	movs	r3, #16
 8004ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ac6:	e032      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a43      	ldr	r2, [pc, #268]	@ (8004bdc <UART_SetConfig+0x284>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d12a      	bne.n	8004b28 <UART_SetConfig+0x1d0>
 8004ad2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004ad6:	f7ff facc 	bl	8004072 <LL_RCC_GetLPUARTClockSource>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ae0:	d01a      	beq.n	8004b18 <UART_SetConfig+0x1c0>
 8004ae2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ae6:	d81b      	bhi.n	8004b20 <UART_SetConfig+0x1c8>
 8004ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aec:	d00c      	beq.n	8004b08 <UART_SetConfig+0x1b0>
 8004aee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af2:	d815      	bhi.n	8004b20 <UART_SetConfig+0x1c8>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <UART_SetConfig+0x1a8>
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afc:	d008      	beq.n	8004b10 <UART_SetConfig+0x1b8>
 8004afe:	e00f      	b.n	8004b20 <UART_SetConfig+0x1c8>
 8004b00:	2300      	movs	r3, #0
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b06:	e012      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004b08:	2302      	movs	r3, #2
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b0e:	e00e      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004b10:	2304      	movs	r3, #4
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b16:	e00a      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004b18:	2308      	movs	r3, #8
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b1e:	e006      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004b20:	2310      	movs	r3, #16
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b26:	e002      	b.n	8004b2e <UART_SetConfig+0x1d6>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2a      	ldr	r2, [pc, #168]	@ (8004bdc <UART_SetConfig+0x284>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	f040 80a4 	bne.w	8004c82 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d823      	bhi.n	8004b8a <UART_SetConfig+0x232>
 8004b42:	a201      	add	r2, pc, #4	@ (adr r2, 8004b48 <UART_SetConfig+0x1f0>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b8b 	.word	0x08004b8b
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004b7b 	.word	0x08004b7b
 8004b5c:	08004b8b 	.word	0x08004b8b
 8004b60:	08004b8b 	.word	0x08004b8b
 8004b64:	08004b8b 	.word	0x08004b8b
 8004b68:	08004b83 	.word	0x08004b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6c:	f7fd feac 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8004b70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b72:	e010      	b.n	8004b96 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b74:	4b1c      	ldr	r3, [pc, #112]	@ (8004be8 <UART_SetConfig+0x290>)
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b78:	e00d      	b.n	8004b96 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fd fdf1 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8004b7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b80:	e009      	b.n	8004b96 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b88:	e005      	b.n	8004b96 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8137 	beq.w	8004e0c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	4a12      	ldr	r2, [pc, #72]	@ (8004bec <UART_SetConfig+0x294>)
 8004ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4413      	add	r3, r2
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d305      	bcc.n	8004bce <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d910      	bls.n	8004bf0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bd4:	e11a      	b.n	8004e0c <UART_SetConfig+0x4b4>
 8004bd6:	bf00      	nop
 8004bd8:	cfff69f3 	.word	0xcfff69f3
 8004bdc:	40008000 	.word	0x40008000
 8004be0:	40013800 	.word	0x40013800
 8004be4:	40004400 	.word	0x40004400
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	0800a774 	.word	0x0800a774
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	60fa      	str	r2, [r7, #12]
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	4a8e      	ldr	r2, [pc, #568]	@ (8004e38 <UART_SetConfig+0x4e0>)
 8004bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2200      	movs	r2, #0
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c12:	f7fb fb05 	bl	8000220 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	020b      	lsls	r3, r1, #8
 8004c28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c2c:	0202      	lsls	r2, r0, #8
 8004c2e:	6979      	ldr	r1, [r7, #20]
 8004c30:	6849      	ldr	r1, [r1, #4]
 8004c32:	0849      	lsrs	r1, r1, #1
 8004c34:	2000      	movs	r0, #0
 8004c36:	460c      	mov	r4, r1
 8004c38:	4605      	mov	r5, r0
 8004c3a:	eb12 0804 	adds.w	r8, r2, r4
 8004c3e:	eb43 0905 	adc.w	r9, r3, r5
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	469a      	mov	sl, r3
 8004c4a:	4693      	mov	fp, r2
 8004c4c:	4652      	mov	r2, sl
 8004c4e:	465b      	mov	r3, fp
 8004c50:	4640      	mov	r0, r8
 8004c52:	4649      	mov	r1, r9
 8004c54:	f7fb fae4 	bl	8000220 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c66:	d308      	bcc.n	8004c7a <UART_SetConfig+0x322>
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c6e:	d204      	bcs.n	8004c7a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e0c8      	b.n	8004e0c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c80:	e0c4      	b.n	8004e0c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c8a:	d167      	bne.n	8004d5c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d828      	bhi.n	8004ce6 <UART_SetConfig+0x38e>
 8004c94:	a201      	add	r2, pc, #4	@ (adr r2, 8004c9c <UART_SetConfig+0x344>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cc9 	.word	0x08004cc9
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004ce7 	.word	0x08004ce7
 8004cac:	08004cd7 	.word	0x08004cd7
 8004cb0:	08004ce7 	.word	0x08004ce7
 8004cb4:	08004ce7 	.word	0x08004ce7
 8004cb8:	08004ce7 	.word	0x08004ce7
 8004cbc:	08004cdf 	.word	0x08004cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fd fe02 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8004cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cc6:	e014      	b.n	8004cf2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc8:	f7fd fe10 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8004ccc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cce:	e010      	b.n	8004cf2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e3c <UART_SetConfig+0x4e4>)
 8004cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cd4:	e00d      	b.n	8004cf2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd6:	f7fd fd43 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8004cda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cdc:	e009      	b.n	8004cf2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ce4:	e005      	b.n	8004cf2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8089 	beq.w	8004e0c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	4a4e      	ldr	r2, [pc, #312]	@ (8004e38 <UART_SetConfig+0x4e0>)
 8004d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d04:	461a      	mov	r2, r3
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d0c:	005a      	lsls	r2, r3, #1
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	441a      	add	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	2b0f      	cmp	r3, #15
 8004d24:	d916      	bls.n	8004d54 <UART_SetConfig+0x3fc>
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d2c:	d212      	bcs.n	8004d54 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	f023 030f 	bic.w	r3, r3, #15
 8004d36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	8bfb      	ldrh	r3, [r7, #30]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	8bfa      	ldrh	r2, [r7, #30]
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	e05b      	b.n	8004e0c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d5a:	e057      	b.n	8004e0c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d828      	bhi.n	8004db6 <UART_SetConfig+0x45e>
 8004d64:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <UART_SetConfig+0x414>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004d91 	.word	0x08004d91
 8004d70:	08004d99 	.word	0x08004d99
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	08004db7 	.word	0x08004db7
 8004d7c:	08004da7 	.word	0x08004da7
 8004d80:	08004db7 	.word	0x08004db7
 8004d84:	08004db7 	.word	0x08004db7
 8004d88:	08004db7 	.word	0x08004db7
 8004d8c:	08004daf 	.word	0x08004daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d90:	f7fd fd9a 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8004d94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d96:	e014      	b.n	8004dc2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d98:	f7fd fda8 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d9e:	e010      	b.n	8004dc2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da0:	4b26      	ldr	r3, [pc, #152]	@ (8004e3c <UART_SetConfig+0x4e4>)
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004da4:	e00d      	b.n	8004dc2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da6:	f7fd fcdb 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8004daa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004dac:	e009      	b.n	8004dc2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004db4:	e005      	b.n	8004dc2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004dc0:	bf00      	nop
    }

    if (pclk != 0U)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d021      	beq.n	8004e0c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e38 <UART_SetConfig+0x4e0>)
 8004dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	441a      	add	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	2b0f      	cmp	r3, #15
 8004df0:	d909      	bls.n	8004e06 <UART_SetConfig+0x4ae>
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df8:	d205      	bcs.n	8004e06 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60da      	str	r2, [r3, #12]
 8004e04:	e002      	b.n	8004e0c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	2200      	movs	r2, #0
 8004e26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3730      	adds	r7, #48	@ 0x30
 8004e30:	46bd      	mov	sp, r7
 8004e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e36:	bf00      	nop
 8004e38:	0800a774 	.word	0x0800a774
 8004e3c:	00f42400 	.word	0x00f42400

08004e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01a      	beq.n	8004f56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f3e:	d10a      	bne.n	8004f56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
  }
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af02      	add	r7, sp, #8
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f92:	f7fb ffa5 	bl	8000ee0 <HAL_GetTick>
 8004f96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b08      	cmp	r3, #8
 8004fa4:	d10e      	bne.n	8004fc4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f832 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e028      	b.n	8005016 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d10e      	bne.n	8004ff0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f81c 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e012      	b.n	8005016 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b09c      	sub	sp, #112	@ 0x70
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	e0a9      	b.n	8005184 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005030:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	f000 80a5 	beq.w	8005184 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fb ff51 	bl	8000ee0 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <UART_WaitOnFlagUntilTimeout+0x32>
 800504a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800504c:	2b00      	cmp	r3, #0
 800504e:	d140      	bne.n	80050d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800505e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005060:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005064:	667b      	str	r3, [r7, #100]	@ 0x64
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800506e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005070:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005074:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800507c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	663b      	str	r3, [r7, #96]	@ 0x60
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050a2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80050a4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80050b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e069      	b.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d051      	beq.n	8005184 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ee:	d149      	bne.n	8005184 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800510e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005118:	637b      	str	r3, [r7, #52]	@ 0x34
 800511a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800511e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e6      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	613b      	str	r3, [r7, #16]
   return(result);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800514c:	623a      	str	r2, [r7, #32]
 800514e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	6a3a      	ldr	r2, [r7, #32]
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	61bb      	str	r3, [r7, #24]
   return(result);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e010      	b.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69da      	ldr	r2, [r3, #28]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	4013      	ands	r3, r2
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	429a      	cmp	r2, r3
 8005192:	bf0c      	ite	eq
 8005194:	2301      	moveq	r3, #1
 8005196:	2300      	movne	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	461a      	mov	r2, r3
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	429a      	cmp	r2, r3
 80051a0:	f43f af46 	beq.w	8005030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3770      	adds	r7, #112	@ 0x70
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b0a3      	sub	sp, #140	@ 0x8c
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e2:	d10e      	bne.n	8005202 <UART_Start_Receive_IT+0x52>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d105      	bne.n	80051f8 <UART_Start_Receive_IT+0x48>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80051f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80051f6:	e02d      	b.n	8005254 <UART_Start_Receive_IT+0xa4>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	22ff      	movs	r2, #255	@ 0xff
 80051fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005200:	e028      	b.n	8005254 <UART_Start_Receive_IT+0xa4>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10d      	bne.n	8005226 <UART_Start_Receive_IT+0x76>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d104      	bne.n	800521c <UART_Start_Receive_IT+0x6c>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	22ff      	movs	r2, #255	@ 0xff
 8005216:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800521a:	e01b      	b.n	8005254 <UART_Start_Receive_IT+0xa4>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	227f      	movs	r2, #127	@ 0x7f
 8005220:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005224:	e016      	b.n	8005254 <UART_Start_Receive_IT+0xa4>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522e:	d10d      	bne.n	800524c <UART_Start_Receive_IT+0x9c>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d104      	bne.n	8005242 <UART_Start_Receive_IT+0x92>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	227f      	movs	r2, #127	@ 0x7f
 800523c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005240:	e008      	b.n	8005254 <UART_Start_Receive_IT+0xa4>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	223f      	movs	r2, #63	@ 0x3f
 8005246:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800524a:	e003      	b.n	8005254 <UART_Start_Receive_IT+0xa4>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2222      	movs	r2, #34	@ 0x22
 8005260:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3308      	adds	r3, #8
 800526a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005288:	673a      	str	r2, [r7, #112]	@ 0x70
 800528a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800528e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8005296:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e3      	bne.n	8005264 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052a4:	d14f      	bne.n	8005346 <UART_Start_Receive_IT+0x196>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80052ac:	88fa      	ldrh	r2, [r7, #6]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d349      	bcc.n	8005346 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ba:	d107      	bne.n	80052cc <UART_Start_Receive_IT+0x11c>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4a46      	ldr	r2, [pc, #280]	@ (80053e0 <UART_Start_Receive_IT+0x230>)
 80052c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80052ca:	e002      	b.n	80052d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a45      	ldr	r2, [pc, #276]	@ (80053e4 <UART_Start_Receive_IT+0x234>)
 80052d0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01a      	beq.n	8005310 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052fe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005302:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800530a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e4      	bne.n	80052da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005326:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005330:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005332:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005336:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800533e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <UART_Start_Receive_IT+0x160>
 8005344:	e046      	b.n	80053d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534e:	d107      	bne.n	8005360 <UART_Start_Receive_IT+0x1b0>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d103      	bne.n	8005360 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4a23      	ldr	r2, [pc, #140]	@ (80053e8 <UART_Start_Receive_IT+0x238>)
 800535c:	675a      	str	r2, [r3, #116]	@ 0x74
 800535e:	e002      	b.n	8005366 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a22      	ldr	r2, [pc, #136]	@ (80053ec <UART_Start_Receive_IT+0x23c>)
 8005364:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d019      	beq.n	80053a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005382:	677b      	str	r3, [r7, #116]	@ 0x74
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
 800538e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800539a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e6      	bne.n	800536e <UART_Start_Receive_IT+0x1be>
 80053a0:	e018      	b.n	80053d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	613b      	str	r3, [r7, #16]
   return(result);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f043 0320 	orr.w	r3, r3, #32
 80053b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	69f9      	ldr	r1, [r7, #28]
 80053c6:	6a3a      	ldr	r2, [r7, #32]
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e6      	bne.n	80053a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	378c      	adds	r7, #140	@ 0x8c
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr
 80053e0:	08005c0d 	.word	0x08005c0d
 80053e4:	080058ad 	.word	0x080058ad
 80053e8:	080056f5 	.word	0x080056f5
 80053ec:	0800553d 	.word	0x0800553d

080053f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b095      	sub	sp, #84	@ 0x54
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800540c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005416:	643b      	str	r3, [r7, #64]	@ 0x40
 8005418:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800541c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e6      	bne.n	80053f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	61fb      	str	r3, [r7, #28]
   return(result);
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005440:	f023 0301 	bic.w	r3, r3, #1
 8005444:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800544e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e3      	bne.n	800542a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d118      	bne.n	800549c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	e853 3f00 	ldrex	r3, [r3]
 8005476:	60bb      	str	r3, [r7, #8]
   return(result);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f023 0310 	bic.w	r3, r3, #16
 800547e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005488:	61bb      	str	r3, [r7, #24]
 800548a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	e841 2300 	strex	r3, r2, [r1]
 8005494:	613b      	str	r3, [r7, #16]
   return(result);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1e6      	bne.n	800546a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80054b0:	bf00      	nop
 80054b2:	3754      	adds	r7, #84	@ 0x54
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff fa28 	bl	800492e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b088      	sub	sp, #32
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6979      	ldr	r1, [r7, #20]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	613b      	str	r3, [r7, #16]
   return(result);
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e6      	bne.n	80054ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff f9f4 	bl	800491c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005534:	bf00      	nop
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b09c      	sub	sp, #112	@ 0x70
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800554a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005554:	2b22      	cmp	r3, #34	@ 0x22
 8005556:	f040 80be 	bne.w	80056d6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005560:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005564:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005568:	b2d9      	uxtb	r1, r3
 800556a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800556e:	b2da      	uxtb	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005574:	400a      	ands	r2, r1
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f040 80a1 	bne.w	80056e6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e6      	bne.n	80055a4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3308      	adds	r3, #8
 80055dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3308      	adds	r3, #8
 80055f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80055f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e5      	bne.n	80055d6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a33      	ldr	r2, [pc, #204]	@ (80056f0 <UART_RxISR_8BIT+0x1b4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d01f      	beq.n	8005668 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d018      	beq.n	8005668 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	623b      	str	r3, [r7, #32]
   return(result);
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800564a:	663b      	str	r3, [r7, #96]	@ 0x60
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005654:	633b      	str	r3, [r7, #48]	@ 0x30
 8005656:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800565a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e6      	bne.n	8005636 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d12e      	bne.n	80056ce <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	60fb      	str	r3, [r7, #12]
   return(result);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005694:	61fb      	str	r3, [r7, #28]
 8005696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	69b9      	ldr	r1, [r7, #24]
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	617b      	str	r3, [r7, #20]
   return(result);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e6      	bne.n	8005676 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d103      	bne.n	80056be <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2210      	movs	r2, #16
 80056bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056c4:	4619      	mov	r1, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff f93a 	bl	8004940 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056cc:	e00b      	b.n	80056e6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fa ff8a 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 80056d4:	e007      	b.n	80056e6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699a      	ldr	r2, [r3, #24]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0208 	orr.w	r2, r2, #8
 80056e4:	619a      	str	r2, [r3, #24]
}
 80056e6:	bf00      	nop
 80056e8:	3770      	adds	r7, #112	@ 0x70
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40008000 	.word	0x40008000

080056f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b09c      	sub	sp, #112	@ 0x70
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005702:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800570c:	2b22      	cmp	r3, #34	@ 0x22
 800570e:	f040 80be 	bne.w	800588e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005718:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005720:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005722:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005726:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800572a:	4013      	ands	r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005730:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005736:	1c9a      	adds	r2, r3, #2
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	f040 80a1 	bne.w	800589e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800576a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800576c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005770:	667b      	str	r3, [r7, #100]	@ 0x64
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800577a:	657b      	str	r3, [r7, #84]	@ 0x54
 800577c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005780:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e6      	bne.n	800575c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80057b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a33      	ldr	r2, [pc, #204]	@ (80058a8 <UART_RxISR_16BIT+0x1b4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d01f      	beq.n	8005820 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d018      	beq.n	8005820 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005802:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800580c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005812:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e6      	bne.n	80057ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d12e      	bne.n	8005886 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	60bb      	str	r3, [r7, #8]
   return(result);
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f023 0310 	bic.w	r3, r3, #16
 8005842:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6979      	ldr	r1, [r7, #20]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	613b      	str	r3, [r7, #16]
   return(result);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e6      	bne.n	800582e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b10      	cmp	r3, #16
 800586c:	d103      	bne.n	8005876 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2210      	movs	r2, #16
 8005874:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff f85e 	bl	8004940 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005884:	e00b      	b.n	800589e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fa feae 	bl	80005e8 <HAL_UART_RxCpltCallback>
}
 800588c:	e007      	b.n	800589e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	619a      	str	r2, [r3, #24]
}
 800589e:	bf00      	nop
 80058a0:	3770      	adds	r7, #112	@ 0x70
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40008000 	.word	0x40008000

080058ac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b0ac      	sub	sp, #176	@ 0xb0
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80058ba:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e2:	2b22      	cmp	r3, #34	@ 0x22
 80058e4:	f040 8182 	bne.w	8005bec <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80058ee:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058f2:	e125      	b.n	8005b40 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058fe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8005902:	b2d9      	uxtb	r1, r3
 8005904:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005908:	b2da      	uxtb	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800590e:	400a      	ands	r2, r1
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800593a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	2b00      	cmp	r3, #0
 8005944:	d053      	beq.n	80059ee <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2201      	movs	r2, #1
 8005964:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800596c:	f043 0201 	orr.w	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d011      	beq.n	80059a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2202      	movs	r2, #2
 8005994:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800599c:	f043 0204 	orr.w	r2, r3, #4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80059b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2204      	movs	r2, #4
 80059c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059cc:	f043 0202 	orr.w	r2, r3, #2
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fe ffa4 	bl	800492e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 80a2 	bne.w	8005b40 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a20:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a22:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005a24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005a26:	e841 2300 	strex	r3, r2, [r1]
 8005a2a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e4      	bne.n	80059fc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8005a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3308      	adds	r3, #8
 8005a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a5a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005a5c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005a60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e1      	bne.n	8005a32 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a5f      	ldr	r2, [pc, #380]	@ (8005c04 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d021      	beq.n	8005ad0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01a      	beq.n	8005ad0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005abc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005abe:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ac2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e4      	bne.n	8005a9a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d130      	bne.n	8005b3a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	f023 0310 	bic.w	r3, r3, #16
 8005af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e4      	bne.n	8005ade <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d103      	bne.n	8005b2a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2210      	movs	r2, #16
 8005b28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fe ff04 	bl	8004940 <HAL_UARTEx_RxEventCallback>
 8005b38:	e002      	b.n	8005b40 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fa fd54 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d006      	beq.n	8005b56 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f47f aecf 	bne.w	80058f4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b5c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005b60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d049      	beq.n	8005bfc <UART_RxISR_8BIT_FIFOEN+0x350>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005b6e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d242      	bcs.n	8005bfc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3308      	adds	r3, #8
 8005b96:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e3      	bne.n	8005b76 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	@ (8005c08 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005bb2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	f043 0320 	orr.w	r3, r3, #32
 8005bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	613b      	str	r3, [r7, #16]
   return(result);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e4      	bne.n	8005bb4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bea:	e007      	b.n	8005bfc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0208 	orr.w	r2, r2, #8
 8005bfa:	619a      	str	r2, [r3, #24]
}
 8005bfc:	bf00      	nop
 8005bfe:	37b0      	adds	r7, #176	@ 0xb0
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40008000 	.word	0x40008000
 8005c08:	0800553d 	.word	0x0800553d

08005c0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b0ae      	sub	sp, #184	@ 0xb8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005c1a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c42:	2b22      	cmp	r3, #34	@ 0x22
 8005c44:	f040 8186 	bne.w	8005f54 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005c4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c52:	e129      	b.n	8005ea8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005c66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005c6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005c6e:	4013      	ands	r3, r2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7c:	1c9a      	adds	r2, r3, #2
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d053      	beq.n	8005d52 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d011      	beq.n	8005cda <UART_RxISR_16BIT_FIFOEN+0xce>
 8005cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00b      	beq.n	8005cda <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd0:	f043 0201 	orr.w	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d011      	beq.n	8005d0a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005ce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d00:	f043 0204 	orr.w	r2, r3, #4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d011      	beq.n	8005d3a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00b      	beq.n	8005d3a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2204      	movs	r2, #4
 8005d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d30:	f043 0202 	orr.w	r2, r3, #2
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fe fdf2 	bl	800492e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f040 80a4 	bne.w	8005ea8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d86:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e2      	bne.n	8005d60 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e1      	bne.n	8005d9a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5f      	ldr	r2, [pc, #380]	@ (8005f6c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d021      	beq.n	8005e38 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01a      	beq.n	8005e38 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e26:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e4      	bne.n	8005e02 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d130      	bne.n	8005ea2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	e853 3f00 	ldrex	r3, [r3]
 8005e52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e56:	f023 0310 	bic.w	r3, r3, #16
 8005e5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e4      	bne.n	8005e46 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d103      	bne.n	8005e92 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2210      	movs	r2, #16
 8005e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fe fd50 	bl	8004940 <HAL_UARTEx_RxEventCallback>
 8005ea0:	e002      	b.n	8005ea8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fa fba0 	bl	80005e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ea8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d006      	beq.n	8005ebe <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f aecb 	bne.w	8005c54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ec4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ec8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d049      	beq.n	8005f64 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005ed6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d242      	bcs.n	8005f64 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	623b      	str	r3, [r7, #32]
   return(result);
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ef4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3308      	adds	r3, #8
 8005efe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005f02:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f0a:	e841 2300 	strex	r3, r2, [r1]
 8005f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1e3      	bne.n	8005ede <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a15      	ldr	r2, [pc, #84]	@ (8005f70 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005f1a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f043 0320 	orr.w	r3, r3, #32
 8005f30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	69b9      	ldr	r1, [r7, #24]
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e4      	bne.n	8005f1c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f52:	e007      	b.n	8005f64 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0208 	orr.w	r2, r2, #8
 8005f62:	619a      	str	r2, [r3, #24]
}
 8005f64:	bf00      	nop
 8005f66:	37b8      	adds	r7, #184	@ 0xb8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	40008000 	.word	0x40008000
 8005f70:	080056f5 	.word	0x080056f5

08005f74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr

08005faa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e027      	b.n	8006010 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2224      	movs	r2, #36	@ 0x24
 8005fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005fee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800602e:	2302      	movs	r3, #2
 8006030:	e02d      	b.n	800608e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2224      	movs	r2, #36	@ 0x24
 800603e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f850 	bl	8006114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e02d      	b.n	800610a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2224      	movs	r2, #36	@ 0x24
 80060ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0201 	bic.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f812 	bl	8006114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006120:	2b00      	cmp	r3, #0
 8006122:	d108      	bne.n	8006136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006134:	e031      	b.n	800619a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006136:	2308      	movs	r3, #8
 8006138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800613a:	2308      	movs	r3, #8
 800613c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	0e5b      	lsrs	r3, r3, #25
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	0f5b      	lsrs	r3, r3, #29
 8006156:	b2db      	uxtb	r3, r3
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	7b3a      	ldrb	r2, [r7, #12]
 8006162:	4910      	ldr	r1, [pc, #64]	@ (80061a4 <UARTEx_SetNbDataToProcess+0x90>)
 8006164:	5c8a      	ldrb	r2, [r1, r2]
 8006166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800616a:	7b3a      	ldrb	r2, [r7, #12]
 800616c:	490e      	ldr	r1, [pc, #56]	@ (80061a8 <UARTEx_SetNbDataToProcess+0x94>)
 800616e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006170:	fb93 f3f2 	sdiv	r3, r3, r2
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	7b7a      	ldrb	r2, [r7, #13]
 8006180:	4908      	ldr	r1, [pc, #32]	@ (80061a4 <UARTEx_SetNbDataToProcess+0x90>)
 8006182:	5c8a      	ldrb	r2, [r1, r2]
 8006184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006188:	7b7a      	ldrb	r2, [r7, #13]
 800618a:	4907      	ldr	r1, [pc, #28]	@ (80061a8 <UARTEx_SetNbDataToProcess+0x94>)
 800618c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800618e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006192:	b29a      	uxth	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800619a:	bf00      	nop
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	0800a78c 	.word	0x0800a78c
 80061a8:	0800a794 	.word	0x0800a794

080061ac <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80061b4:	4a24      	ldr	r2, [pc, #144]	@ (8006248 <RadioInit+0x9c>)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80061ba:	4b24      	ldr	r3, [pc, #144]	@ (800624c <RadioInit+0xa0>)
 80061bc:	2200      	movs	r2, #0
 80061be:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80061c0:	4b22      	ldr	r3, [pc, #136]	@ (800624c <RadioInit+0xa0>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80061c6:	4b21      	ldr	r3, [pc, #132]	@ (800624c <RadioInit+0xa0>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80061cc:	4b1f      	ldr	r3, [pc, #124]	@ (800624c <RadioInit+0xa0>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80061d2:	481f      	ldr	r0, [pc, #124]	@ (8006250 <RadioInit+0xa4>)
 80061d4:	f001 ff86 	bl	80080e4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80061d8:	4b1c      	ldr	r3, [pc, #112]	@ (800624c <RadioInit+0xa0>)
 80061da:	2200      	movs	r2, #0
 80061dc:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80061de:	4b1b      	ldr	r3, [pc, #108]	@ (800624c <RadioInit+0xa0>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80061e4:	f002 fa1a 	bl	800861c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80061e8:	2100      	movs	r1, #0
 80061ea:	2000      	movs	r0, #0
 80061ec:	f002 fde6 	bl	8008dbc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80061f0:	2204      	movs	r2, #4
 80061f2:	2100      	movs	r1, #0
 80061f4:	2001      	movs	r0, #1
 80061f6:	f002 fba3 	bl	8008940 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80061fa:	2300      	movs	r3, #0
 80061fc:	2200      	movs	r2, #0
 80061fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006202:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006206:	f002 fad3 	bl	80087b0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800620a:	f000 fe91 	bl	8006f30 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800620e:	2300      	movs	r3, #0
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <RadioInit+0xa8>)
 8006214:	2200      	movs	r2, #0
 8006216:	f04f 31ff 	mov.w	r1, #4294967295
 800621a:	480f      	ldr	r0, [pc, #60]	@ (8006258 <RadioInit+0xac>)
 800621c:	f003 fb30 	bl	8009880 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006220:	2300      	movs	r3, #0
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	4b0d      	ldr	r3, [pc, #52]	@ (800625c <RadioInit+0xb0>)
 8006226:	2200      	movs	r2, #0
 8006228:	f04f 31ff 	mov.w	r1, #4294967295
 800622c:	480c      	ldr	r0, [pc, #48]	@ (8006260 <RadioInit+0xb4>)
 800622e:	f003 fb27 	bl	8009880 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006232:	4809      	ldr	r0, [pc, #36]	@ (8006258 <RadioInit+0xac>)
 8006234:	f003 fbc8 	bl	80099c8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006238:	4809      	ldr	r0, [pc, #36]	@ (8006260 <RadioInit+0xb4>)
 800623a:	f003 fbc5 	bl	80099c8 <UTIL_TIMER_Stop>
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000364 	.word	0x20000364
 800624c:	20000368 	.word	0x20000368
 8006250:	08007325 	.word	0x08007325
 8006254:	080072ad 	.word	0x080072ad
 8006258:	200003c4 	.word	0x200003c4
 800625c:	080072c1 	.word	0x080072c1
 8006260:	200003dc 	.word	0x200003dc

08006264 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8006268:	f001 ff84 	bl	8008174 <SUBGRF_GetOperatingMode>
 800626c:	4603      	mov	r3, r0
 800626e:	2b07      	cmp	r3, #7
 8006270:	d00a      	beq.n	8006288 <RadioGetStatus+0x24>
 8006272:	2b07      	cmp	r3, #7
 8006274:	dc0a      	bgt.n	800628c <RadioGetStatus+0x28>
 8006276:	2b04      	cmp	r3, #4
 8006278:	d002      	beq.n	8006280 <RadioGetStatus+0x1c>
 800627a:	2b05      	cmp	r3, #5
 800627c:	d002      	beq.n	8006284 <RadioGetStatus+0x20>
 800627e:	e005      	b.n	800628c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8006280:	2302      	movs	r3, #2
 8006282:	e004      	b.n	800628e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006284:	2301      	movs	r3, #1
 8006286:	e002      	b.n	800628e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006288:	2303      	movs	r3, #3
 800628a:	e000      	b.n	800628e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800628c:	2300      	movs	r3, #0
    }
}
 800628e:	4618      	mov	r0, r3
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	4603      	mov	r3, r0
 800629c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800629e:	4a2a      	ldr	r2, [pc, #168]	@ (8006348 <RadioSetModem+0xb4>)
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f003 f95b 	bl	8009562 <RFW_SetRadioModem>
    switch( modem )
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	d80e      	bhi.n	80062d0 <RadioSetModem+0x3c>
 80062b2:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <RadioSetModem+0x24>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	080062df 	.word	0x080062df
 80062bc:	080062ed 	.word	0x080062ed
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	08006313 	.word	0x08006313
 80062c8:	08006321 	.word	0x08006321
 80062cc:	0800632f 	.word	0x0800632f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80062d0:	2003      	movs	r0, #3
 80062d2:	f002 fb0f 	bl	80088f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80062d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006348 <RadioSetModem+0xb4>)
 80062d8:	2200      	movs	r2, #0
 80062da:	735a      	strb	r2, [r3, #13]
        break;
 80062dc:	e02f      	b.n	800633e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80062de:	2000      	movs	r0, #0
 80062e0:	f002 fb08 	bl	80088f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80062e4:	4b18      	ldr	r3, [pc, #96]	@ (8006348 <RadioSetModem+0xb4>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	735a      	strb	r2, [r3, #13]
        break;
 80062ea:	e028      	b.n	800633e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80062ec:	2001      	movs	r0, #1
 80062ee:	f002 fb01 	bl	80088f4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80062f2:	4b15      	ldr	r3, [pc, #84]	@ (8006348 <RadioSetModem+0xb4>)
 80062f4:	7b5a      	ldrb	r2, [r3, #13]
 80062f6:	4b14      	ldr	r3, [pc, #80]	@ (8006348 <RadioSetModem+0xb4>)
 80062f8:	7b1b      	ldrb	r3, [r3, #12]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d01e      	beq.n	800633c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80062fe:	4b12      	ldr	r3, [pc, #72]	@ (8006348 <RadioSetModem+0xb4>)
 8006300:	7b1a      	ldrb	r2, [r3, #12]
 8006302:	4b11      	ldr	r3, [pc, #68]	@ (8006348 <RadioSetModem+0xb4>)
 8006304:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006306:	4b10      	ldr	r3, [pc, #64]	@ (8006348 <RadioSetModem+0xb4>)
 8006308:	7b5b      	ldrb	r3, [r3, #13]
 800630a:	4618      	mov	r0, r3
 800630c:	f000 ff98 	bl	8007240 <RadioSetPublicNetwork>
        }
        break;
 8006310:	e014      	b.n	800633c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006312:	2002      	movs	r0, #2
 8006314:	f002 faee 	bl	80088f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006318:	4b0b      	ldr	r3, [pc, #44]	@ (8006348 <RadioSetModem+0xb4>)
 800631a:	2200      	movs	r2, #0
 800631c:	735a      	strb	r2, [r3, #13]
        break;
 800631e:	e00e      	b.n	800633e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006320:	2002      	movs	r0, #2
 8006322:	f002 fae7 	bl	80088f4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006326:	4b08      	ldr	r3, [pc, #32]	@ (8006348 <RadioSetModem+0xb4>)
 8006328:	2200      	movs	r2, #0
 800632a:	735a      	strb	r2, [r3, #13]
        break;
 800632c:	e007      	b.n	800633e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800632e:	2000      	movs	r0, #0
 8006330:	f002 fae0 	bl	80088f4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006334:	4b04      	ldr	r3, [pc, #16]	@ (8006348 <RadioSetModem+0xb4>)
 8006336:	2200      	movs	r2, #0
 8006338:	735a      	strb	r2, [r3, #13]
        break;
 800633a:	e000      	b.n	800633e <RadioSetModem+0xaa>
        break;
 800633c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000368 	.word	0x20000368

0800634c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f002 fa87 	bl	8008868 <SUBGRF_SetRfFrequency>
}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b090      	sub	sp, #64	@ 0x40
 8006366:	af0a      	add	r7, sp, #40	@ 0x28
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800637e:	f000 fdea 	bl	8006f56 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8006382:	2000      	movs	r0, #0
 8006384:	f7ff ff86 	bl	8006294 <RadioSetModem>

    RadioSetChannel( freq );
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff ffdf 	bl	800634c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800638e:	2301      	movs	r3, #1
 8006390:	9309      	str	r3, [sp, #36]	@ 0x24
 8006392:	2300      	movs	r3, #0
 8006394:	9308      	str	r3, [sp, #32]
 8006396:	2300      	movs	r3, #0
 8006398:	9307      	str	r3, [sp, #28]
 800639a:	2300      	movs	r3, #0
 800639c:	9306      	str	r3, [sp, #24]
 800639e:	2300      	movs	r3, #0
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	2300      	movs	r3, #0
 80063a4:	9304      	str	r3, [sp, #16]
 80063a6:	2300      	movs	r3, #0
 80063a8:	9303      	str	r3, [sp, #12]
 80063aa:	2300      	movs	r3, #0
 80063ac:	9302      	str	r3, [sp, #8]
 80063ae:	2303      	movs	r3, #3
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	2300      	movs	r3, #0
 80063b8:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80063bc:	68b9      	ldr	r1, [r7, #8]
 80063be:	2000      	movs	r0, #0
 80063c0:	f000 f83c 	bl	800643c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80063c4:	2000      	movs	r0, #0
 80063c6:	f000 fdcd 	bl	8006f64 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80063ca:	f000 ff67 	bl	800729c <RadioGetWakeupTime>
 80063ce:	4603      	mov	r3, r0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fa fd99 	bl	8000f08 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80063d6:	f003 fb91 	bl	8009afc <UTIL_TIMER_GetCurrentTime>
 80063da:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80063dc:	e00d      	b.n	80063fa <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80063de:	2000      	movs	r0, #0
 80063e0:	f000 feae 	bl	8007140 <RadioRssi>
 80063e4:	4603      	mov	r3, r0
 80063e6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80063e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80063ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	dd02      	ble.n	80063fa <RadioIsChannelFree+0x98>
        {
            status = false;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75fb      	strb	r3, [r7, #23]
            break;
 80063f8:	e006      	b.n	8006408 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f003 fb90 	bl	8009b20 <UTIL_TIMER_GetElapsedTime>
 8006400:	4602      	mov	r2, r0
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	4293      	cmp	r3, r2
 8006406:	d8ea      	bhi.n	80063de <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8006408:	f000 fda5 	bl	8006f56 <RadioStandby>

    return status;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	2100      	movs	r1, #0
 8006426:	2000      	movs	r0, #0
 8006428:	f002 f9c2 	bl	80087b0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800642c:	f001 ff73 	bl	8008316 <SUBGRF_GetRandom>
 8006430:	6078      	str	r0, [r7, #4]

    return rnd;
 8006432:	687b      	ldr	r3, [r7, #4]
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08a      	sub	sp, #40	@ 0x28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	461a      	mov	r2, r3
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]
 800644c:	4613      	mov	r3, r2
 800644e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8006450:	4ab9      	ldr	r2, [pc, #740]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006452:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8006456:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8006458:	f003 f841 	bl	80094de <RFW_DeInit>
    if( rxContinuous == true )
 800645c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8006468:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8006470:	4ab2      	ldr	r2, [pc, #712]	@ (800673c <RadioSetRxConfig+0x300>)
 8006472:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006476:	7013      	strb	r3, [r2, #0]
 8006478:	e002      	b.n	8006480 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800647a:	4bb0      	ldr	r3, [pc, #704]	@ (800673c <RadioSetRxConfig+0x300>)
 800647c:	22ff      	movs	r2, #255	@ 0xff
 800647e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	2b05      	cmp	r3, #5
 8006484:	d009      	beq.n	800649a <RadioSetRxConfig+0x5e>
 8006486:	2b05      	cmp	r3, #5
 8006488:	f300 81d7 	bgt.w	800683a <RadioSetRxConfig+0x3fe>
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80bf 	beq.w	8006610 <RadioSetRxConfig+0x1d4>
 8006492:	2b01      	cmp	r3, #1
 8006494:	f000 8124 	beq.w	80066e0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8006498:	e1cf      	b.n	800683a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800649a:	2001      	movs	r0, #1
 800649c:	f002 f880 	bl	80085a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80064a0:	4ba5      	ldr	r3, [pc, #660]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80064a8:	4aa3      	ldr	r2, [pc, #652]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80064ae:	4ba2      	ldr	r3, [pc, #648]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064b0:	2209      	movs	r2, #9
 80064b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80064b6:	4ba0      	ldr	r3, [pc, #640]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064b8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80064bc:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80064be:	68b8      	ldr	r0, [r7, #8]
 80064c0:	f002 ff40 	bl	8009344 <SUBGRF_GetFskBandwidthRegValue>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	4b9b      	ldr	r3, [pc, #620]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80064ce:	4b9a      	ldr	r3, [pc, #616]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80064d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	b29a      	uxth	r2, r3
 80064da:	4b97      	ldr	r3, [pc, #604]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064dc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80064de:	4b96      	ldr	r3, [pc, #600]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80064e4:	4b94      	ldr	r3, [pc, #592]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064e6:	2210      	movs	r2, #16
 80064e8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80064ea:	4b93      	ldr	r3, [pc, #588]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80064f0:	4b91      	ldr	r3, [pc, #580]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80064f6:	4b91      	ldr	r3, [pc, #580]	@ (800673c <RadioSetRxConfig+0x300>)
 80064f8:	781a      	ldrb	r2, [r3, #0]
 80064fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80064fc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80064fe:	4b8e      	ldr	r3, [pc, #568]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006500:	2201      	movs	r2, #1
 8006502:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8006504:	4b8c      	ldr	r3, [pc, #560]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006506:	2200      	movs	r2, #0
 8006508:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800650a:	2005      	movs	r0, #5
 800650c:	f7ff fec2 	bl	8006294 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006510:	488b      	ldr	r0, [pc, #556]	@ (8006740 <RadioSetRxConfig+0x304>)
 8006512:	f002 fae3 	bl	8008adc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006516:	488b      	ldr	r0, [pc, #556]	@ (8006744 <RadioSetRxConfig+0x308>)
 8006518:	f002 fbb2 	bl	8008c80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800651c:	4a8a      	ldr	r2, [pc, #552]	@ (8006748 <RadioSetRxConfig+0x30c>)
 800651e:	f107 031c 	add.w	r3, r7, #28
 8006522:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006526:	e883 0003 	stmia.w	r3, {r0, r1}
 800652a:	f107 031c 	add.w	r3, r7, #28
 800652e:	4618      	mov	r0, r3
 8006530:	f001 fe6f 	bl	8008212 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006534:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8006538:	f001 feba 	bl	80082b0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800653c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8006540:	f000 fe1c 	bl	800717c <RadioRead>
 8006544:	4603      	mov	r3, r0
 8006546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 800654a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800654e:	f023 0310 	bic.w	r3, r3, #16
 8006552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8006556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800655a:	4619      	mov	r1, r3
 800655c:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8006560:	f000 fdfa 	bl	8007158 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8006564:	2104      	movs	r1, #4
 8006566:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800656a:	f000 fdf5 	bl	8007158 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800656e:	f640 009b 	movw	r0, #2203	@ 0x89b
 8006572:	f000 fe03 	bl	800717c <RadioRead>
 8006576:	4603      	mov	r3, r0
 8006578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800657c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006580:	f023 031c 	bic.w	r3, r3, #28
 8006584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8006588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800658c:	f043 0308 	orr.w	r3, r3, #8
 8006590:	b2db      	uxtb	r3, r3
 8006592:	4619      	mov	r1, r3
 8006594:	f640 009b 	movw	r0, #2203	@ 0x89b
 8006598:	f000 fdde 	bl	8007158 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800659c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80065a0:	f000 fdec 	bl	800717c <RadioRead>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80065aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ae:	f023 0318 	bic.w	r3, r3, #24
 80065b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80065b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ba:	f043 0318 	orr.w	r3, r3, #24
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	4619      	mov	r1, r3
 80065c2:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 80065c6:	f000 fdc7 	bl	8007158 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80065ca:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80065ce:	f000 fdd5 	bl	800717c <RadioRead>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80065d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80065e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065e8:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80065f4:	f000 fdb0 	bl	8007158 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80065f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80065fa:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	461a      	mov	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	fbb2 f3f3 	udiv	r3, r2, r3
 800660a:	4a4b      	ldr	r2, [pc, #300]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 800660c:	6093      	str	r3, [r2, #8]
            break;
 800660e:	e115      	b.n	800683c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8006610:	2000      	movs	r0, #0
 8006612:	f001 ffc5 	bl	80085a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006616:	4b48      	ldr	r3, [pc, #288]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800661e:	4a46      	ldr	r2, [pc, #280]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006624:	4b44      	ldr	r3, [pc, #272]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006626:	220b      	movs	r2, #11
 8006628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800662c:	68b8      	ldr	r0, [r7, #8]
 800662e:	f002 fe89 	bl	8009344 <SUBGRF_GetFskBandwidthRegValue>
 8006632:	4603      	mov	r3, r0
 8006634:	461a      	mov	r2, r3
 8006636:	4b40      	ldr	r3, [pc, #256]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800663c:	4b3e      	ldr	r3, [pc, #248]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 800663e:	2200      	movs	r2, #0
 8006640:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006642:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	b29a      	uxth	r2, r3
 8006648:	4b3b      	ldr	r3, [pc, #236]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 800664a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800664c:	4b3a      	ldr	r3, [pc, #232]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 800664e:	2204      	movs	r2, #4
 8006650:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8006652:	4b39      	ldr	r3, [pc, #228]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006654:	2218      	movs	r2, #24
 8006656:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006658:	4b37      	ldr	r3, [pc, #220]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 800665a:	2200      	movs	r2, #0
 800665c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800665e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006662:	f083 0301 	eor.w	r3, r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	4b33      	ldr	r3, [pc, #204]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 800666c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800666e:	4b33      	ldr	r3, [pc, #204]	@ (800673c <RadioSetRxConfig+0x300>)
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	4b31      	ldr	r3, [pc, #196]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006674:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8006676:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800667e:	4b2e      	ldr	r3, [pc, #184]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006680:	22f2      	movs	r2, #242	@ 0xf2
 8006682:	75da      	strb	r2, [r3, #23]
 8006684:	e002      	b.n	800668c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006686:	4b2c      	ldr	r3, [pc, #176]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006688:	2201      	movs	r2, #1
 800668a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800668c:	4b2a      	ldr	r3, [pc, #168]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 800668e:	2201      	movs	r2, #1
 8006690:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8006692:	f000 fc60 	bl	8006f56 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8006696:	2000      	movs	r0, #0
 8006698:	f7ff fdfc 	bl	8006294 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800669c:	4828      	ldr	r0, [pc, #160]	@ (8006740 <RadioSetRxConfig+0x304>)
 800669e:	f002 fa1d 	bl	8008adc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80066a2:	4828      	ldr	r0, [pc, #160]	@ (8006744 <RadioSetRxConfig+0x308>)
 80066a4:	f002 faec 	bl	8008c80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80066a8:	4a28      	ldr	r2, [pc, #160]	@ (800674c <RadioSetRxConfig+0x310>)
 80066aa:	f107 0314 	add.w	r3, r7, #20
 80066ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80066b6:	f107 0314 	add.w	r3, r7, #20
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 fda9 	bl	8008212 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80066c0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80066c4:	f001 fdf4 	bl	80082b0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80066c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80066ca:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80066ce:	fb02 f303 	mul.w	r3, r2, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066da:	4a17      	ldr	r2, [pc, #92]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80066dc:	6093      	str	r3, [r2, #8]
            break;
 80066de:	e0ad      	b.n	800683c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80066e0:	2000      	movs	r0, #0
 80066e2:	f001 ff5d 	bl	80085a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80066e6:	4b14      	ldr	r3, [pc, #80]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	4b11      	ldr	r3, [pc, #68]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 80066f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80066f8:	4a15      	ldr	r2, [pc, #84]	@ (8006750 <RadioSetRxConfig+0x314>)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4413      	add	r3, r2
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	4b0d      	ldr	r3, [pc, #52]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8006706:	4a0c      	ldr	r2, [pc, #48]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d105      	bne.n	8006720 <RadioSetRxConfig+0x2e4>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b0b      	cmp	r3, #11
 8006718:	d008      	beq.n	800672c <RadioSetRxConfig+0x2f0>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b0c      	cmp	r3, #12
 800671e:	d005      	beq.n	800672c <RadioSetRxConfig+0x2f0>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d116      	bne.n	8006754 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b0c      	cmp	r3, #12
 800672a:	d113      	bne.n	8006754 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800672c:	4b02      	ldr	r3, [pc, #8]	@ (8006738 <RadioSetRxConfig+0x2fc>)
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006734:	e012      	b.n	800675c <RadioSetRxConfig+0x320>
 8006736:	bf00      	nop
 8006738:	20000368 	.word	0x20000368
 800673c:	2000000d 	.word	0x2000000d
 8006740:	200003a0 	.word	0x200003a0
 8006744:	20000376 	.word	0x20000376
 8006748:	0800a684 	.word	0x0800a684
 800674c:	0800a68c 	.word	0x0800a68c
 8006750:	0800a828 	.word	0x0800a828
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006754:	4b3b      	ldr	r3, [pc, #236]	@ (8006844 <RadioSetRxConfig+0x408>)
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800675c:	4b39      	ldr	r3, [pc, #228]	@ (8006844 <RadioSetRxConfig+0x408>)
 800675e:	2201      	movs	r2, #1
 8006760:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006762:	4b38      	ldr	r3, [pc, #224]	@ (8006844 <RadioSetRxConfig+0x408>)
 8006764:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006768:	2b05      	cmp	r3, #5
 800676a:	d004      	beq.n	8006776 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800676c:	4b35      	ldr	r3, [pc, #212]	@ (8006844 <RadioSetRxConfig+0x408>)
 800676e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006772:	2b06      	cmp	r3, #6
 8006774:	d10a      	bne.n	800678c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8006776:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006778:	2b0b      	cmp	r3, #11
 800677a:	d803      	bhi.n	8006784 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800677c:	4b31      	ldr	r3, [pc, #196]	@ (8006844 <RadioSetRxConfig+0x408>)
 800677e:	220c      	movs	r2, #12
 8006780:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8006782:	e006      	b.n	8006792 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006784:	4a2f      	ldr	r2, [pc, #188]	@ (8006844 <RadioSetRxConfig+0x408>)
 8006786:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006788:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800678a:	e002      	b.n	8006792 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800678c:	4a2d      	ldr	r2, [pc, #180]	@ (8006844 <RadioSetRxConfig+0x408>)
 800678e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8006790:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006792:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8006796:	4b2b      	ldr	r3, [pc, #172]	@ (8006844 <RadioSetRxConfig+0x408>)
 8006798:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800679a:	4b2b      	ldr	r3, [pc, #172]	@ (8006848 <RadioSetRxConfig+0x40c>)
 800679c:	781a      	ldrb	r2, [r3, #0]
 800679e:	4b29      	ldr	r3, [pc, #164]	@ (8006844 <RadioSetRxConfig+0x408>)
 80067a0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80067a2:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80067a6:	4b27      	ldr	r3, [pc, #156]	@ (8006844 <RadioSetRxConfig+0x408>)
 80067a8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80067ac:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80067b0:	4b24      	ldr	r3, [pc, #144]	@ (8006844 <RadioSetRxConfig+0x408>)
 80067b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80067b6:	f000 fbce 	bl	8006f56 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80067ba:	2001      	movs	r0, #1
 80067bc:	f7ff fd6a 	bl	8006294 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80067c0:	4822      	ldr	r0, [pc, #136]	@ (800684c <RadioSetRxConfig+0x410>)
 80067c2:	f002 f98b 	bl	8008adc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80067c6:	4822      	ldr	r0, [pc, #136]	@ (8006850 <RadioSetRxConfig+0x414>)
 80067c8:	f002 fa5a 	bl	8008c80 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80067cc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	4618      	mov	r0, r3
 80067d2:	f001 fef4 	bl	80085be <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80067d6:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80067da:	f002 fbad 	bl	8008f38 <SUBGRF_ReadRegister>
 80067de:	4603      	mov	r3, r0
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	4619      	mov	r1, r3
 80067e8:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80067ec:	f002 fb90 	bl	8008f10 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80067f0:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <RadioSetRxConfig+0x408>)
 80067f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d10d      	bne.n	8006816 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80067fa:	f240 7036 	movw	r0, #1846	@ 0x736
 80067fe:	f002 fb9b 	bl	8008f38 <SUBGRF_ReadRegister>
 8006802:	4603      	mov	r3, r0
 8006804:	f023 0304 	bic.w	r3, r3, #4
 8006808:	b2db      	uxtb	r3, r3
 800680a:	4619      	mov	r1, r3
 800680c:	f240 7036 	movw	r0, #1846	@ 0x736
 8006810:	f002 fb7e 	bl	8008f10 <SUBGRF_WriteRegister>
 8006814:	e00c      	b.n	8006830 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006816:	f240 7036 	movw	r0, #1846	@ 0x736
 800681a:	f002 fb8d 	bl	8008f38 <SUBGRF_ReadRegister>
 800681e:	4603      	mov	r3, r0
 8006820:	f043 0304 	orr.w	r3, r3, #4
 8006824:	b2db      	uxtb	r3, r3
 8006826:	4619      	mov	r1, r3
 8006828:	f240 7036 	movw	r0, #1846	@ 0x736
 800682c:	f002 fb70 	bl	8008f10 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8006830:	4b04      	ldr	r3, [pc, #16]	@ (8006844 <RadioSetRxConfig+0x408>)
 8006832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006836:	609a      	str	r2, [r3, #8]
            break;
 8006838:	e000      	b.n	800683c <RadioSetRxConfig+0x400>
            break;
 800683a:	bf00      	nop
    }
}
 800683c:	bf00      	nop
 800683e:	3728      	adds	r7, #40	@ 0x28
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20000368 	.word	0x20000368
 8006848:	2000000d 	.word	0x2000000d
 800684c:	200003a0 	.word	0x200003a0
 8006850:	20000376 	.word	0x20000376

08006854 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60ba      	str	r2, [r7, #8]
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
 8006862:	460b      	mov	r3, r1
 8006864:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8006866:	f002 fe3a 	bl	80094de <RFW_DeInit>
    switch( modem )
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	2b04      	cmp	r3, #4
 800686e:	f000 80c7 	beq.w	8006a00 <RadioSetTxConfig+0x1ac>
 8006872:	2b04      	cmp	r3, #4
 8006874:	f300 80d6 	bgt.w	8006a24 <RadioSetTxConfig+0x1d0>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <RadioSetTxConfig+0x2e>
 800687c:	2b01      	cmp	r3, #1
 800687e:	d059      	beq.n	8006934 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006880:	e0d0      	b.n	8006a24 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006882:	4b77      	ldr	r3, [pc, #476]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800688a:	4a75      	ldr	r2, [pc, #468]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006890:	4b73      	ldr	r3, [pc, #460]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006892:	220b      	movs	r2, #11
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f002 fd53 	bl	8009344 <SUBGRF_GetFskBandwidthRegValue>
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	4b6f      	ldr	r3, [pc, #444]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80068a8:	4a6d      	ldr	r2, [pc, #436]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80068ae:	4b6c      	ldr	r3, [pc, #432]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80068b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	4b69      	ldr	r3, [pc, #420]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068bc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80068be:	4b68      	ldr	r3, [pc, #416]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068c0:	2204      	movs	r2, #4
 80068c2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80068c4:	4b66      	ldr	r3, [pc, #408]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068c6:	2218      	movs	r2, #24
 80068c8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80068ca:	4b65      	ldr	r3, [pc, #404]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80068d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068d4:	f083 0301 	eor.w	r3, r3, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	4b60      	ldr	r3, [pc, #384]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068de:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80068e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80068e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068ea:	22f2      	movs	r2, #242	@ 0xf2
 80068ec:	75da      	strb	r2, [r3, #23]
 80068ee:	e002      	b.n	80068f6 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80068f0:	4b5b      	ldr	r3, [pc, #364]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80068f6:	4b5a      	ldr	r3, [pc, #360]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80068f8:	2201      	movs	r2, #1
 80068fa:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80068fc:	f000 fb2b 	bl	8006f56 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8006900:	2000      	movs	r0, #0
 8006902:	f7ff fcc7 	bl	8006294 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006906:	4857      	ldr	r0, [pc, #348]	@ (8006a64 <RadioSetTxConfig+0x210>)
 8006908:	f002 f8e8 	bl	8008adc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800690c:	4856      	ldr	r0, [pc, #344]	@ (8006a68 <RadioSetTxConfig+0x214>)
 800690e:	f002 f9b7 	bl	8008c80 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006912:	4a56      	ldr	r2, [pc, #344]	@ (8006a6c <RadioSetTxConfig+0x218>)
 8006914:	f107 0310 	add.w	r3, r7, #16
 8006918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800691c:	e883 0003 	stmia.w	r3, {r0, r1}
 8006920:	f107 0310 	add.w	r3, r7, #16
 8006924:	4618      	mov	r0, r3
 8006926:	f001 fc74 	bl	8008212 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800692a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800692e:	f001 fcbf 	bl	80082b0 <SUBGRF_SetWhiteningSeed>
            break;
 8006932:	e078      	b.n	8006a26 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006934:	4b4a      	ldr	r3, [pc, #296]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	4b47      	ldr	r3, [pc, #284]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006946:	4a4a      	ldr	r2, [pc, #296]	@ (8006a70 <RadioSetTxConfig+0x21c>)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	4b44      	ldr	r3, [pc, #272]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006954:	4a42      	ldr	r2, [pc, #264]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006956:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800695a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d105      	bne.n	8006970 <RadioSetTxConfig+0x11c>
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	2b0b      	cmp	r3, #11
 8006968:	d008      	beq.n	800697c <RadioSetTxConfig+0x128>
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	2b0c      	cmp	r3, #12
 800696e:	d005      	beq.n	800697c <RadioSetTxConfig+0x128>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d107      	bne.n	8006986 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b0c      	cmp	r3, #12
 800697a:	d104      	bne.n	8006986 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800697c:	4b38      	ldr	r3, [pc, #224]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006984:	e003      	b.n	800698e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006986:	4b36      	ldr	r3, [pc, #216]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800698e:	4b34      	ldr	r3, [pc, #208]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006990:	2201      	movs	r2, #1
 8006992:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006994:	4b32      	ldr	r3, [pc, #200]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800699a:	2b05      	cmp	r3, #5
 800699c:	d004      	beq.n	80069a8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800699e:	4b30      	ldr	r3, [pc, #192]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80069a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80069a4:	2b06      	cmp	r3, #6
 80069a6:	d10a      	bne.n	80069be <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80069a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80069aa:	2b0b      	cmp	r3, #11
 80069ac:	d803      	bhi.n	80069b6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80069ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80069b0:	220c      	movs	r2, #12
 80069b2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80069b4:	e006      	b.n	80069c4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80069b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80069b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80069ba:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80069bc:	e002      	b.n	80069c4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80069be:	4a28      	ldr	r2, [pc, #160]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80069c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80069c2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80069c4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80069c8:	4b25      	ldr	r3, [pc, #148]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80069ca:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80069cc:	4b29      	ldr	r3, [pc, #164]	@ (8006a74 <RadioSetTxConfig+0x220>)
 80069ce:	781a      	ldrb	r2, [r3, #0]
 80069d0:	4b23      	ldr	r3, [pc, #140]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80069d2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80069d4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80069d8:	4b21      	ldr	r3, [pc, #132]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80069da:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80069de:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80069e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 80069e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80069e8:	f000 fab5 	bl	8006f56 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80069ec:	2001      	movs	r0, #1
 80069ee:	f7ff fc51 	bl	8006294 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80069f2:	481c      	ldr	r0, [pc, #112]	@ (8006a64 <RadioSetTxConfig+0x210>)
 80069f4:	f002 f872 	bl	8008adc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80069f8:	481b      	ldr	r0, [pc, #108]	@ (8006a68 <RadioSetTxConfig+0x214>)
 80069fa:	f002 f941 	bl	8008c80 <SUBGRF_SetPacketParams>
            break;
 80069fe:	e012      	b.n	8006a26 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006a00:	2004      	movs	r0, #4
 8006a02:	f7ff fc47 	bl	8006294 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006a06:	4b16      	ldr	r3, [pc, #88]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8006a0e:	4a14      	ldr	r2, [pc, #80]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006a14:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006a16:	2216      	movs	r2, #22
 8006a18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006a1c:	4811      	ldr	r0, [pc, #68]	@ (8006a64 <RadioSetTxConfig+0x210>)
 8006a1e:	f002 f85d 	bl	8008adc <SUBGRF_SetModulationParams>
            break;
 8006a22:	e000      	b.n	8006a26 <RadioSetTxConfig+0x1d2>
            break;
 8006a24:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f002 fb8c 	bl	8009148 <SUBGRF_SetRfTxPower>
 8006a30:	4603      	mov	r3, r0
 8006a32:	461a      	mov	r2, r3
 8006a34:	4b0a      	ldr	r3, [pc, #40]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006a36:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006a3a:	210e      	movs	r1, #14
 8006a3c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8006a40:	f002 fa66 	bl	8008f10 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006a44:	4b06      	ldr	r3, [pc, #24]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006a46:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f002 fd5b 	bl	8009506 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006a50:	4a03      	ldr	r2, [pc, #12]	@ (8006a60 <RadioSetTxConfig+0x20c>)
 8006a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a54:	6053      	str	r3, [r2, #4]
}
 8006a56:	bf00      	nop
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000368 	.word	0x20000368
 8006a64:	200003a0 	.word	0x200003a0
 8006a68:	20000376 	.word	0x20000376
 8006a6c:	0800a68c 	.word	0x0800a68c
 8006a70:	0800a828 	.word	0x0800a828
 8006a74:	2000000d 	.word	0x2000000d

08006a78 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
    return true;
 8006a80:	2301      	movs	r3, #1
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8006a9a:	79fb      	ldrb	r3, [r7, #7]
 8006a9c:	2b0a      	cmp	r3, #10
 8006a9e:	d83e      	bhi.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
 8006aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <RadioGetLoRaBandwidthInHz+0x1c>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006ad5 	.word	0x08006ad5
 8006aac:	08006ae5 	.word	0x08006ae5
 8006ab0:	08006af5 	.word	0x08006af5
 8006ab4:	08006b05 	.word	0x08006b05
 8006ab8:	08006b0d 	.word	0x08006b0d
 8006abc:	08006b13 	.word	0x08006b13
 8006ac0:	08006b19 	.word	0x08006b19
 8006ac4:	08006b1f 	.word	0x08006b1f
 8006ac8:	08006add 	.word	0x08006add
 8006acc:	08006aed 	.word	0x08006aed
 8006ad0:	08006afd 	.word	0x08006afd
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8006ad4:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8006ad8:	60fb      	str	r3, [r7, #12]
        break;
 8006ada:	e020      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8006adc:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8006ae0:	60fb      	str	r3, [r7, #12]
        break;
 8006ae2:	e01c      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8006ae4:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8006ae8:	60fb      	str	r3, [r7, #12]
        break;
 8006aea:	e018      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8006aec:	f245 1361 	movw	r3, #20833	@ 0x5161
 8006af0:	60fb      	str	r3, [r7, #12]
        break;
 8006af2:	e014      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8006af4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8006af8:	60fb      	str	r3, [r7, #12]
        break;
 8006afa:	e010      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8006afc:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8006b00:	60fb      	str	r3, [r7, #12]
        break;
 8006b02:	e00c      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8006b04:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006b08:	60fb      	str	r3, [r7, #12]
        break;
 8006b0a:	e008      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8006b0c:	4b07      	ldr	r3, [pc, #28]	@ (8006b2c <RadioGetLoRaBandwidthInHz+0xa0>)
 8006b0e:	60fb      	str	r3, [r7, #12]
        break;
 8006b10:	e005      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8006b12:	4b07      	ldr	r3, [pc, #28]	@ (8006b30 <RadioGetLoRaBandwidthInHz+0xa4>)
 8006b14:	60fb      	str	r3, [r7, #12]
        break;
 8006b16:	e002      	b.n	8006b1e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <RadioGetLoRaBandwidthInHz+0xa8>)
 8006b1a:	60fb      	str	r3, [r7, #12]
        break;
 8006b1c:	bf00      	nop
    }

    return bandwidthInHz;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	0001e848 	.word	0x0001e848
 8006b30:	0003d090 	.word	0x0003d090
 8006b34:	0007a120 	.word	0x0007a120

08006b38 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	70fb      	strb	r3, [r7, #3]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	803b      	strh	r3, [r7, #0]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8006b52:	883b      	ldrh	r3, [r7, #0]
 8006b54:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006b56:	78ba      	ldrb	r2, [r7, #2]
 8006b58:	f082 0201 	eor.w	r2, r2, #1
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	d001      	beq.n	8006b66 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8006b62:	2208      	movs	r2, #8
 8006b64:	e000      	b.n	8006b68 <RadioGetGfskTimeOnAirNumerator+0x30>
 8006b66:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8006b68:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006b6a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8006b6e:	7c3b      	ldrb	r3, [r7, #16]
 8006b70:	7d39      	ldrb	r1, [r7, #20]
 8006b72:	2900      	cmp	r1, #0
 8006b74:	d001      	beq.n	8006b7a <RadioGetGfskTimeOnAirNumerator+0x42>
 8006b76:	2102      	movs	r1, #2
 8006b78:	e000      	b.n	8006b7c <RadioGetGfskTimeOnAirNumerator+0x44>
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	440b      	add	r3, r1
 8006b7e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8006b80:	4413      	add	r3, r2
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b08b      	sub	sp, #44	@ 0x2c
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4611      	mov	r1, r2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	71fb      	strb	r3, [r7, #7]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b05      	cmp	r3, #5
 8006bb2:	d002      	beq.n	8006bba <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	2b06      	cmp	r3, #6
 8006bb8:	d104      	bne.n	8006bc4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8006bba:	88bb      	ldrh	r3, [r7, #4]
 8006bbc:	2b0b      	cmp	r3, #11
 8006bbe:	d801      	bhi.n	8006bc4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8006bc0:	230c      	movs	r3, #12
 8006bc2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d105      	bne.n	8006bd6 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b0b      	cmp	r3, #11
 8006bce:	d008      	beq.n	8006be2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b0c      	cmp	r3, #12
 8006bd4:	d005      	beq.n	8006be2 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d105      	bne.n	8006be8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b0c      	cmp	r3, #12
 8006be0:	d102      	bne.n	8006be8 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006be8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006bec:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8006bee:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006bf2:	2a00      	cmp	r2, #0
 8006bf4:	d001      	beq.n	8006bfa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8006bf6:	2210      	movs	r2, #16
 8006bf8:	e000      	b.n	8006bfc <RadioGetLoRaTimeOnAirNumerator+0x70>
 8006bfa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006bfc:	4413      	add	r3, r2
 8006bfe:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8006c04:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8006c06:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	d001      	beq.n	8006c12 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8006c0e:	2200      	movs	r2, #0
 8006c10:	e000      	b.n	8006c14 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8006c12:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8006c14:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8006c16:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b06      	cmp	r3, #6
 8006c1c:	d803      	bhi.n	8006c26 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	623b      	str	r3, [r7, #32]
 8006c24:	e00e      	b.n	8006c44 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8006c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d004      	beq.n	8006c3e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	3b02      	subs	r3, #2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	623b      	str	r3, [r7, #32]
 8006c3c:	e002      	b.n	8006c44 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	da01      	bge.n	8006c4e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	4413      	add	r3, r2
 8006c54:	1e5a      	subs	r2, r3, #1
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	fb92 f3f3 	sdiv	r3, r2, r3
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	fb03 f202 	mul.w	r2, r3, r2
 8006c62:	88bb      	ldrh	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
    int32_t intermediate =
 8006c66:	330c      	adds	r3, #12
 8006c68:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b06      	cmp	r3, #6
 8006c6e:	d802      	bhi.n	8006c76 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	3302      	adds	r3, #2
 8006c74:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	3b02      	subs	r3, #2
 8006c80:	fa02 f303 	lsl.w	r3, r2, r3
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	372c      	adds	r7, #44	@ 0x2c
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr
	...

08006c90 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	@ 0x28
 8006c94:	af04      	add	r7, sp, #16
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	613b      	str	r3, [r7, #16]

    switch( modem )
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <RadioTimeOnAir+0x28>
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d017      	beq.n	8006ce6 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8006cb6:	e035      	b.n	8006d24 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8006cb8:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8006cbc:	8c3a      	ldrh	r2, [r7, #32]
 8006cbe:	7bb9      	ldrb	r1, [r7, #14]
 8006cc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff ff32 	bl	8006b38 <RadioGetGfskTimeOnAirNumerator>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006cda:	fb02 f303 	mul.w	r3, r2, r3
 8006cde:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	613b      	str	r3, [r7, #16]
        break;
 8006ce4:	e01e      	b.n	8006d24 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8006ce6:	8c39      	ldrh	r1, [r7, #32]
 8006ce8:	7bba      	ldrb	r2, [r7, #14]
 8006cea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	68b8      	ldr	r0, [r7, #8]
 8006d02:	f7ff ff43 	bl	8006b8c <RadioGetLoRaTimeOnAirNumerator>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d0c:	fb02 f303 	mul.w	r3, r2, r3
 8006d10:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8006d12:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <RadioTimeOnAir+0xac>)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4413      	add	r3, r2
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff feb6 	bl	8006a8c <RadioGetLoRaBandwidthInHz>
 8006d20:	6138      	str	r0, [r7, #16]
        break;
 8006d22:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	4413      	add	r3, r2
 8006d2a:	1e5a      	subs	r2, r3, #1
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	0800a828 	.word	0x0800a828

08006d40 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f240 2101 	movw	r1, #513	@ 0x201
 8006d54:	f240 2001 	movw	r0, #513	@ 0x201
 8006d58:	f001 fd2a 	bl	80087b0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006d5c:	4b70      	ldr	r3, [pc, #448]	@ (8006f20 <RadioSend+0x1e0>)
 8006d5e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006d62:	2101      	movs	r1, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	f002 f9c7 	bl	80090f8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8006d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006f20 <RadioSend+0x1e0>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d112      	bne.n	8006d98 <RadioSend+0x58>
 8006d72:	4b6b      	ldr	r3, [pc, #428]	@ (8006f20 <RadioSend+0x1e0>)
 8006d74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d78:	2b06      	cmp	r3, #6
 8006d7a:	d10d      	bne.n	8006d98 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006d7c:	f640 0089 	movw	r0, #2185	@ 0x889
 8006d80:	f002 f8da 	bl	8008f38 <SUBGRF_ReadRegister>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f023 0304 	bic.w	r3, r3, #4
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	f640 0089 	movw	r0, #2185	@ 0x889
 8006d92:	f002 f8bd 	bl	8008f10 <SUBGRF_WriteRegister>
 8006d96:	e00c      	b.n	8006db2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006d98:	f640 0089 	movw	r0, #2185	@ 0x889
 8006d9c:	f002 f8cc 	bl	8008f38 <SUBGRF_ReadRegister>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f043 0304 	orr.w	r3, r3, #4
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	4619      	mov	r1, r3
 8006daa:	f640 0089 	movw	r0, #2185	@ 0x889
 8006dae:	f002 f8af 	bl	8008f10 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8006db2:	4b5b      	ldr	r3, [pc, #364]	@ (8006f20 <RadioSend+0x1e0>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	f200 80a2 	bhi.w	8006f00 <RadioSend+0x1c0>
 8006dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <RadioSend+0x84>)
 8006dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc2:	bf00      	nop
 8006dc4:	08006df3 	.word	0x08006df3
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006df3 	.word	0x08006df3
 8006dd0:	08006e49 	.word	0x08006e49
 8006dd4:	08006e69 	.word	0x08006e69
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8006dd8:	4a51      	ldr	r2, [pc, #324]	@ (8006f20 <RadioSend+0x1e0>)
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006dde:	4851      	ldr	r0, [pc, #324]	@ (8006f24 <RadioSend+0x1e4>)
 8006de0:	f001 ff4e 	bl	8008c80 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	2200      	movs	r2, #0
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 f9fe 	bl	80081ec <SUBGRF_SendPayload>
            break;
 8006df0:	e087      	b.n	8006f02 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8006df2:	f002 fb7a 	bl	80094ea <RFW_Is_Init>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d118      	bne.n	8006e2e <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8006dfc:	f107 020d 	add.w	r2, r7, #13
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f002 fb88 	bl	800951a <RFW_TransmitInit>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10c      	bne.n	8006e2a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8006e10:	7b7a      	ldrb	r2, [r7, #13]
 8006e12:	4b43      	ldr	r3, [pc, #268]	@ (8006f20 <RadioSend+0x1e0>)
 8006e14:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e16:	4843      	ldr	r0, [pc, #268]	@ (8006f24 <RadioSend+0x1e4>)
 8006e18:	f001 ff32 	bl	8008c80 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8006e1c:	7b7b      	ldrb	r3, [r7, #13]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f9e2 	bl	80081ec <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8006e28:	e06b      	b.n	8006f02 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e073      	b.n	8006f16 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8006e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8006f20 <RadioSend+0x1e0>)
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e34:	483b      	ldr	r0, [pc, #236]	@ (8006f24 <RadioSend+0x1e4>)
 8006e36:	f001 ff23 	bl	8008c80 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f9d3 	bl	80081ec <SUBGRF_SendPayload>
            break;
 8006e46:	e05c      	b.n	8006f02 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006e48:	4b35      	ldr	r3, [pc, #212]	@ (8006f20 <RadioSend+0x1e0>)
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8006e4e:	4a34      	ldr	r2, [pc, #208]	@ (8006f20 <RadioSend+0x1e0>)
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e54:	4833      	ldr	r0, [pc, #204]	@ (8006f24 <RadioSend+0x1e4>)
 8006e56:	f001 ff13 	bl	8008c80 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f9c3 	bl	80081ec <SUBGRF_SendPayload>
            break;
 8006e66:	e04c      	b.n	8006f02 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8006e68:	78fb      	ldrb	r3, [r7, #3]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	482e      	ldr	r0, [pc, #184]	@ (8006f28 <RadioSend+0x1e8>)
 8006e70:	f000 fc96 	bl	80077a0 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8006e74:	4b2a      	ldr	r3, [pc, #168]	@ (8006f20 <RadioSend+0x1e0>)
 8006e76:	2202      	movs	r2, #2
 8006e78:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	4b27      	ldr	r3, [pc, #156]	@ (8006f20 <RadioSend+0x1e0>)
 8006e82:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e84:	4827      	ldr	r0, [pc, #156]	@ (8006f24 <RadioSend+0x1e4>)
 8006e86:	f001 fefb 	bl	8008c80 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	20f1      	movs	r0, #241	@ 0xf1
 8006e8e:	f000 f963 	bl	8007158 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8006e92:	2100      	movs	r1, #0
 8006e94:	20f0      	movs	r0, #240	@ 0xf0
 8006e96:	f000 f95f 	bl	8007158 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006e9a:	4b21      	ldr	r3, [pc, #132]	@ (8006f20 <RadioSend+0x1e0>)
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e9e:	2b64      	cmp	r3, #100	@ 0x64
 8006ea0:	d108      	bne.n	8006eb4 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8006ea2:	2170      	movs	r1, #112	@ 0x70
 8006ea4:	20f3      	movs	r0, #243	@ 0xf3
 8006ea6:	f000 f957 	bl	8007158 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8006eaa:	211d      	movs	r1, #29
 8006eac:	20f2      	movs	r0, #242	@ 0xf2
 8006eae:	f000 f953 	bl	8007158 <RadioWrite>
 8006eb2:	e007      	b.n	8006ec4 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8006eb4:	21e1      	movs	r1, #225	@ 0xe1
 8006eb6:	20f3      	movs	r0, #243	@ 0xf3
 8006eb8:	f000 f94e 	bl	8007158 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8006ebc:	2104      	movs	r1, #4
 8006ebe:	20f2      	movs	r0, #242	@ 0xf2
 8006ec0:	f000 f94a 	bl	8007158 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3302      	adds	r3, #2
 8006ece:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8006ed0:	89fb      	ldrh	r3, [r7, #14]
 8006ed2:	0a1b      	lsrs	r3, r3, #8
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	20f4      	movs	r0, #244	@ 0xf4
 8006edc:	f000 f93c 	bl	8007158 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8006ee0:	89fb      	ldrh	r3, [r7, #14]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	20f5      	movs	r0, #245	@ 0xf5
 8006ee8:	f000 f936 	bl	8007158 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	480b      	ldr	r0, [pc, #44]	@ (8006f28 <RadioSend+0x1e8>)
 8006efa:	f001 f977 	bl	80081ec <SUBGRF_SendPayload>
            break;
 8006efe:	e000      	b.n	8006f02 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8006f00:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8006f02:	4b07      	ldr	r3, [pc, #28]	@ (8006f20 <RadioSend+0x1e0>)
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4619      	mov	r1, r3
 8006f08:	4808      	ldr	r0, [pc, #32]	@ (8006f2c <RadioSend+0x1ec>)
 8006f0a:	f002 fdcd 	bl	8009aa8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8006f0e:	4807      	ldr	r0, [pc, #28]	@ (8006f2c <RadioSend+0x1ec>)
 8006f10:	f002 fcec 	bl	80098ec <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000368 	.word	0x20000368
 8006f24:	20000376 	.word	0x20000376
 8006f28:	20000264 	.word	0x20000264
 8006f2c:	200003c4 	.word	0x200003c4

08006f30 <RadioSleep>:

static void RadioSleep( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8006f36:	2300      	movs	r3, #0
 8006f38:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8006f3a:	793b      	ldrb	r3, [r7, #4]
 8006f3c:	f043 0304 	orr.w	r3, r3, #4
 8006f40:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8006f42:	7938      	ldrb	r0, [r7, #4]
 8006f44:	f001 fa2e 	bl	80083a4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8006f48:	2002      	movs	r0, #2
 8006f4a:	f7f9 ffdd 	bl	8000f08 <HAL_Delay>
}
 8006f4e:	bf00      	nop
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <RadioStandby>:

static void RadioStandby( void )
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	f001 fa54 	bl	8008408 <SUBGRF_SetStandby>
}
 8006f60:	bf00      	nop
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8006f6c:	f002 fabd 	bl	80094ea <RFW_Is_Init>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d102      	bne.n	8006f7c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8006f76:	f002 fae0 	bl	800953a <RFW_ReceiveInit>
 8006f7a:	e007      	b.n	8006f8c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f240 2162 	movw	r1, #610	@ 0x262
 8006f84:	f240 2062 	movw	r0, #610	@ 0x262
 8006f88:	f001 fc12 	bl	80087b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d006      	beq.n	8006fa0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	4811      	ldr	r0, [pc, #68]	@ (8006fdc <RadioRx+0x78>)
 8006f96:	f002 fd87 	bl	8009aa8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006f9a:	4810      	ldr	r0, [pc, #64]	@ (8006fdc <RadioRx+0x78>)
 8006f9c:	f002 fca6 	bl	80098ec <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe0 <RadioRx+0x7c>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8006fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe0 <RadioRx+0x7c>)
 8006fa8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f002 f8a2 	bl	80090f8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8006fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe0 <RadioRx+0x7c>)
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d004      	beq.n	8006fc6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006fbc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8006fc0:	f001 fa5e 	bl	8008480 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8006fc4:	e005      	b.n	8006fd2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006fc6:	4b06      	ldr	r3, [pc, #24]	@ (8006fe0 <RadioRx+0x7c>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	019b      	lsls	r3, r3, #6
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 fa57 	bl	8008480 <SUBGRF_SetRx>
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	200003dc 	.word	0x200003dc
 8006fe0:	20000368 	.word	0x20000368

08006fe4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8006fec:	f002 fa7d 	bl	80094ea <RFW_Is_Init>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d102      	bne.n	8006ffc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8006ff6:	f002 faa0 	bl	800953a <RFW_ReceiveInit>
 8006ffa:	e007      	b.n	800700c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	2200      	movs	r2, #0
 8007000:	f240 2162 	movw	r1, #610	@ 0x262
 8007004:	f240 2062 	movw	r0, #610	@ 0x262
 8007008:	f001 fbd2 	bl	80087b0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4811      	ldr	r0, [pc, #68]	@ (800705c <RadioRxBoosted+0x78>)
 8007016:	f002 fd47 	bl	8009aa8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800701a:	4810      	ldr	r0, [pc, #64]	@ (800705c <RadioRxBoosted+0x78>)
 800701c:	f002 fc66 	bl	80098ec <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007020:	4b0f      	ldr	r3, [pc, #60]	@ (8007060 <RadioRxBoosted+0x7c>)
 8007022:	2200      	movs	r2, #0
 8007024:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8007026:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <RadioRxBoosted+0x7c>)
 8007028:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f002 f862 	bl	80090f8 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007034:	4b0a      	ldr	r3, [pc, #40]	@ (8007060 <RadioRxBoosted+0x7c>)
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800703c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8007040:	f001 fa3e 	bl	80084c0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007044:	e005      	b.n	8007052 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007046:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <RadioRxBoosted+0x7c>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	019b      	lsls	r3, r3, #6
 800704c:	4618      	mov	r0, r3
 800704e:	f001 fa37 	bl	80084c0 <SUBGRF_SetRxBoosted>
}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	200003dc 	.word	0x200003dc
 8007060:	20000368 	.word	0x20000368

08007064 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	005a      	lsls	r2, r3, #1
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	4413      	add	r3, r2
 8007076:	4a0c      	ldr	r2, [pc, #48]	@ (80070a8 <RadioSetRxDutyCycle+0x44>)
 8007078:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800707a:	2300      	movs	r3, #0
 800707c:	2200      	movs	r2, #0
 800707e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007082:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8007086:	f001 fb93 	bl	80087b0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800708a:	4b07      	ldr	r3, [pc, #28]	@ (80070a8 <RadioSetRxDutyCycle+0x44>)
 800708c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f002 f830 	bl	80090f8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 fa34 	bl	8008508 <SUBGRF_SetRxDutyCycle>
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000368 	.word	0x20000368

080070ac <RadioStartCad>:

static void RadioStartCad( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80070b0:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <RadioStartCad+0x2c>)
 80070b2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80070b6:	2100      	movs	r1, #0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f002 f81d 	bl	80090f8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80070be:	2300      	movs	r3, #0
 80070c0:	2200      	movs	r2, #0
 80070c2:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80070c6:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80070ca:	f001 fb71 	bl	80087b0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 80070ce:	f001 fa47 	bl	8008560 <SUBGRF_SetCad>
}
 80070d2:	bf00      	nop
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000368 	.word	0x20000368

080070dc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
 80070e8:	4613      	mov	r3, r2
 80070ea:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 80070ec:	883b      	ldrh	r3, [r7, #0]
 80070ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fbb5 	bl	8008868 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 80070fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007102:	4618      	mov	r0, r3
 8007104:	f002 f820 	bl	8009148 <SUBGRF_SetRfTxPower>
 8007108:	4603      	mov	r3, r0
 800710a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800710c:	210e      	movs	r1, #14
 800710e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007112:	f001 fefd 	bl	8008f10 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	2101      	movs	r1, #1
 800711a:	4618      	mov	r0, r3
 800711c:	f001 ffec 	bl	80090f8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8007120:	f001 fa2c 	bl	800857c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007124:	68f9      	ldr	r1, [r7, #12]
 8007126:	4805      	ldr	r0, [pc, #20]	@ (800713c <RadioSetTxContinuousWave+0x60>)
 8007128:	f002 fcbe 	bl	8009aa8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800712c:	4803      	ldr	r0, [pc, #12]	@ (800713c <RadioSetTxContinuousWave+0x60>)
 800712e:	f002 fbdd 	bl	80098ec <UTIL_TIMER_Start>
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	200003c4 	.word	0x200003c4

08007140 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800714a:	f001 fe4e 	bl	8008dea <SUBGRF_GetRssiInst>
 800714e:	4603      	mov	r3, r0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	460a      	mov	r2, r1
 8007162:	80fb      	strh	r3, [r7, #6]
 8007164:	4613      	mov	r3, r2
 8007166:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8007168:	797a      	ldrb	r2, [r7, #5]
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f001 fece 	bl	8008f10 <SUBGRF_WriteRegister>
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fed5 	bl	8008f38 <SUBGRF_ReadRegister>
 800718e:	4603      	mov	r3, r0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	80fb      	strh	r3, [r7, #6]
 80071a4:	4613      	mov	r3, r2
 80071a6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80071a8:	797b      	ldrb	r3, [r7, #5]
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f001 fed5 	bl	8008f60 <SUBGRF_WriteRegisters>
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	4603      	mov	r3, r0
 80071c6:	6039      	str	r1, [r7, #0]
 80071c8:	80fb      	strh	r3, [r7, #6]
 80071ca:	4613      	mov	r3, r2
 80071cc:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80071ce:	797b      	ldrb	r3, [r7, #5]
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 fee4 	bl	8008fa4 <SUBGRF_ReadRegisters>
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	460a      	mov	r2, r1
 80071ee:	71fb      	strb	r3, [r7, #7]
 80071f0:	4613      	mov	r3, r2
 80071f2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d10a      	bne.n	8007210 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80071fa:	4a0e      	ldr	r2, [pc, #56]	@ (8007234 <RadioSetMaxPayloadLength+0x50>)
 80071fc:	79bb      	ldrb	r3, [r7, #6]
 80071fe:	7013      	strb	r3, [r2, #0]
 8007200:	4b0c      	ldr	r3, [pc, #48]	@ (8007234 <RadioSetMaxPayloadLength+0x50>)
 8007202:	781a      	ldrb	r2, [r3, #0]
 8007204:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <RadioSetMaxPayloadLength+0x54>)
 8007206:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007208:	480c      	ldr	r0, [pc, #48]	@ (800723c <RadioSetMaxPayloadLength+0x58>)
 800720a:	f001 fd39 	bl	8008c80 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800720e:	e00d      	b.n	800722c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8007210:	4b09      	ldr	r3, [pc, #36]	@ (8007238 <RadioSetMaxPayloadLength+0x54>)
 8007212:	7d5b      	ldrb	r3, [r3, #21]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d109      	bne.n	800722c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8007218:	4a06      	ldr	r2, [pc, #24]	@ (8007234 <RadioSetMaxPayloadLength+0x50>)
 800721a:	79bb      	ldrb	r3, [r7, #6]
 800721c:	7013      	strb	r3, [r2, #0]
 800721e:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <RadioSetMaxPayloadLength+0x50>)
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	4b05      	ldr	r3, [pc, #20]	@ (8007238 <RadioSetMaxPayloadLength+0x54>)
 8007224:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007226:	4805      	ldr	r0, [pc, #20]	@ (800723c <RadioSetMaxPayloadLength+0x58>)
 8007228:	f001 fd2a 	bl	8008c80 <SUBGRF_SetPacketParams>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	2000000d 	.word	0x2000000d
 8007238:	20000368 	.word	0x20000368
 800723c:	20000376 	.word	0x20000376

08007240 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800724a:	4a13      	ldr	r2, [pc, #76]	@ (8007298 <RadioSetPublicNetwork+0x58>)
 800724c:	79fb      	ldrb	r3, [r7, #7]
 800724e:	7313      	strb	r3, [r2, #12]
 8007250:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <RadioSetPublicNetwork+0x58>)
 8007252:	7b1a      	ldrb	r2, [r3, #12]
 8007254:	4b10      	ldr	r3, [pc, #64]	@ (8007298 <RadioSetPublicNetwork+0x58>)
 8007256:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8007258:	2001      	movs	r0, #1
 800725a:	f7ff f81b 	bl	8006294 <RadioSetModem>
    if( enable == true )
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007264:	2134      	movs	r1, #52	@ 0x34
 8007266:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800726a:	f001 fe51 	bl	8008f10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800726e:	2144      	movs	r1, #68	@ 0x44
 8007270:	f240 7041 	movw	r0, #1857	@ 0x741
 8007274:	f001 fe4c 	bl	8008f10 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007278:	e009      	b.n	800728e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800727a:	2114      	movs	r1, #20
 800727c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8007280:	f001 fe46 	bl	8008f10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007284:	2124      	movs	r1, #36	@ 0x24
 8007286:	f240 7041 	movw	r0, #1857	@ 0x741
 800728a:	f001 fe41 	bl	8008f10 <SUBGRF_WriteRegister>
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20000368 	.word	0x20000368

0800729c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80072a0:	f001 ff86 	bl	80091b0 <SUBGRF_GetRadioWakeUpTime>
 80072a4:	4603      	mov	r3, r0
 80072a6:	3303      	adds	r3, #3
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	bd80      	pop	{r7, pc}

080072ac <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80072b4:	f000 f80e 	bl	80072d4 <RadioOnTxTimeoutProcess>
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80072c8:	f000 f818 	bl	80072fc <RadioOnRxTimeoutProcess>
}
 80072cc:	bf00      	nop
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80072d8:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <RadioOnTxTimeoutProcess+0x24>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <RadioOnTxTimeoutProcess+0x1e>
 80072e0:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <RadioOnTxTimeoutProcess+0x24>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80072ea:	4b03      	ldr	r3, [pc, #12]	@ (80072f8 <RadioOnTxTimeoutProcess+0x24>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4798      	blx	r3
    }
}
 80072f2:	bf00      	nop
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20000364 	.word	0x20000364

080072fc <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007300:	4b07      	ldr	r3, [pc, #28]	@ (8007320 <RadioOnRxTimeoutProcess+0x24>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <RadioOnRxTimeoutProcess+0x1e>
 8007308:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <RadioOnRxTimeoutProcess+0x24>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007312:	4b03      	ldr	r3, [pc, #12]	@ (8007320 <RadioOnRxTimeoutProcess+0x24>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	4798      	blx	r3
    }
}
 800731a:	bf00      	nop
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	20000364 	.word	0x20000364

08007324 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800732e:	4a05      	ldr	r2, [pc, #20]	@ (8007344 <RadioOnDioIrq+0x20>)
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8007336:	f000 f807 	bl	8007348 <RadioIrqProcess>
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20000368 	.word	0x20000368

08007348 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8007348:	b5b0      	push	{r4, r5, r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8007356:	4ba5      	ldr	r3, [pc, #660]	@ (80075ec <RadioIrqProcess+0x2a4>)
 8007358:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800735c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007360:	f000 810d 	beq.w	800757e <RadioIrqProcess+0x236>
 8007364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007368:	f300 81c0 	bgt.w	80076ec <RadioIrqProcess+0x3a4>
 800736c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007370:	f000 80f1 	beq.w	8007556 <RadioIrqProcess+0x20e>
 8007374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007378:	f300 81b8 	bgt.w	80076ec <RadioIrqProcess+0x3a4>
 800737c:	2b80      	cmp	r3, #128	@ 0x80
 800737e:	f000 80d6 	beq.w	800752e <RadioIrqProcess+0x1e6>
 8007382:	2b80      	cmp	r3, #128	@ 0x80
 8007384:	f300 81b2 	bgt.w	80076ec <RadioIrqProcess+0x3a4>
 8007388:	2b20      	cmp	r3, #32
 800738a:	dc49      	bgt.n	8007420 <RadioIrqProcess+0xd8>
 800738c:	2b00      	cmp	r3, #0
 800738e:	f340 81ad 	ble.w	80076ec <RadioIrqProcess+0x3a4>
 8007392:	3b01      	subs	r3, #1
 8007394:	2b1f      	cmp	r3, #31
 8007396:	f200 81a9 	bhi.w	80076ec <RadioIrqProcess+0x3a4>
 800739a:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <RadioIrqProcess+0x58>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	08007429 	.word	0x08007429
 80073a4:	08007463 	.word	0x08007463
 80073a8:	080076ed 	.word	0x080076ed
 80073ac:	08007609 	.word	0x08007609
 80073b0:	080076ed 	.word	0x080076ed
 80073b4:	080076ed 	.word	0x080076ed
 80073b8:	080076ed 	.word	0x080076ed
 80073bc:	08007677 	.word	0x08007677
 80073c0:	080076ed 	.word	0x080076ed
 80073c4:	080076ed 	.word	0x080076ed
 80073c8:	080076ed 	.word	0x080076ed
 80073cc:	080076ed 	.word	0x080076ed
 80073d0:	080076ed 	.word	0x080076ed
 80073d4:	080076ed 	.word	0x080076ed
 80073d8:	080076ed 	.word	0x080076ed
 80073dc:	080076ed 	.word	0x080076ed
 80073e0:	080076ed 	.word	0x080076ed
 80073e4:	080076ed 	.word	0x080076ed
 80073e8:	080076ed 	.word	0x080076ed
 80073ec:	080076ed 	.word	0x080076ed
 80073f0:	080076ed 	.word	0x080076ed
 80073f4:	080076ed 	.word	0x080076ed
 80073f8:	080076ed 	.word	0x080076ed
 80073fc:	080076ed 	.word	0x080076ed
 8007400:	080076ed 	.word	0x080076ed
 8007404:	080076ed 	.word	0x080076ed
 8007408:	080076ed 	.word	0x080076ed
 800740c:	080076ed 	.word	0x080076ed
 8007410:	080076ed 	.word	0x080076ed
 8007414:	080076ed 	.word	0x080076ed
 8007418:	080076ed 	.word	0x080076ed
 800741c:	08007687 	.word	0x08007687
 8007420:	2b40      	cmp	r3, #64	@ 0x40
 8007422:	f000 814b 	beq.w	80076bc <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8007426:	e161      	b.n	80076ec <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8007428:	4871      	ldr	r0, [pc, #452]	@ (80075f0 <RadioIrqProcess+0x2a8>)
 800742a:	f002 facd 	bl	80099c8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800742e:	2000      	movs	r0, #0
 8007430:	f000 ffea 	bl	8008408 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8007434:	f002 f860 	bl	80094f8 <RFW_Is_LongPacketModeEnabled>
 8007438:	4603      	mov	r3, r0
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800743e:	f002 f884 	bl	800954a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007442:	4b6c      	ldr	r3, [pc, #432]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 8152 	beq.w	80076f0 <RadioIrqProcess+0x3a8>
 800744c:	4b69      	ldr	r3, [pc, #420]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 814c 	beq.w	80076f0 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8007458:	4b66      	ldr	r3, [pc, #408]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4798      	blx	r3
        break;
 8007460:	e146      	b.n	80076f0 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8007462:	4865      	ldr	r0, [pc, #404]	@ (80075f8 <RadioIrqProcess+0x2b0>)
 8007464:	f002 fab0 	bl	80099c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8007468:	4b60      	ldr	r3, [pc, #384]	@ (80075ec <RadioIrqProcess+0x2a4>)
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	f083 0301 	eor.w	r3, r3, #1
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d014      	beq.n	80074a0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8007476:	2000      	movs	r0, #0
 8007478:	f000 ffc6 	bl	8008408 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800747c:	2100      	movs	r1, #0
 800747e:	f640 1002 	movw	r0, #2306	@ 0x902
 8007482:	f001 fd45 	bl	8008f10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8007486:	f640 1044 	movw	r0, #2372	@ 0x944
 800748a:	f001 fd55 	bl	8008f38 <SUBGRF_ReadRegister>
 800748e:	4603      	mov	r3, r0
 8007490:	f043 0302 	orr.w	r3, r3, #2
 8007494:	b2db      	uxtb	r3, r3
 8007496:	4619      	mov	r1, r3
 8007498:	f640 1044 	movw	r0, #2372	@ 0x944
 800749c:	f001 fd38 	bl	8008f10 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80074a0:	1dfb      	adds	r3, r7, #7
 80074a2:	22ff      	movs	r2, #255	@ 0xff
 80074a4:	4619      	mov	r1, r3
 80074a6:	4855      	ldr	r0, [pc, #340]	@ (80075fc <RadioIrqProcess+0x2b4>)
 80074a8:	f000 fe7e 	bl	80081a8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80074ac:	4854      	ldr	r0, [pc, #336]	@ (8007600 <RadioIrqProcess+0x2b8>)
 80074ae:	f001 fcdd 	bl	8008e6c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80074b2:	4b50      	ldr	r3, [pc, #320]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f000 811c 	beq.w	80076f4 <RadioIrqProcess+0x3ac>
 80074bc:	4b4d      	ldr	r3, [pc, #308]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 8116 	beq.w	80076f4 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 80074c8:	4b48      	ldr	r3, [pc, #288]	@ (80075ec <RadioIrqProcess+0x2a4>)
 80074ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d10e      	bne.n	80074f0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80074d2:	4b48      	ldr	r3, [pc, #288]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689c      	ldr	r4, [r3, #8]
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	4619      	mov	r1, r3
 80074dc:	4b43      	ldr	r3, [pc, #268]	@ (80075ec <RadioIrqProcess+0x2a4>)
 80074de:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 80074e2:	461a      	mov	r2, r3
 80074e4:	4b41      	ldr	r3, [pc, #260]	@ (80075ec <RadioIrqProcess+0x2a4>)
 80074e6:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 80074ea:	4844      	ldr	r0, [pc, #272]	@ (80075fc <RadioIrqProcess+0x2b4>)
 80074ec:	47a0      	blx	r4
                break;
 80074ee:	e01d      	b.n	800752c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80074f0:	4b3e      	ldr	r3, [pc, #248]	@ (80075ec <RadioIrqProcess+0x2a4>)
 80074f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f4:	463a      	mov	r2, r7
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 ff4b 	bl	8009394 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80074fe:	4b3d      	ldr	r3, [pc, #244]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689c      	ldr	r4, [r3, #8]
 8007504:	79fb      	ldrb	r3, [r7, #7]
 8007506:	4619      	mov	r1, r3
 8007508:	4b38      	ldr	r3, [pc, #224]	@ (80075ec <RadioIrqProcess+0x2a4>)
 800750a:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 800750e:	4618      	mov	r0, r3
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007516:	4a3b      	ldr	r2, [pc, #236]	@ (8007604 <RadioIrqProcess+0x2bc>)
 8007518:	fb82 5203 	smull	r5, r2, r2, r3
 800751c:	1192      	asrs	r2, r2, #6
 800751e:	17db      	asrs	r3, r3, #31
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	b25b      	sxtb	r3, r3
 8007524:	4602      	mov	r2, r0
 8007526:	4835      	ldr	r0, [pc, #212]	@ (80075fc <RadioIrqProcess+0x2b4>)
 8007528:	47a0      	blx	r4
                break;
 800752a:	bf00      	nop
        break;
 800752c:	e0e2      	b.n	80076f4 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800752e:	2000      	movs	r0, #0
 8007530:	f000 ff6a 	bl	8008408 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007534:	4b2f      	ldr	r3, [pc, #188]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80dd 	beq.w	80076f8 <RadioIrqProcess+0x3b0>
 800753e:	4b2d      	ldr	r3, [pc, #180]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80d7 	beq.w	80076f8 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800754a:	4b2a      	ldr	r3, [pc, #168]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	2000      	movs	r0, #0
 8007552:	4798      	blx	r3
        break;
 8007554:	e0d0      	b.n	80076f8 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8007556:	2000      	movs	r0, #0
 8007558:	f000 ff56 	bl	8008408 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800755c:	4b25      	ldr	r3, [pc, #148]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 80cb 	beq.w	80076fc <RadioIrqProcess+0x3b4>
 8007566:	4b23      	ldr	r3, [pc, #140]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80c5 	beq.w	80076fc <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8007572:	4b20      	ldr	r3, [pc, #128]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	2001      	movs	r0, #1
 800757a:	4798      	blx	r3
        break;
 800757c:	e0be      	b.n	80076fc <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800757e:	f000 fdf9 	bl	8008174 <SUBGRF_GetOperatingMode>
 8007582:	4603      	mov	r3, r0
 8007584:	2b04      	cmp	r3, #4
 8007586:	d115      	bne.n	80075b4 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8007588:	4819      	ldr	r0, [pc, #100]	@ (80075f0 <RadioIrqProcess+0x2a8>)
 800758a:	f002 fa1d 	bl	80099c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800758e:	2000      	movs	r0, #0
 8007590:	f000 ff3a 	bl	8008408 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007594:	4b17      	ldr	r3, [pc, #92]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 80b1 	beq.w	8007700 <RadioIrqProcess+0x3b8>
 800759e:	4b15      	ldr	r3, [pc, #84]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f000 80ab 	beq.w	8007700 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80075aa:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	4798      	blx	r3
        break;
 80075b2:	e0a5      	b.n	8007700 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80075b4:	f000 fdde 	bl	8008174 <SUBGRF_GetOperatingMode>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	f040 80a0 	bne.w	8007700 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80075c0:	480d      	ldr	r0, [pc, #52]	@ (80075f8 <RadioIrqProcess+0x2b0>)
 80075c2:	f002 fa01 	bl	80099c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80075c6:	2000      	movs	r0, #0
 80075c8:	f000 ff1e 	bl	8008408 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80075cc:	4b09      	ldr	r3, [pc, #36]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f000 8095 	beq.w	8007700 <RadioIrqProcess+0x3b8>
 80075d6:	4b07      	ldr	r3, [pc, #28]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 808f 	beq.w	8007700 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80075e2:	4b04      	ldr	r3, [pc, #16]	@ (80075f4 <RadioIrqProcess+0x2ac>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	4798      	blx	r3
        break;
 80075ea:	e089      	b.n	8007700 <RadioIrqProcess+0x3b8>
 80075ec:	20000368 	.word	0x20000368
 80075f0:	200003c4 	.word	0x200003c4
 80075f4:	20000364 	.word	0x20000364
 80075f8:	200003dc 	.word	0x200003dc
 80075fc:	20000264 	.word	0x20000264
 8007600:	2000038c 	.word	0x2000038c
 8007604:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8007608:	4b44      	ldr	r3, [pc, #272]	@ (800771c <RadioIrqProcess+0x3d4>)
 800760a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760c:	2b00      	cmp	r3, #0
 800760e:	d079      	beq.n	8007704 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8007610:	4a43      	ldr	r2, [pc, #268]	@ (8007720 <RadioIrqProcess+0x3d8>)
 8007612:	4b42      	ldr	r3, [pc, #264]	@ (800771c <RadioIrqProcess+0x3d4>)
 8007614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007616:	0c1b      	lsrs	r3, r3, #16
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4619      	mov	r1, r3
 800761c:	f640 1003 	movw	r0, #2307	@ 0x903
 8007620:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8007622:	4a3f      	ldr	r2, [pc, #252]	@ (8007720 <RadioIrqProcess+0x3d8>)
 8007624:	4b3d      	ldr	r3, [pc, #244]	@ (800771c <RadioIrqProcess+0x3d4>)
 8007626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	b2db      	uxtb	r3, r3
 800762c:	4619      	mov	r1, r3
 800762e:	f640 1004 	movw	r0, #2308	@ 0x904
 8007632:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8007634:	4a3a      	ldr	r2, [pc, #232]	@ (8007720 <RadioIrqProcess+0x3d8>)
 8007636:	4b39      	ldr	r3, [pc, #228]	@ (800771c <RadioIrqProcess+0x3d4>)
 8007638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763a:	b2db      	uxtb	r3, r3
 800763c:	4619      	mov	r1, r3
 800763e:	f640 1005 	movw	r0, #2309	@ 0x905
 8007642:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8007644:	4c36      	ldr	r4, [pc, #216]	@ (8007720 <RadioIrqProcess+0x3d8>)
 8007646:	4b37      	ldr	r3, [pc, #220]	@ (8007724 <RadioIrqProcess+0x3dc>)
 8007648:	f640 1002 	movw	r0, #2306	@ 0x902
 800764c:	4798      	blx	r3
 800764e:	4603      	mov	r3, r0
 8007650:	f043 0301 	orr.w	r3, r3, #1
 8007654:	b2db      	uxtb	r3, r3
 8007656:	4619      	mov	r1, r3
 8007658:	f640 1002 	movw	r0, #2306	@ 0x902
 800765c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800765e:	4b2f      	ldr	r3, [pc, #188]	@ (800771c <RadioIrqProcess+0x3d4>)
 8007660:	2200      	movs	r2, #0
 8007662:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007664:	2300      	movs	r3, #0
 8007666:	2200      	movs	r2, #0
 8007668:	f240 2162 	movw	r1, #610	@ 0x262
 800766c:	f240 2062 	movw	r0, #610	@ 0x262
 8007670:	f001 f89e 	bl	80087b0 <SUBGRF_SetDioIrqParams>
        break;
 8007674:	e046      	b.n	8007704 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8007676:	f001 ff38 	bl	80094ea <RFW_Is_Init>
 800767a:	4603      	mov	r3, r0
 800767c:	2b01      	cmp	r3, #1
 800767e:	d143      	bne.n	8007708 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8007680:	f001 ff69 	bl	8009556 <RFW_ReceivePayload>
        break;
 8007684:	e040      	b.n	8007708 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 8007686:	4828      	ldr	r0, [pc, #160]	@ (8007728 <RadioIrqProcess+0x3e0>)
 8007688:	f002 f99e 	bl	80099c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800768c:	4b23      	ldr	r3, [pc, #140]	@ (800771c <RadioIrqProcess+0x3d4>)
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	f083 0301 	eor.w	r3, r3, #1
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800769a:	2000      	movs	r0, #0
 800769c:	f000 feb4 	bl	8008408 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80076a0:	4b22      	ldr	r3, [pc, #136]	@ (800772c <RadioIrqProcess+0x3e4>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d031      	beq.n	800770c <RadioIrqProcess+0x3c4>
 80076a8:	4b20      	ldr	r3, [pc, #128]	@ (800772c <RadioIrqProcess+0x3e4>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d02c      	beq.n	800770c <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80076b2:	4b1e      	ldr	r3, [pc, #120]	@ (800772c <RadioIrqProcess+0x3e4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4798      	blx	r3
        break;
 80076ba:	e027      	b.n	800770c <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80076bc:	4b17      	ldr	r3, [pc, #92]	@ (800771c <RadioIrqProcess+0x3d4>)
 80076be:	785b      	ldrb	r3, [r3, #1]
 80076c0:	f083 0301 	eor.w	r3, r3, #1
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80076ca:	2000      	movs	r0, #0
 80076cc:	f000 fe9c 	bl	8008408 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80076d0:	4b16      	ldr	r3, [pc, #88]	@ (800772c <RadioIrqProcess+0x3e4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01b      	beq.n	8007710 <RadioIrqProcess+0x3c8>
 80076d8:	4b14      	ldr	r3, [pc, #80]	@ (800772c <RadioIrqProcess+0x3e4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d016      	beq.n	8007710 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80076e2:	4b12      	ldr	r3, [pc, #72]	@ (800772c <RadioIrqProcess+0x3e4>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	4798      	blx	r3
        break;
 80076ea:	e011      	b.n	8007710 <RadioIrqProcess+0x3c8>
        break;
 80076ec:	bf00      	nop
 80076ee:	e010      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 80076f0:	bf00      	nop
 80076f2:	e00e      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 80076f4:	bf00      	nop
 80076f6:	e00c      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 80076f8:	bf00      	nop
 80076fa:	e00a      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 80076fc:	bf00      	nop
 80076fe:	e008      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 8007700:	bf00      	nop
 8007702:	e006      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 8007704:	bf00      	nop
 8007706:	e004      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 8007708:	bf00      	nop
 800770a:	e002      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 800770c:	bf00      	nop
 800770e:	e000      	b.n	8007712 <RadioIrqProcess+0x3ca>
        break;
 8007710:	bf00      	nop
    }
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bdb0      	pop	{r4, r5, r7, pc}
 800771a:	bf00      	nop
 800771c:	20000368 	.word	0x20000368
 8007720:	08007159 	.word	0x08007159
 8007724:	0800717d 	.word	0x0800717d
 8007728:	200003dc 	.word	0x200003dc
 800772c:	20000364 	.word	0x20000364

08007730 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8007734:	4b09      	ldr	r3, [pc, #36]	@ (800775c <RadioTxPrbs+0x2c>)
 8007736:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800773a:	2101      	movs	r1, #1
 800773c:	4618      	mov	r0, r3
 800773e:	f001 fcdb 	bl	80090f8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8007742:	4b07      	ldr	r3, [pc, #28]	@ (8007760 <RadioTxPrbs+0x30>)
 8007744:	212d      	movs	r1, #45	@ 0x2d
 8007746:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800774a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800774c:	f000 ff1f 	bl	800858e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8007750:	4804      	ldr	r0, [pc, #16]	@ (8007764 <RadioTxPrbs+0x34>)
 8007752:	f000 fe75 	bl	8008440 <SUBGRF_SetTx>
}
 8007756:	bf00      	nop
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20000368 	.word	0x20000368
 8007760:	08007159 	.word	0x08007159
 8007764:	000fffff 	.word	0x000fffff

08007768 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8007772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007776:	4618      	mov	r0, r3
 8007778:	f001 fce6 	bl	8009148 <SUBGRF_SetRfTxPower>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007780:	210e      	movs	r1, #14
 8007782:	f640 101f 	movw	r0, #2335	@ 0x91f
 8007786:	f001 fbc3 	bl	8008f10 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	2101      	movs	r1, #1
 800778e:	4618      	mov	r0, r3
 8007790:	f001 fcb2 	bl	80090f8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8007794:	f000 fef2 	bl	800857c <SUBGRF_SetTxContinuousWave>
}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80077a0:	b480      	push	{r7}
 80077a2:	b089      	sub	sp, #36	@ 0x24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80077b6:	2300      	movs	r3, #0
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	e011      	b.n	80077e0 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	4413      	add	r3, r2
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	440b      	add	r3, r1
 80077ca:	43d2      	mvns	r2, r2
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	2200      	movs	r2, #0
 80077d8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	3301      	adds	r3, #1
 80077de:	61bb      	str	r3, [r7, #24]
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	dbe9      	blt.n	80077bc <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80077e8:	2300      	movs	r3, #0
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	e049      	b.n	8007882 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	425a      	negs	r2, r3
 80077f2:	f003 0307 	and.w	r3, r3, #7
 80077f6:	f002 0207 	and.w	r2, r2, #7
 80077fa:	bf58      	it	pl
 80077fc:	4253      	negpl	r3, r2
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f1c3 0307 	rsb	r3, r3, #7
 8007804:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b00      	cmp	r3, #0
 800780a:	da00      	bge.n	800780e <payload_integration+0x6e>
 800780c:	3307      	adds	r3, #7
 800780e:	10db      	asrs	r3, r3, #3
 8007810:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	3301      	adds	r3, #1
 8007816:	425a      	negs	r2, r3
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	f002 0207 	and.w	r2, r2, #7
 8007820:	bf58      	it	pl
 8007822:	4253      	negpl	r3, r2
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f1c3 0307 	rsb	r3, r3, #7
 800782a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	3301      	adds	r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	da00      	bge.n	8007836 <payload_integration+0x96>
 8007834:	3307      	adds	r3, #7
 8007836:	10db      	asrs	r3, r3, #3
 8007838:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800783a:	7dbb      	ldrb	r3, [r7, #22]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	4413      	add	r3, r2
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	fa42 f303 	asr.w	r3, r2, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8007852:	7ffa      	ldrb	r2, [r7, #31]
 8007854:	7cfb      	ldrb	r3, [r7, #19]
 8007856:	4053      	eors	r3, r2
 8007858:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800785a:	7d3b      	ldrb	r3, [r7, #20]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b25a      	sxtb	r2, r3
 8007864:	7ff9      	ldrb	r1, [r7, #31]
 8007866:	7d7b      	ldrb	r3, [r7, #21]
 8007868:	fa01 f303 	lsl.w	r3, r1, r3
 800786c:	b25b      	sxtb	r3, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	b259      	sxtb	r1, r3
 8007872:	7d3b      	ldrb	r3, [r7, #20]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4413      	add	r3, r2
 8007878:	b2ca      	uxtb	r2, r1
 800787a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	3301      	adds	r3, #1
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	00db      	lsls	r3, r3, #3
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	429a      	cmp	r2, r3
 800788a:	dbb0      	blt.n	80077ee <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800788c:	7ffb      	ldrb	r3, [r7, #31]
 800788e:	01db      	lsls	r3, r3, #7
 8007890:	b25a      	sxtb	r2, r3
 8007892:	7ffb      	ldrb	r3, [r7, #31]
 8007894:	019b      	lsls	r3, r3, #6
 8007896:	b25b      	sxtb	r3, r3
 8007898:	4313      	orrs	r3, r2
 800789a:	b25b      	sxtb	r3, r3
 800789c:	7ffa      	ldrb	r2, [r7, #31]
 800789e:	2a00      	cmp	r2, #0
 80078a0:	d101      	bne.n	80078a6 <payload_integration+0x106>
 80078a2:	2220      	movs	r2, #32
 80078a4:	e000      	b.n	80078a8 <payload_integration+0x108>
 80078a6:	2200      	movs	r2, #0
 80078a8:	4313      	orrs	r3, r2
 80078aa:	b259      	sxtb	r1, r3
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	b2ca      	uxtb	r2, r1
 80078b4:	701a      	strb	r2, [r3, #0]
}
 80078b6:	bf00      	nop
 80078b8:	3724      	adds	r7, #36	@ 0x24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bc80      	pop	{r7}
 80078be:	4770      	bx	lr

080078c0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08c      	sub	sp, #48	@ 0x30
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	607a      	str	r2, [r7, #4]
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80078d4:	2300      	movs	r3, #0
 80078d6:	623b      	str	r3, [r7, #32]
 80078d8:	2300      	movs	r3, #0
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80078dc:	f001 fdff 	bl	80094de <RFW_DeInit>

    if( rxContinuous != 0 )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80078e6:	2300      	movs	r3, #0
 80078e8:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bf14      	ite	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	2300      	moveq	r3, #0
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	4ba3      	ldr	r3, [pc, #652]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 80078f8:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <RadioSetRxGenericConfig+0x48>
 8007900:	2b01      	cmp	r3, #1
 8007902:	f000 80dc 	beq.w	8007abe <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8007906:	e194      	b.n	8007c32 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d003      	beq.n	8007918 <RadioSetRxGenericConfig+0x58>
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8007918:	f04f 33ff 	mov.w	r3, #4294967295
 800791c:	e18a      	b.n	8007c34 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	7f9b      	ldrb	r3, [r3, #30]
 8007922:	2b08      	cmp	r3, #8
 8007924:	d902      	bls.n	800792c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8007926:	f04f 33ff 	mov.w	r3, #4294967295
 800792a:	e183      	b.n	8007c34 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	6919      	ldr	r1, [r3, #16]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	7f9b      	ldrb	r3, [r3, #30]
 8007934:	461a      	mov	r2, r3
 8007936:	f107 0320 	add.w	r3, r7, #32
 800793a:	4618      	mov	r0, r3
 800793c:	f001 ff66 	bl	800980c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	bf14      	ite	ne
 8007948:	2301      	movne	r3, #1
 800794a:	2300      	moveq	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fe26 	bl	80085a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007954:	4b8b      	ldr	r3, [pc, #556]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007956:	2200      	movs	r2, #0
 8007958:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	4a88      	ldr	r2, [pc, #544]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007962:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	f893 2020 	ldrb.w	r2, [r3, #32]
 800796a:	4b86      	ldr	r3, [pc, #536]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 800796c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	4618      	mov	r0, r3
 8007976:	f001 fce5 	bl	8009344 <SUBGRF_GetFskBandwidthRegValue>
 800797a:	4603      	mov	r3, r0
 800797c:	461a      	mov	r2, r3
 800797e:	4b81      	ldr	r3, [pc, #516]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007984:	4b7f      	ldr	r3, [pc, #508]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007986:	2200      	movs	r2, #0
 8007988:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	b29b      	uxth	r3, r3
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	b29a      	uxth	r2, r3
 8007994:	4b7b      	ldr	r3, [pc, #492]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007996:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	7fda      	ldrb	r2, [r3, #31]
 800799c:	4b79      	ldr	r3, [pc, #484]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 800799e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	7f9b      	ldrb	r3, [r3, #30]
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	4b76      	ldr	r3, [pc, #472]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 80079aa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80079b2:	4b74      	ldr	r3, [pc, #464]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 80079b4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d105      	bne.n	80079cc <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	695b      	ldr	r3, [r3, #20]
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	4b6f      	ldr	r3, [pc, #444]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 80079c8:	759a      	strb	r2, [r3, #22]
 80079ca:	e00b      	b.n	80079e4 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d103      	bne.n	80079de <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80079d6:	4b6b      	ldr	r3, [pc, #428]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 80079d8:	22ff      	movs	r2, #255	@ 0xff
 80079da:	759a      	strb	r2, [r3, #22]
 80079dc:	e002      	b.n	80079e4 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80079de:	4b69      	ldr	r3, [pc, #420]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 80079e0:	22ff      	movs	r2, #255	@ 0xff
 80079e2:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d004      	beq.n	80079f8 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d12d      	bne.n	8007a54 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80079fe:	2bf1      	cmp	r3, #241	@ 0xf1
 8007a00:	d00c      	beq.n	8007a1c <RadioSetRxGenericConfig+0x15c>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007a08:	2bf2      	cmp	r3, #242	@ 0xf2
 8007a0a:	d007      	beq.n	8007a1c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d002      	beq.n	8007a1c <RadioSetRxGenericConfig+0x15c>
                return -1;
 8007a16:	f04f 33ff 	mov.w	r3, #4294967295
 8007a1a:	e10b      	b.n	8007c34 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8007a24:	4b58      	ldr	r3, [pc, #352]	@ (8007b88 <RadioSetRxGenericConfig+0x2c8>)
 8007a26:	6819      	ldr	r1, [r3, #0]
 8007a28:	f107 0314 	add.w	r3, r7, #20
 8007a2c:	4a57      	ldr	r2, [pc, #348]	@ (8007b8c <RadioSetRxGenericConfig+0x2cc>)
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 fd48 	bl	80094c4 <RFW_Init>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d002      	beq.n	8007a40 <RadioSetRxGenericConfig+0x180>
                return -1;
 8007a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3e:	e0f9      	b.n	8007c34 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007a40:	4b50      	ldr	r3, [pc, #320]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007a46:	4b4f      	ldr	r3, [pc, #316]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	755a      	strb	r2, [r3, #21]
        {
 8007a52:	e00e      	b.n	8007a72 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8007a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007a5c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8007a64:	4b47      	ldr	r3, [pc, #284]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007a66:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8007a6e:	4b45      	ldr	r3, [pc, #276]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007a70:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8007a72:	f7ff fa70 	bl	8006f56 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007a76:	2000      	movs	r0, #0
 8007a78:	f7fe fc0c 	bl	8006294 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007a7c:	4844      	ldr	r0, [pc, #272]	@ (8007b90 <RadioSetRxGenericConfig+0x2d0>)
 8007a7e:	f001 f82d 	bl	8008adc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007a82:	4844      	ldr	r0, [pc, #272]	@ (8007b94 <RadioSetRxGenericConfig+0x2d4>)
 8007a84:	f001 f8fc 	bl	8008c80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007a88:	f107 0320 	add.w	r3, r7, #32
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fbc0 	bl	8008212 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	8b9b      	ldrh	r3, [r3, #28]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fc0a 	bl	80082b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	8b1b      	ldrh	r3, [r3, #24]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fbe5 	bl	8008270 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8007aac:	fb03 f202 	mul.w	r2, r3, r2
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab8:	4a32      	ldr	r2, [pc, #200]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007aba:	6093      	str	r3, [r2, #8]
        break;
 8007abc:	e0b9      	b.n	8007c32 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d102      	bne.n	8007acc <RadioSetRxGenericConfig+0x20c>
            return -1;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	e0b3      	b.n	8007c34 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d104      	bne.n	8007ae0 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007ade:	e002      	b.n	8007ae6 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8007ae0:	23ff      	movs	r3, #255	@ 0xff
 8007ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf14      	ite	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	2300      	moveq	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fd53 	bl	80085a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fd5d 	bl	80085be <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007b04:	4b1f      	ldr	r3, [pc, #124]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007b12:	4b1c      	ldr	r3, [pc, #112]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8007b1e:	4b19      	ldr	r3, [pc, #100]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8007b2a:	4b16      	ldr	r3, [pc, #88]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007b2c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d010      	beq.n	8007b5c <RadioSetRxGenericConfig+0x29c>
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	dc2c      	bgt.n	8007b98 <RadioSetRxGenericConfig+0x2d8>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <RadioSetRxGenericConfig+0x288>
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d005      	beq.n	8007b52 <RadioSetRxGenericConfig+0x292>
            break;
 8007b46:	e027      	b.n	8007b98 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007b48:	4b0e      	ldr	r3, [pc, #56]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007b50:	e023      	b.n	8007b9a <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007b52:	4b0c      	ldr	r3, [pc, #48]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007b5a:	e01e      	b.n	8007b9a <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007b62:	2b0b      	cmp	r3, #11
 8007b64:	d004      	beq.n	8007b70 <RadioSetRxGenericConfig+0x2b0>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007b6c:	2b0c      	cmp	r3, #12
 8007b6e:	d104      	bne.n	8007b7a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007b70:	4b04      	ldr	r3, [pc, #16]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007b78:	e00f      	b.n	8007b9a <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007b7a:	4b02      	ldr	r3, [pc, #8]	@ (8007b84 <RadioSetRxGenericConfig+0x2c4>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007b82:	e00a      	b.n	8007b9a <RadioSetRxGenericConfig+0x2da>
 8007b84:	20000368 	.word	0x20000368
 8007b88:	20000364 	.word	0x20000364
 8007b8c:	200003dc 	.word	0x200003dc
 8007b90:	200003a0 	.word	0x200003a0
 8007b94:	20000376 	.word	0x20000376
            break;
 8007b98:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007b9a:	4b28      	ldr	r3, [pc, #160]	@ (8007c3c <RadioSetRxGenericConfig+0x37c>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 8007ba4:	4b25      	ldr	r3, [pc, #148]	@ (8007c3c <RadioSetRxGenericConfig+0x37c>)
 8007ba6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8007bae:	4b23      	ldr	r3, [pc, #140]	@ (8007c3c <RadioSetRxGenericConfig+0x37c>)
 8007bb0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8007bb2:	4a22      	ldr	r2, [pc, #136]	@ (8007c3c <RadioSetRxGenericConfig+0x37c>)
 8007bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bb8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8007c3c <RadioSetRxGenericConfig+0x37c>)
 8007bc2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8007bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8007c3c <RadioSetRxGenericConfig+0x37c>)
 8007bce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 8007bd2:	f7ff f9c0 	bl	8006f56 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	f7fe fb5c 	bl	8006294 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007bdc:	4818      	ldr	r0, [pc, #96]	@ (8007c40 <RadioSetRxGenericConfig+0x380>)
 8007bde:	f000 ff7d 	bl	8008adc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007be2:	4818      	ldr	r0, [pc, #96]	@ (8007c44 <RadioSetRxGenericConfig+0x384>)
 8007be4:	f001 f84c 	bl	8008c80 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8007be8:	4b14      	ldr	r3, [pc, #80]	@ (8007c3c <RadioSetRxGenericConfig+0x37c>)
 8007bea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d10d      	bne.n	8007c0e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007bf2:	f240 7036 	movw	r0, #1846	@ 0x736
 8007bf6:	f001 f99f 	bl	8008f38 <SUBGRF_ReadRegister>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f023 0304 	bic.w	r3, r3, #4
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	4619      	mov	r1, r3
 8007c04:	f240 7036 	movw	r0, #1846	@ 0x736
 8007c08:	f001 f982 	bl	8008f10 <SUBGRF_WriteRegister>
 8007c0c:	e00c      	b.n	8007c28 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8007c0e:	f240 7036 	movw	r0, #1846	@ 0x736
 8007c12:	f001 f991 	bl	8008f38 <SUBGRF_ReadRegister>
 8007c16:	4603      	mov	r3, r0
 8007c18:	f043 0304 	orr.w	r3, r3, #4
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	4619      	mov	r1, r3
 8007c20:	f240 7036 	movw	r0, #1846	@ 0x736
 8007c24:	f001 f974 	bl	8008f10 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8007c28:	4b04      	ldr	r3, [pc, #16]	@ (8007c3c <RadioSetRxGenericConfig+0x37c>)
 8007c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c2e:	609a      	str	r2, [r3, #8]
        break;
 8007c30:	bf00      	nop
    }
    return status;
 8007c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3730      	adds	r7, #48	@ 0x30
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000368 	.word	0x20000368
 8007c40:	200003a0 	.word	0x200003a0
 8007c44:	20000376 	.word	0x20000376

08007c48 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08e      	sub	sp, #56	@ 0x38
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607b      	str	r3, [r7, #4]
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]
 8007c56:	4613      	mov	r3, r2
 8007c58:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c5e:	2300      	movs	r3, #0
 8007c60:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8007c62:	f001 fc3c 	bl	80094de <RFW_DeInit>
    switch( modem )
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	f200 8204 	bhi.w	8008076 <RadioSetTxGenericConfig+0x42e>
 8007c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <RadioSetTxGenericConfig+0x2c>)
 8007c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c74:	08007df9 	.word	0x08007df9
 8007c78:	08007f41 	.word	0x08007f41
 8007c7c:	08008039 	.word	0x08008039
 8007c80:	08007c85 	.word	0x08007c85
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	7c9b      	ldrb	r3, [r3, #18]
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	d902      	bls.n	8007c92 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8007c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c90:	e206      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6899      	ldr	r1, [r3, #8]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	7c9b      	ldrb	r3, [r3, #18]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 fdb3 	bl	800980c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb2:	e1f5      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d813      	bhi.n	8007ce8 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8007cc6:	4b99      	ldr	r3, [pc, #612]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007cc8:	2203      	movs	r2, #3
 8007cca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8007ccc:	4b97      	ldr	r3, [pc, #604]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007cce:	2203      	movs	r2, #3
 8007cd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a94      	ldr	r2, [pc, #592]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007cda:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	7cda      	ldrb	r2, [r3, #19]
 8007ce0:	4b92      	ldr	r3, [pc, #584]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007ce2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ce6:	e017      	b.n	8007d18 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007cee:	4b8f      	ldr	r3, [pc, #572]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007cf4:	4b8d      	ldr	r3, [pc, #564]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a8a      	ldr	r2, [pc, #552]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d02:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	7cda      	ldrb	r2, [r3, #19]
 8007d08:	4b88      	ldr	r3, [pc, #544]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	089b      	lsrs	r3, r3, #2
 8007d14:	4a85      	ldr	r2, [pc, #532]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d16:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	4b82      	ldr	r3, [pc, #520]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d24:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007d26:	4b81      	ldr	r3, [pc, #516]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d28:	2204      	movs	r2, #4
 8007d2a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	7c9b      	ldrb	r3, [r3, #18]
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	4b7d      	ldr	r3, [pc, #500]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d36:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007d38:	4b7c      	ldr	r3, [pc, #496]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	7d9b      	ldrb	r3, [r3, #22]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d003      	beq.n	8007d4e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	7d1b      	ldrb	r3, [r3, #20]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d12b      	bne.n	8007da6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	7d5b      	ldrb	r3, [r3, #21]
 8007d52:	2bf1      	cmp	r3, #241	@ 0xf1
 8007d54:	d00a      	beq.n	8007d6c <RadioSetTxGenericConfig+0x124>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	7d5b      	ldrb	r3, [r3, #21]
 8007d5a:	2bf2      	cmp	r3, #242	@ 0xf2
 8007d5c:	d006      	beq.n	8007d6c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	7d5b      	ldrb	r3, [r3, #21]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d002      	beq.n	8007d6c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6a:	e199      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007d76:	4b6e      	ldr	r3, [pc, #440]	@ (8007f30 <RadioSetTxGenericConfig+0x2e8>)
 8007d78:	6819      	ldr	r1, [r3, #0]
 8007d7a:	f107 0320 	add.w	r3, r7, #32
 8007d7e:	4a6d      	ldr	r2, [pc, #436]	@ (8007f34 <RadioSetTxGenericConfig+0x2ec>)
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fb9f 	bl	80094c4 <RFW_Init>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8007d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d90:	e186      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007d92:	4b66      	ldr	r3, [pc, #408]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007d98:	4b64      	ldr	r3, [pc, #400]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007d9e:	4b63      	ldr	r3, [pc, #396]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	755a      	strb	r2, [r3, #21]
        {
 8007da4:	e00b      	b.n	8007dbe <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	7d5a      	ldrb	r2, [r3, #21]
 8007daa:	4b60      	ldr	r3, [pc, #384]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007dac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	7d9a      	ldrb	r2, [r3, #22]
 8007db2:	4b5e      	ldr	r3, [pc, #376]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007db4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	7d1a      	ldrb	r2, [r3, #20]
 8007dba:	4b5c      	ldr	r3, [pc, #368]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007dbc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8007dbe:	f7ff f8ca 	bl	8006f56 <RadioStandby>
        RadioSetModem( radio_modem );
 8007dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fe fa64 	bl	8006294 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007dcc:	485a      	ldr	r0, [pc, #360]	@ (8007f38 <RadioSetTxGenericConfig+0x2f0>)
 8007dce:	f000 fe85 	bl	8008adc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007dd2:	485a      	ldr	r0, [pc, #360]	@ (8007f3c <RadioSetTxGenericConfig+0x2f4>)
 8007dd4:	f000 ff54 	bl	8008c80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007dd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 fa18 	bl	8008212 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	8a1b      	ldrh	r3, [r3, #16]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fa62 	bl	80082b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	899b      	ldrh	r3, [r3, #12]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fa3d 	bl	8008270 <SUBGRF_SetCrcPolynomial>
        break;
 8007df6:	e13f      	b.n	8008078 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295
 8007e04:	e14c      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	7c9b      	ldrb	r3, [r3, #18]
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d902      	bls.n	8007e14 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8007e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e12:	e145      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	6899      	ldr	r1, [r3, #8]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	7c9b      	ldrb	r3, [r3, #18]
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007e22:	4618      	mov	r0, r3
 8007e24:	f001 fcf2 	bl	800980c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007e28:	4b40      	ldr	r3, [pc, #256]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a3d      	ldr	r2, [pc, #244]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e36:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	7cda      	ldrb	r2, [r3, #19]
 8007e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	4a39      	ldr	r2, [pc, #228]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e48:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007e4a:	4b38      	ldr	r3, [pc, #224]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	4b34      	ldr	r3, [pc, #208]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e5c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8007e5e:	4b33      	ldr	r3, [pc, #204]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e60:	2204      	movs	r2, #4
 8007e62:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	7c9b      	ldrb	r3, [r3, #18]
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e6e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8007e70:	4b2e      	ldr	r3, [pc, #184]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	7d9b      	ldrb	r3, [r3, #22]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d003      	beq.n	8007e86 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	7d1b      	ldrb	r3, [r3, #20]
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d12a      	bne.n	8007edc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	7d5b      	ldrb	r3, [r3, #21]
 8007e8a:	2bf1      	cmp	r3, #241	@ 0xf1
 8007e8c:	d00a      	beq.n	8007ea4 <RadioSetTxGenericConfig+0x25c>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	7d5b      	ldrb	r3, [r3, #21]
 8007e92:	2bf2      	cmp	r3, #242	@ 0xf2
 8007e94:	d006      	beq.n	8007ea4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	7d5b      	ldrb	r3, [r3, #21]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d002      	beq.n	8007ea4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8007e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea2:	e0fd      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8007eac:	4b20      	ldr	r3, [pc, #128]	@ (8007f30 <RadioSetTxGenericConfig+0x2e8>)
 8007eae:	6819      	ldr	r1, [r3, #0]
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8007f34 <RadioSetTxGenericConfig+0x2ec>)
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 fb04 	bl	80094c4 <RFW_Init>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d002      	beq.n	8007ec8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec6:	e0eb      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8007ec8:	4b18      	ldr	r3, [pc, #96]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8007ece:	4b17      	ldr	r3, [pc, #92]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8007ed4:	4b15      	ldr	r3, [pc, #84]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	755a      	strb	r2, [r3, #21]
        {
 8007eda:	e00b      	b.n	8007ef4 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	7d5a      	ldrb	r2, [r3, #21]
 8007ee0:	4b12      	ldr	r3, [pc, #72]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007ee2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	7d9a      	ldrb	r2, [r3, #22]
 8007ee8:	4b10      	ldr	r3, [pc, #64]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007eea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	7d1a      	ldrb	r2, [r3, #20]
 8007ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8007f2c <RadioSetTxGenericConfig+0x2e4>)
 8007ef2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8007ef4:	f7ff f82f 	bl	8006f56 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8007ef8:	2000      	movs	r0, #0
 8007efa:	f7fe f9cb 	bl	8006294 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007efe:	480e      	ldr	r0, [pc, #56]	@ (8007f38 <RadioSetTxGenericConfig+0x2f0>)
 8007f00:	f000 fdec 	bl	8008adc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007f04:	480d      	ldr	r0, [pc, #52]	@ (8007f3c <RadioSetTxGenericConfig+0x2f4>)
 8007f06:	f000 febb 	bl	8008c80 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8007f0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f97f 	bl	8008212 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	8a1b      	ldrh	r3, [r3, #16]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 f9c9 	bl	80082b0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	899b      	ldrh	r3, [r3, #12]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 f9a4 	bl	8008270 <SUBGRF_SetCrcPolynomial>
        break;
 8007f28:	e0a6      	b.n	8008078 <RadioSetTxGenericConfig+0x430>
 8007f2a:	bf00      	nop
 8007f2c:	20000368 	.word	0x20000368
 8007f30:	20000364 	.word	0x20000364
 8007f34:	200003c4 	.word	0x200003c4
 8007f38:	200003a0 	.word	0x200003a0
 8007f3c:	20000376 	.word	0x20000376
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007f40:	4b59      	ldr	r3, [pc, #356]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	4b56      	ldr	r3, [pc, #344]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	785a      	ldrb	r2, [r3, #1]
 8007f56:	4b54      	ldr	r3, [pc, #336]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	789a      	ldrb	r2, [r3, #2]
 8007f60:	4b51      	ldr	r3, [pc, #324]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007f62:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	78db      	ldrb	r3, [r3, #3]
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d010      	beq.n	8007f90 <RadioSetTxGenericConfig+0x348>
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	dc20      	bgt.n	8007fb4 <RadioSetTxGenericConfig+0x36c>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <RadioSetTxGenericConfig+0x334>
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d005      	beq.n	8007f86 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8007f7a:	e01b      	b.n	8007fb4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007f84:	e017      	b.n	8007fb6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007f86:	4b48      	ldr	r3, [pc, #288]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007f8e:	e012      	b.n	8007fb6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d003      	beq.n	8007fa0 <RadioSetTxGenericConfig+0x358>
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b0c      	cmp	r3, #12
 8007f9e:	d104      	bne.n	8007faa <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8007fa0:	4b41      	ldr	r3, [pc, #260]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007fa8:	e005      	b.n	8007fb6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8007faa:	4b3f      	ldr	r3, [pc, #252]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8007fb2:	e000      	b.n	8007fb6 <RadioSetTxGenericConfig+0x36e>
            break;
 8007fb4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007fb8:	2201      	movs	r2, #1
 8007fba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	889a      	ldrh	r2, [r3, #4]
 8007fc0:	4b39      	ldr	r3, [pc, #228]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007fc2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	799a      	ldrb	r2, [r3, #6]
 8007fc8:	4b37      	ldr	r3, [pc, #220]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007fca:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	79da      	ldrb	r2, [r3, #7]
 8007fd0:	4b35      	ldr	r3, [pc, #212]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007fd2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	7a1a      	ldrb	r2, [r3, #8]
 8007fda:	4b33      	ldr	r3, [pc, #204]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 8007fe0:	f7fe ffb9 	bl	8006f56 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	f7fe f955 	bl	8006294 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007fea:	4830      	ldr	r0, [pc, #192]	@ (80080ac <RadioSetTxGenericConfig+0x464>)
 8007fec:	f000 fd76 	bl	8008adc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ff0:	482f      	ldr	r0, [pc, #188]	@ (80080b0 <RadioSetTxGenericConfig+0x468>)
 8007ff2:	f000 fe45 	bl	8008c80 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8007ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8007ff8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ffc:	2b06      	cmp	r3, #6
 8007ffe:	d10d      	bne.n	800801c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008000:	f640 0089 	movw	r0, #2185	@ 0x889
 8008004:	f000 ff98 	bl	8008f38 <SUBGRF_ReadRegister>
 8008008:	4603      	mov	r3, r0
 800800a:	f023 0304 	bic.w	r3, r3, #4
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	f640 0089 	movw	r0, #2185	@ 0x889
 8008016:	f000 ff7b 	bl	8008f10 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800801a:	e02d      	b.n	8008078 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800801c:	f640 0089 	movw	r0, #2185	@ 0x889
 8008020:	f000 ff8a 	bl	8008f38 <SUBGRF_ReadRegister>
 8008024:	4603      	mov	r3, r0
 8008026:	f043 0304 	orr.w	r3, r3, #4
 800802a:	b2db      	uxtb	r3, r3
 800802c:	4619      	mov	r1, r3
 800802e:	f640 0089 	movw	r0, #2185	@ 0x889
 8008032:	f000 ff6d 	bl	8008f10 <SUBGRF_WriteRegister>
        break;
 8008036:	e01f      	b.n	8008078 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <RadioSetTxGenericConfig+0x402>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008048:	d902      	bls.n	8008050 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800804a:	f04f 33ff 	mov.w	r3, #4294967295
 800804e:	e027      	b.n	80080a0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8008050:	2003      	movs	r0, #3
 8008052:	f7fe f91f 	bl	8006294 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008056:	4b14      	ldr	r3, [pc, #80]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8008058:	2202      	movs	r2, #2
 800805a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a11      	ldr	r2, [pc, #68]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8008064:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008066:	4b10      	ldr	r3, [pc, #64]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8008068:	2216      	movs	r2, #22
 800806a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800806e:	480f      	ldr	r0, [pc, #60]	@ (80080ac <RadioSetTxGenericConfig+0x464>)
 8008070:	f000 fd34 	bl	8008adc <SUBGRF_SetModulationParams>
        break;
 8008074:	e000      	b.n	8008078 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8008076:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800807c:	4618      	mov	r0, r3
 800807e:	f001 f863 	bl	8009148 <SUBGRF_SetRfTxPower>
 8008082:	4603      	mov	r3, r0
 8008084:	461a      	mov	r2, r3
 8008086:	4b08      	ldr	r3, [pc, #32]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 8008088:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800808c:	4b06      	ldr	r3, [pc, #24]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 800808e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8008092:	4618      	mov	r0, r3
 8008094:	f001 fa37 	bl	8009506 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008098:	4a03      	ldr	r2, [pc, #12]	@ (80080a8 <RadioSetTxGenericConfig+0x460>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6053      	str	r3, [r2, #4]
    return 0;
 800809e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3738      	adds	r7, #56	@ 0x38
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000368 	.word	0x20000368
 80080ac:	200003a0 	.word	0x200003a0
 80080b0:	20000376 	.word	0x20000376

080080b4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr

080080cc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 80080d6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr
	...

080080e4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80080f2:	4a1d      	ldr	r2, [pc, #116]	@ (8008168 <SUBGRF_Init+0x84>)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80080f8:	f7f8 fbc6 	bl	8000888 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80080fc:	2002      	movs	r0, #2
 80080fe:	f001 f8ff 	bl	8009300 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008102:	4b1a      	ldr	r3, [pc, #104]	@ (800816c <SUBGRF_Init+0x88>)
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008108:	2000      	movs	r0, #0
 800810a:	f000 f97d 	bl	8008408 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800810e:	f001 fb52 	bl	80097b6 <RBI_IsTCXO>
 8008112:	4603      	mov	r3, r0
 8008114:	2b01      	cmp	r3, #1
 8008116:	d10e      	bne.n	8008136 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8008118:	2140      	movs	r1, #64	@ 0x40
 800811a:	2001      	movs	r0, #1
 800811c:	f000 fb82 	bl	8008824 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008120:	2100      	movs	r1, #0
 8008122:	f640 1011 	movw	r0, #2321	@ 0x911
 8008126:	f000 fef3 	bl	8008f10 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800812a:	237f      	movs	r3, #127	@ 0x7f
 800812c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800812e:	7b38      	ldrb	r0, [r7, #12]
 8008130:	f000 fa8b 	bl	800864a <SUBGRF_Calibrate>
 8008134:	e009      	b.n	800814a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008136:	2120      	movs	r1, #32
 8008138:	f640 1011 	movw	r0, #2321	@ 0x911
 800813c:	f000 fee8 	bl	8008f10 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008140:	2120      	movs	r1, #32
 8008142:	f640 1012 	movw	r0, #2322	@ 0x912
 8008146:	f000 fee3 	bl	8008f10 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800814a:	210e      	movs	r1, #14
 800814c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8008150:	f000 fede 	bl	8008f10 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8008154:	f001 fa86 	bl	8009664 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8008158:	4b05      	ldr	r3, [pc, #20]	@ (8008170 <SUBGRF_Init+0x8c>)
 800815a:	2201      	movs	r2, #1
 800815c:	701a      	strb	r2, [r3, #0]
}
 800815e:	bf00      	nop
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000400 	.word	0x20000400
 800816c:	200003fc 	.word	0x200003fc
 8008170:	200003f4 	.word	0x200003f4

08008174 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008178:	4b02      	ldr	r3, [pc, #8]	@ (8008184 <SUBGRF_GetOperatingMode+0x10>)
 800817a:	781b      	ldrb	r3, [r3, #0]
}
 800817c:	4618      	mov	r0, r3
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr
 8008184:	200003f4 	.word	0x200003f4

08008188 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	461a      	mov	r2, r3
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	2000      	movs	r0, #0
 800819c:	f000 ff24 	bl	8008fe8 <SUBGRF_WriteBuffer>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80081ba:	f107 0317 	add.w	r3, r7, #23
 80081be:	4619      	mov	r1, r3
 80081c0:	68b8      	ldr	r0, [r7, #8]
 80081c2:	f000 fe27 	bl	8008e14 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	79fa      	ldrb	r2, [r7, #7]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d201      	bcs.n	80081d4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e007      	b.n	80081e4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80081d4:	7df8      	ldrb	r0, [r7, #23]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	68f9      	ldr	r1, [r7, #12]
 80081de:	f000 ff25 	bl	800902c <SUBGRF_ReadBuffer>

    return 0;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	460b      	mov	r3, r1
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	4619      	mov	r1, r3
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f7ff ffc2 	bl	8008188 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f91b 	bl	8008440 <SUBGRF_SetTx>
}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b082      	sub	sp, #8
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800821a:	2208      	movs	r2, #8
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8008222:	f000 fe9d 	bl	8008f60 <SUBGRF_WriteRegisters>
    return 0;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	4603      	mov	r3, r0
 8008238:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800823a:	88fb      	ldrh	r3, [r7, #6]
 800823c:	0a1b      	lsrs	r3, r3, #8
 800823e:	b29b      	uxth	r3, r3
 8008240:	b2db      	uxtb	r3, r3
 8008242:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008244:	88fb      	ldrh	r3, [r7, #6]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800824a:	f000 fb6f 	bl	800892c <SUBGRF_GetPacketType>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d108      	bne.n	8008266 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	2202      	movs	r2, #2
 800825a:	4619      	mov	r1, r3
 800825c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8008260:	f000 fe7e 	bl	8008f60 <SUBGRF_WriteRegisters>
            break;
 8008264:	e000      	b.n	8008268 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8008266:	bf00      	nop
    }
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	0a1b      	lsrs	r3, r3, #8
 800827e:	b29b      	uxth	r3, r3
 8008280:	b2db      	uxtb	r3, r3
 8008282:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800828a:	f000 fb4f 	bl	800892c <SUBGRF_GetPacketType>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d108      	bne.n	80082a6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008294:	f107 030c 	add.w	r3, r7, #12
 8008298:	2202      	movs	r2, #2
 800829a:	4619      	mov	r1, r3
 800829c:	f240 60be 	movw	r0, #1726	@ 0x6be
 80082a0:	f000 fe5e 	bl	8008f60 <SUBGRF_WriteRegisters>
            break;
 80082a4:	e000      	b.n	80082a8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80082a6:	bf00      	nop
    }
}
 80082a8:	bf00      	nop
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80082be:	f000 fb35 	bl	800892c <SUBGRF_GetPacketType>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d121      	bne.n	800830c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80082c8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80082cc:	f000 fe34 	bl	8008f38 <SUBGRF_ReadRegister>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f023 0301 	bic.w	r3, r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80082d8:	88fb      	ldrh	r3, [r7, #6]
 80082da:	0a1b      	lsrs	r3, r3, #8
 80082dc:	b29b      	uxth	r3, r3
 80082de:	b25b      	sxtb	r3, r3
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	b25a      	sxtb	r2, r3
 80082e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	b25b      	sxtb	r3, r3
 80082ee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	4619      	mov	r1, r3
 80082f4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80082f8:	f000 fe0a 	bl	8008f10 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	4619      	mov	r1, r3
 8008302:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8008306:	f000 fe03 	bl	8008f10 <SUBGRF_WriteRegister>
            break;
 800830a:	e000      	b.n	800830e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800830c:	bf00      	nop
    }
}
 800830e:	bf00      	nop
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8008328:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800832c:	f000 fe04 	bl	8008f38 <SUBGRF_ReadRegister>
 8008330:	4603      	mov	r3, r0
 8008332:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	f023 0301 	bic.w	r3, r3, #1
 800833a:	b2db      	uxtb	r3, r3
 800833c:	4619      	mov	r1, r3
 800833e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8008342:	f000 fde5 	bl	8008f10 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008346:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800834a:	f000 fdf5 	bl	8008f38 <SUBGRF_ReadRegister>
 800834e:	4603      	mov	r3, r0
 8008350:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008352:	79bb      	ldrb	r3, [r7, #6]
 8008354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008358:	b2db      	uxtb	r3, r3
 800835a:	4619      	mov	r1, r3
 800835c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008360:	f000 fdd6 	bl	8008f10 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008364:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008368:	f000 f88a 	bl	8008480 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800836c:	463b      	mov	r3, r7
 800836e:	2204      	movs	r2, #4
 8008370:	4619      	mov	r1, r3
 8008372:	f640 0019 	movw	r0, #2073	@ 0x819
 8008376:	f000 fe15 	bl	8008fa4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800837a:	2000      	movs	r0, #0
 800837c:	f000 f844 	bl	8008408 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	4619      	mov	r1, r3
 8008384:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8008388:	f000 fdc2 	bl	8008f10 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800838c:	79bb      	ldrb	r3, [r7, #6]
 800838e:	4619      	mov	r1, r3
 8008390:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8008394:	f000 fdbc 	bl	8008f10 <SUBGRF_WriteRegister>

    return number;
 8008398:	683b      	ldr	r3, [r7, #0]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80083ac:	2000      	movs	r0, #0
 80083ae:	f001 f999 	bl	80096e4 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80083b2:	2002      	movs	r0, #2
 80083b4:	f000 ffa4 	bl	8009300 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80083b8:	793b      	ldrb	r3, [r7, #4]
 80083ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80083c4:	793b      	ldrb	r3, [r7, #4]
 80083c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80083ce:	b25b      	sxtb	r3, r3
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80083d4:	793b      	ldrb	r3, [r7, #4]
 80083d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80083de:	4313      	orrs	r3, r2
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80083e4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80083e6:	f107 030f 	add.w	r3, r7, #15
 80083ea:	2201      	movs	r2, #1
 80083ec:	4619      	mov	r1, r3
 80083ee:	2084      	movs	r0, #132	@ 0x84
 80083f0:	f000 fe3e 	bl	8009070 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80083f4:	4b03      	ldr	r3, [pc, #12]	@ (8008404 <SUBGRF_SetSleep+0x60>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	200003f4 	.word	0x200003f4

08008408 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008412:	1dfb      	adds	r3, r7, #7
 8008414:	2201      	movs	r2, #1
 8008416:	4619      	mov	r1, r3
 8008418:	2080      	movs	r0, #128	@ 0x80
 800841a:	f000 fe29 	bl	8009070 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d103      	bne.n	800842c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008424:	4b05      	ldr	r3, [pc, #20]	@ (800843c <SUBGRF_SetStandby+0x34>)
 8008426:	2201      	movs	r2, #1
 8008428:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800842a:	e002      	b.n	8008432 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800842c:	4b03      	ldr	r3, [pc, #12]	@ (800843c <SUBGRF_SetStandby+0x34>)
 800842e:	2202      	movs	r2, #2
 8008430:	701a      	strb	r2, [r3, #0]
}
 8008432:	bf00      	nop
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	200003f4 	.word	0x200003f4

08008440 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008448:	4b0c      	ldr	r3, [pc, #48]	@ (800847c <SUBGRF_SetTx+0x3c>)
 800844a:	2204      	movs	r2, #4
 800844c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	0c1b      	lsrs	r3, r3, #16
 8008452:	b2db      	uxtb	r3, r3
 8008454:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	0a1b      	lsrs	r3, r3, #8
 800845a:	b2db      	uxtb	r3, r3
 800845c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	b2db      	uxtb	r3, r3
 8008462:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008464:	f107 030c 	add.w	r3, r7, #12
 8008468:	2203      	movs	r2, #3
 800846a:	4619      	mov	r1, r3
 800846c:	2083      	movs	r0, #131	@ 0x83
 800846e:	f000 fdff 	bl	8009070 <SUBGRF_WriteCommand>
}
 8008472:	bf00      	nop
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	200003f4 	.word	0x200003f4

08008480 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008488:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <SUBGRF_SetRx+0x3c>)
 800848a:	2205      	movs	r2, #5
 800848c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	0c1b      	lsrs	r3, r3, #16
 8008492:	b2db      	uxtb	r3, r3
 8008494:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	0a1b      	lsrs	r3, r3, #8
 800849a:	b2db      	uxtb	r3, r3
 800849c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80084a4:	f107 030c 	add.w	r3, r7, #12
 80084a8:	2203      	movs	r2, #3
 80084aa:	4619      	mov	r1, r3
 80084ac:	2082      	movs	r0, #130	@ 0x82
 80084ae:	f000 fddf 	bl	8009070 <SUBGRF_WriteCommand>
}
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	200003f4 	.word	0x200003f4

080084c0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80084c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008504 <SUBGRF_SetRxBoosted+0x44>)
 80084ca:	2205      	movs	r2, #5
 80084cc:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80084ce:	2197      	movs	r1, #151	@ 0x97
 80084d0:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80084d4:	f000 fd1c 	bl	8008f10 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	0c1b      	lsrs	r3, r3, #16
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	0a1b      	lsrs	r3, r3, #8
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80084ee:	f107 030c 	add.w	r3, r7, #12
 80084f2:	2203      	movs	r2, #3
 80084f4:	4619      	mov	r1, r3
 80084f6:	2082      	movs	r0, #130	@ 0x82
 80084f8:	f000 fdba 	bl	8009070 <SUBGRF_WriteCommand>
}
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	200003f4 	.word	0x200003f4

08008508 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	0c1b      	lsrs	r3, r3, #16
 8008516:	b2db      	uxtb	r3, r3
 8008518:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	0a1b      	lsrs	r3, r3, #8
 800851e:	b2db      	uxtb	r3, r3
 8008520:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	b2db      	uxtb	r3, r3
 8008526:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	0c1b      	lsrs	r3, r3, #16
 800852c:	b2db      	uxtb	r3, r3
 800852e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	b2db      	uxtb	r3, r3
 8008536:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800853e:	f107 0308 	add.w	r3, r7, #8
 8008542:	2206      	movs	r2, #6
 8008544:	4619      	mov	r1, r3
 8008546:	2094      	movs	r0, #148	@ 0x94
 8008548:	f000 fd92 	bl	8009070 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800854c:	4b03      	ldr	r3, [pc, #12]	@ (800855c <SUBGRF_SetRxDutyCycle+0x54>)
 800854e:	2206      	movs	r2, #6
 8008550:	701a      	strb	r2, [r3, #0]
}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200003f4 	.word	0x200003f4

08008560 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8008564:	2200      	movs	r2, #0
 8008566:	2100      	movs	r1, #0
 8008568:	20c5      	movs	r0, #197	@ 0xc5
 800856a:	f000 fd81 	bl	8009070 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800856e:	4b02      	ldr	r3, [pc, #8]	@ (8008578 <SUBGRF_SetCad+0x18>)
 8008570:	2207      	movs	r2, #7
 8008572:	701a      	strb	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	bd80      	pop	{r7, pc}
 8008578:	200003f4 	.word	0x200003f4

0800857c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8008580:	2200      	movs	r2, #0
 8008582:	2100      	movs	r1, #0
 8008584:	20d1      	movs	r0, #209	@ 0xd1
 8008586:	f000 fd73 	bl	8009070 <SUBGRF_WriteCommand>
}
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}

0800858e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800858e:	b580      	push	{r7, lr}
 8008590:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8008592:	2200      	movs	r2, #0
 8008594:	2100      	movs	r1, #0
 8008596:	20d2      	movs	r0, #210	@ 0xd2
 8008598:	f000 fd6a 	bl	8009070 <SUBGRF_WriteCommand>
}
 800859c:	bf00      	nop
 800859e:	bd80      	pop	{r7, pc}

080085a0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	4603      	mov	r3, r0
 80085a8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80085aa:	1dfb      	adds	r3, r7, #7
 80085ac:	2201      	movs	r2, #1
 80085ae:	4619      	mov	r1, r3
 80085b0:	209f      	movs	r0, #159	@ 0x9f
 80085b2:	f000 fd5d 	bl	8009070 <SUBGRF_WriteCommand>
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	4603      	mov	r3, r0
 80085c6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80085c8:	1dfb      	adds	r3, r7, #7
 80085ca:	2201      	movs	r2, #1
 80085cc:	4619      	mov	r1, r3
 80085ce:	20a0      	movs	r0, #160	@ 0xa0
 80085d0:	f000 fd4e 	bl	8009070 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80085d8:	d91c      	bls.n	8008614 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	085b      	lsrs	r3, r3, #1
 80085de:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80085e8:	e005      	b.n	80085f6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
 80085ec:	089b      	lsrs	r3, r3, #2
 80085ee:	73fb      	strb	r3, [r7, #15]
            exp++;
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	3301      	adds	r3, #1
 80085f4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	2b1f      	cmp	r3, #31
 80085fa:	d8f6      	bhi.n	80085ea <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	b2da      	uxtb	r2, r3
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	4413      	add	r3, r2
 8008606:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8008608:	7b7b      	ldrb	r3, [r7, #13]
 800860a:	4619      	mov	r1, r3
 800860c:	f240 7006 	movw	r0, #1798	@ 0x706
 8008610:	f000 fc7e 	bl	8008f10 <SUBGRF_WriteRegister>
    }
}
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8008622:	f001 f8d3 	bl	80097cc <RBI_IsDCDC>
 8008626:	4603      	mov	r3, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d102      	bne.n	8008632 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800862c:	2301      	movs	r3, #1
 800862e:	71fb      	strb	r3, [r7, #7]
 8008630:	e001      	b.n	8008636 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8008632:	2300      	movs	r3, #0
 8008634:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8008636:	1dfb      	adds	r3, r7, #7
 8008638:	2201      	movs	r2, #1
 800863a:	4619      	mov	r1, r3
 800863c:	2096      	movs	r0, #150	@ 0x96
 800863e:	f000 fd17 	bl	8009070 <SUBGRF_WriteCommand>
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008652:	793b      	ldrb	r3, [r7, #4]
 8008654:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008658:	b2db      	uxtb	r3, r3
 800865a:	019b      	lsls	r3, r3, #6
 800865c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800865e:	793b      	ldrb	r3, [r7, #4]
 8008660:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8008664:	b2db      	uxtb	r3, r3
 8008666:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8008668:	b25b      	sxtb	r3, r3
 800866a:	4313      	orrs	r3, r2
 800866c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800866e:	793b      	ldrb	r3, [r7, #4]
 8008670:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008674:	b2db      	uxtb	r3, r3
 8008676:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8008678:	b25b      	sxtb	r3, r3
 800867a:	4313      	orrs	r3, r2
 800867c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800867e:	793b      	ldrb	r3, [r7, #4]
 8008680:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008684:	b2db      	uxtb	r3, r3
 8008686:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8008688:	b25b      	sxtb	r3, r3
 800868a:	4313      	orrs	r3, r2
 800868c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800868e:	793b      	ldrb	r3, [r7, #4]
 8008690:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008694:	b2db      	uxtb	r3, r3
 8008696:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8008698:	b25b      	sxtb	r3, r3
 800869a:	4313      	orrs	r3, r2
 800869c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800869e:	793b      	ldrb	r3, [r7, #4]
 80086a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80086a8:	b25b      	sxtb	r3, r3
 80086aa:	4313      	orrs	r3, r2
 80086ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80086ae:	793b      	ldrb	r3, [r7, #4]
 80086b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80086b8:	4313      	orrs	r3, r2
 80086ba:	b25b      	sxtb	r3, r3
 80086bc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80086be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80086c0:	f107 030f 	add.w	r3, r7, #15
 80086c4:	2201      	movs	r2, #1
 80086c6:	4619      	mov	r1, r3
 80086c8:	2089      	movs	r0, #137	@ 0x89
 80086ca:	f000 fcd1 	bl	8009070 <SUBGRF_WriteCommand>
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008758 <SUBGRF_CalibrateImage+0x80>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d904      	bls.n	80086f2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80086e8:	23e1      	movs	r3, #225	@ 0xe1
 80086ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80086ec:	23e9      	movs	r3, #233	@ 0xe9
 80086ee:	737b      	strb	r3, [r7, #13]
 80086f0:	e027      	b.n	8008742 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a19      	ldr	r2, [pc, #100]	@ (800875c <SUBGRF_CalibrateImage+0x84>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d904      	bls.n	8008704 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80086fa:	23d7      	movs	r3, #215	@ 0xd7
 80086fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80086fe:	23db      	movs	r3, #219	@ 0xdb
 8008700:	737b      	strb	r3, [r7, #13]
 8008702:	e01e      	b.n	8008742 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a16      	ldr	r2, [pc, #88]	@ (8008760 <SUBGRF_CalibrateImage+0x88>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d904      	bls.n	8008716 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800870c:	23c1      	movs	r3, #193	@ 0xc1
 800870e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8008710:	23c5      	movs	r3, #197	@ 0xc5
 8008712:	737b      	strb	r3, [r7, #13]
 8008714:	e015      	b.n	8008742 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a12      	ldr	r2, [pc, #72]	@ (8008764 <SUBGRF_CalibrateImage+0x8c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d904      	bls.n	8008728 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800871e:	2375      	movs	r3, #117	@ 0x75
 8008720:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8008722:	2381      	movs	r3, #129	@ 0x81
 8008724:	737b      	strb	r3, [r7, #13]
 8008726:	e00c      	b.n	8008742 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a0f      	ldr	r2, [pc, #60]	@ (8008768 <SUBGRF_CalibrateImage+0x90>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d904      	bls.n	800873a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8008730:	236b      	movs	r3, #107	@ 0x6b
 8008732:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8008734:	236f      	movs	r3, #111	@ 0x6f
 8008736:	737b      	strb	r3, [r7, #13]
 8008738:	e003      	b.n	8008742 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800873a:	2329      	movs	r3, #41	@ 0x29
 800873c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800873e:	232b      	movs	r3, #43	@ 0x2b
 8008740:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8008742:	f107 030c 	add.w	r3, r7, #12
 8008746:	2202      	movs	r2, #2
 8008748:	4619      	mov	r1, r3
 800874a:	2098      	movs	r0, #152	@ 0x98
 800874c:	f000 fc90 	bl	8009070 <SUBGRF_WriteCommand>
}
 8008750:	bf00      	nop
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	35a4e900 	.word	0x35a4e900
 800875c:	32a9f880 	.word	0x32a9f880
 8008760:	2de54480 	.word	0x2de54480
 8008764:	1b6b0b00 	.word	0x1b6b0b00
 8008768:	1954fc40 	.word	0x1954fc40

0800876c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800876c:	b590      	push	{r4, r7, lr}
 800876e:	b085      	sub	sp, #20
 8008770:	af00      	add	r7, sp, #0
 8008772:	4604      	mov	r4, r0
 8008774:	4608      	mov	r0, r1
 8008776:	4611      	mov	r1, r2
 8008778:	461a      	mov	r2, r3
 800877a:	4623      	mov	r3, r4
 800877c:	71fb      	strb	r3, [r7, #7]
 800877e:	4603      	mov	r3, r0
 8008780:	71bb      	strb	r3, [r7, #6]
 8008782:	460b      	mov	r3, r1
 8008784:	717b      	strb	r3, [r7, #5]
 8008786:	4613      	mov	r3, r2
 8008788:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800878e:	79bb      	ldrb	r3, [r7, #6]
 8008790:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8008792:	797b      	ldrb	r3, [r7, #5]
 8008794:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8008796:	793b      	ldrb	r3, [r7, #4]
 8008798:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800879a:	f107 030c 	add.w	r3, r7, #12
 800879e:	2204      	movs	r2, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	2095      	movs	r0, #149	@ 0x95
 80087a4:	f000 fc64 	bl	8009070 <SUBGRF_WriteCommand>
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd90      	pop	{r4, r7, pc}

080087b0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80087b0:	b590      	push	{r4, r7, lr}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	4611      	mov	r1, r2
 80087bc:	461a      	mov	r2, r3
 80087be:	4623      	mov	r3, r4
 80087c0:	80fb      	strh	r3, [r7, #6]
 80087c2:	4603      	mov	r3, r0
 80087c4:	80bb      	strh	r3, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	807b      	strh	r3, [r7, #2]
 80087ca:	4613      	mov	r3, r2
 80087cc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80087ce:	88fb      	ldrh	r3, [r7, #6]
 80087d0:	0a1b      	lsrs	r3, r3, #8
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80087d8:	88fb      	ldrh	r3, [r7, #6]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80087de:	88bb      	ldrh	r3, [r7, #4]
 80087e0:	0a1b      	lsrs	r3, r3, #8
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80087e8:	88bb      	ldrh	r3, [r7, #4]
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80087ee:	887b      	ldrh	r3, [r7, #2]
 80087f0:	0a1b      	lsrs	r3, r3, #8
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80087f8:	887b      	ldrh	r3, [r7, #2]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80087fe:	883b      	ldrh	r3, [r7, #0]
 8008800:	0a1b      	lsrs	r3, r3, #8
 8008802:	b29b      	uxth	r3, r3
 8008804:	b2db      	uxtb	r3, r3
 8008806:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8008808:	883b      	ldrh	r3, [r7, #0]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800880e:	f107 0308 	add.w	r3, r7, #8
 8008812:	2208      	movs	r2, #8
 8008814:	4619      	mov	r1, r3
 8008816:	2008      	movs	r0, #8
 8008818:	f000 fc2a 	bl	8009070 <SUBGRF_WriteCommand>
}
 800881c:	bf00      	nop
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	bd90      	pop	{r4, r7, pc}

08008824 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	6039      	str	r1, [r7, #0]
 800882e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8008830:	79fb      	ldrb	r3, [r7, #7]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	b2db      	uxtb	r3, r3
 8008838:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	0c1b      	lsrs	r3, r3, #16
 800883e:	b2db      	uxtb	r3, r3
 8008840:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	0a1b      	lsrs	r3, r3, #8
 8008846:	b2db      	uxtb	r3, r3
 8008848:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8008850:	f107 030c 	add.w	r3, r7, #12
 8008854:	2204      	movs	r2, #4
 8008856:	4619      	mov	r1, r3
 8008858:	2097      	movs	r0, #151	@ 0x97
 800885a:	f000 fc09 	bl	8009070 <SUBGRF_WriteCommand>
}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8008868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8008876:	4b1d      	ldr	r3, [pc, #116]	@ (80088ec <SUBGRF_SetRfFrequency+0x84>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	f083 0301 	eor.w	r3, r3, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff ff27 	bl	80086d8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800888a:	4b18      	ldr	r3, [pc, #96]	@ (80088ec <SUBGRF_SetRfFrequency+0x84>)
 800888c:	2201      	movs	r2, #1
 800888e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	461c      	mov	r4, r3
 8008896:	4615      	mov	r5, r2
 8008898:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800889c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80088a0:	4a13      	ldr	r2, [pc, #76]	@ (80088f0 <SUBGRF_SetRfFrequency+0x88>)
 80088a2:	f04f 0300 	mov.w	r3, #0
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	f7f7 fcb9 	bl	8000220 <__aeabi_uldivmod>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4613      	mov	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	0e1b      	lsrs	r3, r3, #24
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	0c1b      	lsrs	r3, r3, #16
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	0a1b      	lsrs	r3, r3, #8
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80088d4:	f107 0308 	add.w	r3, r7, #8
 80088d8:	2204      	movs	r2, #4
 80088da:	4619      	mov	r1, r3
 80088dc:	2086      	movs	r0, #134	@ 0x86
 80088de:	f000 fbc7 	bl	8009070 <SUBGRF_WriteCommand>
}
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80088ec:	200003fc 	.word	0x200003fc
 80088f0:	01e84800 	.word	0x01e84800

080088f4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80088fe:	79fa      	ldrb	r2, [r7, #7]
 8008900:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <SUBGRF_SetPacketType+0x34>)
 8008902:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8008904:	79fb      	ldrb	r3, [r7, #7]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d104      	bne.n	8008914 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800890a:	2100      	movs	r1, #0
 800890c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8008910:	f000 fafe 	bl	8008f10 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8008914:	1dfb      	adds	r3, r7, #7
 8008916:	2201      	movs	r2, #1
 8008918:	4619      	mov	r1, r3
 800891a:	208a      	movs	r0, #138	@ 0x8a
 800891c:	f000 fba8 	bl	8009070 <SUBGRF_WriteCommand>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	200003f5 	.word	0x200003f5

0800892c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
    return PacketType;
 8008930:	4b02      	ldr	r3, [pc, #8]	@ (800893c <SUBGRF_GetPacketType+0x10>)
 8008932:	781b      	ldrb	r3, [r3, #0]
}
 8008934:	4618      	mov	r0, r3
 8008936:	46bd      	mov	sp, r7
 8008938:	bc80      	pop	{r7}
 800893a:	4770      	bx	lr
 800893c:	200003f5 	.word	0x200003f5

08008940 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
 800894a:	460b      	mov	r3, r1
 800894c:	71bb      	strb	r3, [r7, #6]
 800894e:	4613      	mov	r3, r2
 8008950:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d149      	bne.n	80089ec <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8008958:	2000      	movs	r0, #0
 800895a:	f000 ff42 	bl	80097e2 <RBI_GetRFOMaxPowerConfig>
 800895e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8008960:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	429a      	cmp	r2, r3
 8008968:	da01      	bge.n	800896e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b0e      	cmp	r3, #14
 8008972:	d10e      	bne.n	8008992 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8008974:	2301      	movs	r3, #1
 8008976:	2201      	movs	r2, #1
 8008978:	2100      	movs	r1, #0
 800897a:	2004      	movs	r0, #4
 800897c:	f7ff fef6 	bl	800876c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008980:	79ba      	ldrb	r2, [r7, #6]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	b2db      	uxtb	r3, r3
 800898a:	330e      	adds	r3, #14
 800898c:	b2db      	uxtb	r3, r3
 800898e:	71bb      	strb	r3, [r7, #6]
 8008990:	e01f      	b.n	80089d2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b0a      	cmp	r3, #10
 8008996:	d10e      	bne.n	80089b6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8008998:	2301      	movs	r3, #1
 800899a:	2201      	movs	r2, #1
 800899c:	2100      	movs	r1, #0
 800899e:	2001      	movs	r0, #1
 80089a0:	f7ff fee4 	bl	800876c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80089a4:	79ba      	ldrb	r2, [r7, #6]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	330d      	adds	r3, #13
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	71bb      	strb	r3, [r7, #6]
 80089b4:	e00d      	b.n	80089d2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80089b6:	2301      	movs	r3, #1
 80089b8:	2201      	movs	r2, #1
 80089ba:	2100      	movs	r1, #0
 80089bc:	2007      	movs	r0, #7
 80089be:	f7ff fed5 	bl	800876c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80089c2:	79ba      	ldrb	r2, [r7, #6]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	330e      	adds	r3, #14
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80089d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80089d6:	f113 0f11 	cmn.w	r3, #17
 80089da:	da01      	bge.n	80089e0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80089dc:	23ef      	movs	r3, #239	@ 0xef
 80089de:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80089e0:	2118      	movs	r1, #24
 80089e2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80089e6:	f000 fa93 	bl	8008f10 <SUBGRF_WriteRegister>
 80089ea:	e067      	b.n	8008abc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80089ec:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80089f0:	f000 faa2 	bl	8008f38 <SUBGRF_ReadRegister>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f043 031e 	orr.w	r3, r3, #30
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	4619      	mov	r1, r3
 80089fe:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8008a02:	f000 fa85 	bl	8008f10 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8008a06:	2001      	movs	r0, #1
 8008a08:	f000 feeb 	bl	80097e2 <RBI_GetRFOMaxPowerConfig>
 8008a0c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8008a0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	da01      	bge.n	8008a1c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b14      	cmp	r3, #20
 8008a20:	d10e      	bne.n	8008a40 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8008a22:	2301      	movs	r3, #1
 8008a24:	2200      	movs	r2, #0
 8008a26:	2105      	movs	r1, #5
 8008a28:	2003      	movs	r0, #3
 8008a2a:	f7ff fe9f 	bl	800876c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008a2e:	79ba      	ldrb	r2, [r7, #6]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	3316      	adds	r3, #22
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	71bb      	strb	r3, [r7, #6]
 8008a3e:	e031      	b.n	8008aa4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b11      	cmp	r3, #17
 8008a44:	d10e      	bne.n	8008a64 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8008a46:	2301      	movs	r3, #1
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2103      	movs	r1, #3
 8008a4c:	2002      	movs	r0, #2
 8008a4e:	f7ff fe8d 	bl	800876c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008a52:	79ba      	ldrb	r2, [r7, #6]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	3316      	adds	r3, #22
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	71bb      	strb	r3, [r7, #6]
 8008a62:	e01f      	b.n	8008aa4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b0e      	cmp	r3, #14
 8008a68:	d10e      	bne.n	8008a88 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	2102      	movs	r1, #2
 8008a70:	2002      	movs	r0, #2
 8008a72:	f7ff fe7b 	bl	800876c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8008a76:	79ba      	ldrb	r2, [r7, #6]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	330e      	adds	r3, #14
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	71bb      	strb	r3, [r7, #6]
 8008a86:	e00d      	b.n	8008aa4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8008a88:	2301      	movs	r3, #1
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2107      	movs	r1, #7
 8008a8e:	2004      	movs	r0, #4
 8008a90:	f7ff fe6c 	bl	800876c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8008a94:	79ba      	ldrb	r2, [r7, #6]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	3316      	adds	r3, #22
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8008aa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008aa8:	f113 0f09 	cmn.w	r3, #9
 8008aac:	da01      	bge.n	8008ab2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8008aae:	23f7      	movs	r3, #247	@ 0xf7
 8008ab0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8008ab2:	2138      	movs	r1, #56	@ 0x38
 8008ab4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8008ab8:	f000 fa2a 	bl	8008f10 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8008abc:	79bb      	ldrb	r3, [r7, #6]
 8008abe:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8008ac0:	797b      	ldrb	r3, [r7, #5]
 8008ac2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8008ac4:	f107 0308 	add.w	r3, r7, #8
 8008ac8:	2202      	movs	r2, #2
 8008aca:	4619      	mov	r1, r3
 8008acc:	208e      	movs	r0, #142	@ 0x8e
 8008ace:	f000 facf 	bl	8009070 <SUBGRF_WriteCommand>
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8008adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008aea:	4a61      	ldr	r2, [pc, #388]	@ (8008c70 <SUBGRF_SetModulationParams+0x194>)
 8008aec:	f107 0308 	add.w	r3, r7, #8
 8008af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008af4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	4b5d      	ldr	r3, [pc, #372]	@ (8008c74 <SUBGRF_SetModulationParams+0x198>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d004      	beq.n	8008b0e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff fef3 	bl	80088f4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b03      	cmp	r3, #3
 8008b14:	f200 80a5 	bhi.w	8008c62 <SUBGRF_SetModulationParams+0x186>
 8008b18:	a201      	add	r2, pc, #4	@ (adr r2, 8008b20 <SUBGRF_SetModulationParams+0x44>)
 8008b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1e:	bf00      	nop
 8008b20:	08008b31 	.word	0x08008b31
 8008b24:	08008bf1 	.word	0x08008bf1
 8008b28:	08008bb3 	.word	0x08008bb3
 8008b2c:	08008c1f 	.word	0x08008c1f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8008b30:	2308      	movs	r3, #8
 8008b32:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	4a4f      	ldr	r2, [pc, #316]	@ (8008c78 <SUBGRF_SetModulationParams+0x19c>)
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	0c1b      	lsrs	r3, r3, #16
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7b1b      	ldrb	r3, [r3, #12]
 8008b5a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	7b5b      	ldrb	r3, [r3, #13]
 8008b60:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	2200      	movs	r2, #0
 8008b68:	461c      	mov	r4, r3
 8008b6a:	4615      	mov	r5, r2
 8008b6c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8008b70:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8008b74:	4a41      	ldr	r2, [pc, #260]	@ (8008c7c <SUBGRF_SetModulationParams+0x1a0>)
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fb4f 	bl	8000220 <__aeabi_uldivmod>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4613      	mov	r3, r2
 8008b88:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	0c1b      	lsrs	r3, r3, #16
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	0a1b      	lsrs	r3, r3, #8
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008ba0:	7cfb      	ldrb	r3, [r7, #19]
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	f107 0308 	add.w	r3, r7, #8
 8008ba8:	4619      	mov	r1, r3
 8008baa:	208b      	movs	r0, #139	@ 0x8b
 8008bac:	f000 fa60 	bl	8009070 <SUBGRF_WriteCommand>
        break;
 8008bb0:	e058      	b.n	8008c64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8008bb2:	2304      	movs	r3, #4
 8008bb4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	4a2f      	ldr	r2, [pc, #188]	@ (8008c78 <SUBGRF_SetModulationParams+0x19c>)
 8008bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	0c1b      	lsrs	r3, r3, #16
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	0a1b      	lsrs	r3, r3, #8
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7d1b      	ldrb	r3, [r3, #20]
 8008bdc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008bde:	7cfb      	ldrb	r3, [r7, #19]
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	f107 0308 	add.w	r3, r7, #8
 8008be6:	4619      	mov	r1, r3
 8008be8:	208b      	movs	r0, #139	@ 0x8b
 8008bea:	f000 fa41 	bl	8009070 <SUBGRF_WriteCommand>
        break;
 8008bee:	e039      	b.n	8008c64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	7e1b      	ldrb	r3, [r3, #24]
 8008bf8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	7e5b      	ldrb	r3, [r3, #25]
 8008bfe:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	7e9b      	ldrb	r3, [r3, #26]
 8008c04:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7edb      	ldrb	r3, [r3, #27]
 8008c0a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008c0c:	7cfb      	ldrb	r3, [r7, #19]
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	4619      	mov	r1, r3
 8008c16:	208b      	movs	r0, #139	@ 0x8b
 8008c18:	f000 fa2a 	bl	8009070 <SUBGRF_WriteCommand>

        break;
 8008c1c:	e022      	b.n	8008c64 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8008c1e:	2305      	movs	r3, #5
 8008c20:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	4a14      	ldr	r2, [pc, #80]	@ (8008c78 <SUBGRF_SetModulationParams+0x19c>)
 8008c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c2c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	0c1b      	lsrs	r3, r3, #16
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	0a1b      	lsrs	r3, r3, #8
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	7b1b      	ldrb	r3, [r3, #12]
 8008c48:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	7b5b      	ldrb	r3, [r3, #13]
 8008c4e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8008c50:	7cfb      	ldrb	r3, [r7, #19]
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	f107 0308 	add.w	r3, r7, #8
 8008c58:	4619      	mov	r1, r3
 8008c5a:	208b      	movs	r0, #139	@ 0x8b
 8008c5c:	f000 fa08 	bl	8009070 <SUBGRF_WriteCommand>
        break;
 8008c60:	e000      	b.n	8008c64 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8008c62:	bf00      	nop
    }
}
 8008c64:	bf00      	nop
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008c6e:	bf00      	nop
 8008c70:	0800a694 	.word	0x0800a694
 8008c74:	200003f5 	.word	0x200003f5
 8008c78:	3d090000 	.word	0x3d090000
 8008c7c:	01e84800 	.word	0x01e84800

08008c80 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8008c8c:	4a48      	ldr	r2, [pc, #288]	@ (8008db0 <SUBGRF_SetPacketParams+0x130>)
 8008c8e:	f107 030c 	add.w	r3, r7, #12
 8008c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c94:	c303      	stmia	r3!, {r0, r1}
 8008c96:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	781a      	ldrb	r2, [r3, #0]
 8008c9c:	4b45      	ldr	r3, [pc, #276]	@ (8008db4 <SUBGRF_SetPacketParams+0x134>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d004      	beq.n	8008cae <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7ff fe23 	bl	80088f4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d878      	bhi.n	8008da8 <SUBGRF_SetPacketParams+0x128>
 8008cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cbc <SUBGRF_SetPacketParams+0x3c>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008ccd 	.word	0x08008ccd
 8008cc0:	08008d5d 	.word	0x08008d5d
 8008cc4:	08008d51 	.word	0x08008d51
 8008cc8:	08008ccd 	.word	0x08008ccd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7a5b      	ldrb	r3, [r3, #9]
 8008cd0:	2bf1      	cmp	r3, #241	@ 0xf1
 8008cd2:	d10a      	bne.n	8008cea <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8008cd4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8008cd8:	f7ff faaa 	bl	8008230 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8008cdc:	f248 0005 	movw	r0, #32773	@ 0x8005
 8008ce0:	f7ff fac6 	bl	8008270 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	75bb      	strb	r3, [r7, #22]
 8008ce8:	e011      	b.n	8008d0e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	7a5b      	ldrb	r3, [r3, #9]
 8008cee:	2bf2      	cmp	r3, #242	@ 0xf2
 8008cf0:	d10a      	bne.n	8008d08 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8008cf2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8008cf6:	f7ff fa9b 	bl	8008230 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8008cfa:	f241 0021 	movw	r0, #4129	@ 0x1021
 8008cfe:	f7ff fab7 	bl	8008270 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8008d02:	2306      	movs	r3, #6
 8008d04:	75bb      	strb	r3, [r7, #22]
 8008d06:	e002      	b.n	8008d0e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	7a5b      	ldrb	r3, [r3, #9]
 8008d0c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8008d0e:	2309      	movs	r3, #9
 8008d10:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	885b      	ldrh	r3, [r3, #2]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	791b      	ldrb	r3, [r3, #4]
 8008d2a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	795b      	ldrb	r3, [r3, #5]
 8008d30:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	799b      	ldrb	r3, [r3, #6]
 8008d36:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	79db      	ldrb	r3, [r3, #7]
 8008d3c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	7a1b      	ldrb	r3, [r3, #8]
 8008d42:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8008d44:	7dbb      	ldrb	r3, [r7, #22]
 8008d46:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	7a9b      	ldrb	r3, [r3, #10]
 8008d4c:	753b      	strb	r3, [r7, #20]
        break;
 8008d4e:	e022      	b.n	8008d96 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8008d50:	2301      	movs	r3, #1
 8008d52:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	7b1b      	ldrb	r3, [r3, #12]
 8008d58:	733b      	strb	r3, [r7, #12]
        break;
 8008d5a:	e01c      	b.n	8008d96 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8008d5c:	2306      	movs	r3, #6
 8008d5e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	89db      	ldrh	r3, [r3, #14]
 8008d64:	0a1b      	lsrs	r3, r3, #8
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	89db      	ldrh	r3, [r3, #14]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	7c1a      	ldrb	r2, [r3, #16]
 8008d78:	4b0f      	ldr	r3, [pc, #60]	@ (8008db8 <SUBGRF_SetPacketParams+0x138>)
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	7019      	strb	r1, [r3, #0]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	7c5b      	ldrb	r3, [r3, #17]
 8008d86:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7c9b      	ldrb	r3, [r3, #18]
 8008d8c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	7cdb      	ldrb	r3, [r3, #19]
 8008d92:	747b      	strb	r3, [r7, #17]
        break;
 8008d94:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	f107 030c 	add.w	r3, r7, #12
 8008d9e:	4619      	mov	r1, r3
 8008da0:	208c      	movs	r0, #140	@ 0x8c
 8008da2:	f000 f965 	bl	8009070 <SUBGRF_WriteCommand>
 8008da6:	e000      	b.n	8008daa <SUBGRF_SetPacketParams+0x12a>
        return;
 8008da8:	bf00      	nop
}
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	0800a69c 	.word	0x0800a69c
 8008db4:	200003f5 	.word	0x200003f5
 8008db8:	200003f6 	.word	0x200003f6

08008dbc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	460a      	mov	r2, r1
 8008dc6:	71fb      	strb	r3, [r7, #7]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8008dd0:	79bb      	ldrb	r3, [r7, #6]
 8008dd2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	2202      	movs	r2, #2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	208f      	movs	r0, #143	@ 0x8f
 8008dde:	f000 f947 	bl	8009070 <SUBGRF_WriteCommand>
}
 8008de2:	bf00      	nop
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8008df4:	1d3b      	adds	r3, r7, #4
 8008df6:	2201      	movs	r2, #1
 8008df8:	4619      	mov	r1, r3
 8008dfa:	2015      	movs	r0, #21
 8008dfc:	f000 f95a 	bl	80090b4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8008e00:	793b      	ldrb	r3, [r7, #4]
 8008e02:	425b      	negs	r3, r3
 8008e04:	105b      	asrs	r3, r3, #1
 8008e06:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8008e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8008e1e:	f107 030c 	add.w	r3, r7, #12
 8008e22:	2202      	movs	r2, #2
 8008e24:	4619      	mov	r1, r3
 8008e26:	2013      	movs	r0, #19
 8008e28:	f000 f944 	bl	80090b4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8008e2c:	f7ff fd7e 	bl	800892c <SUBGRF_GetPacketType>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d10d      	bne.n	8008e52 <SUBGRF_GetRxBufferStatus+0x3e>
 8008e36:	4b0c      	ldr	r3, [pc, #48]	@ (8008e68 <SUBGRF_GetRxBufferStatus+0x54>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d108      	bne.n	8008e52 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8008e40:	f240 7002 	movw	r0, #1794	@ 0x702
 8008e44:	f000 f878 	bl	8008f38 <SUBGRF_ReadRegister>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	e002      	b.n	8008e58 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8008e52:	7b3a      	ldrb	r2, [r7, #12]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8008e58:	7b7a      	ldrb	r2, [r7, #13]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	701a      	strb	r2, [r3, #0]
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200003f6 	.word	0x200003f6

08008e6c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8008e74:	f107 030c 	add.w	r3, r7, #12
 8008e78:	2203      	movs	r2, #3
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	2014      	movs	r0, #20
 8008e7e:	f000 f919 	bl	80090b4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8008e82:	f7ff fd53 	bl	800892c <SUBGRF_GetPacketType>
 8008e86:	4603      	mov	r3, r0
 8008e88:	461a      	mov	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d002      	beq.n	8008e9c <SUBGRF_GetPacketStatus+0x30>
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d013      	beq.n	8008ec2 <SUBGRF_GetPacketStatus+0x56>
 8008e9a:	e02a      	b.n	8008ef2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8008e9c:	7b3a      	ldrb	r2, [r7, #12]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8008ea2:	7b7b      	ldrb	r3, [r7, #13]
 8008ea4:	425b      	negs	r3, r3
 8008ea6:	105b      	asrs	r3, r3, #1
 8008ea8:	b25a      	sxtb	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	425b      	negs	r3, r3
 8008eb2:	105b      	asrs	r3, r3, #1
 8008eb4:	b25a      	sxtb	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	609a      	str	r2, [r3, #8]
            break;
 8008ec0:	e020      	b.n	8008f04 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8008ec2:	7b3b      	ldrb	r3, [r7, #12]
 8008ec4:	425b      	negs	r3, r3
 8008ec6:	105b      	asrs	r3, r3, #1
 8008ec8:	b25a      	sxtb	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8008ece:	7b7b      	ldrb	r3, [r7, #13]
 8008ed0:	b25b      	sxtb	r3, r3
 8008ed2:	3302      	adds	r3, #2
 8008ed4:	109b      	asrs	r3, r3, #2
 8008ed6:	b25a      	sxtb	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	425b      	negs	r3, r3
 8008ee0:	105b      	asrs	r3, r3, #1
 8008ee2:	b25a      	sxtb	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8008ee8:	4b08      	ldr	r3, [pc, #32]	@ (8008f0c <SUBGRF_GetPacketStatus+0xa0>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	611a      	str	r2, [r3, #16]
            break;
 8008ef0:	e008      	b.n	8008f04 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8008ef2:	2214      	movs	r2, #20
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fca7 	bl	800984a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	220f      	movs	r2, #15
 8008f00:	701a      	strb	r2, [r3, #0]
            break;
 8008f02:	bf00      	nop
    }
}
 8008f04:	bf00      	nop
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	200003f8 	.word	0x200003f8

08008f10 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	460a      	mov	r2, r1
 8008f1a:	80fb      	strh	r3, [r7, #6]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8008f20:	1d7a      	adds	r2, r7, #5
 8008f22:	88f9      	ldrh	r1, [r7, #6]
 8008f24:	2301      	movs	r3, #1
 8008f26:	4803      	ldr	r0, [pc, #12]	@ (8008f34 <SUBGRF_WriteRegister+0x24>)
 8008f28:	f7fa f8b0 	bl	800308c <HAL_SUBGHZ_WriteRegisters>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20000110 	.word	0x20000110

08008f38 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8008f42:	f107 020f 	add.w	r2, r7, #15
 8008f46:	88f9      	ldrh	r1, [r7, #6]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4804      	ldr	r0, [pc, #16]	@ (8008f5c <SUBGRF_ReadRegister+0x24>)
 8008f4c:	f7fa f8fd 	bl	800314a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000110 	.word	0x20000110

08008f60 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	6039      	str	r1, [r7, #0]
 8008f6a:	80fb      	strh	r3, [r7, #6]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f70:	f3ef 8310 	mrs	r3, PRIMASK
 8008f74:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f76:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008f78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f7a:	b672      	cpsid	i
}
 8008f7c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8008f7e:	88bb      	ldrh	r3, [r7, #4]
 8008f80:	88f9      	ldrh	r1, [r7, #6]
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4806      	ldr	r0, [pc, #24]	@ (8008fa0 <SUBGRF_WriteRegisters+0x40>)
 8008f86:	f7fa f881 	bl	800308c <HAL_SUBGHZ_WriteRegisters>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f383 8810 	msr	PRIMASK, r3
}
 8008f94:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008f96:	bf00      	nop
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000110 	.word	0x20000110

08008fa4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	6039      	str	r1, [r7, #0]
 8008fae:	80fb      	strh	r3, [r7, #6]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fba:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8008fbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fbe:	b672      	cpsid	i
}
 8008fc0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8008fc2:	88bb      	ldrh	r3, [r7, #4]
 8008fc4:	88f9      	ldrh	r1, [r7, #6]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	4806      	ldr	r0, [pc, #24]	@ (8008fe4 <SUBGRF_ReadRegisters+0x40>)
 8008fca:	f7fa f8be 	bl	800314a <HAL_SUBGHZ_ReadRegisters>
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f383 8810 	msr	PRIMASK, r3
}
 8008fd8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8008fda:	bf00      	nop
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000110 	.word	0x20000110

08008fe8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	6039      	str	r1, [r7, #0]
 8008ff2:	71fb      	strb	r3, [r7, #7]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009002:	b672      	cpsid	i
}
 8009004:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009006:	79bb      	ldrb	r3, [r7, #6]
 8009008:	b29b      	uxth	r3, r3
 800900a:	79f9      	ldrb	r1, [r7, #7]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	4806      	ldr	r0, [pc, #24]	@ (8009028 <SUBGRF_WriteBuffer+0x40>)
 8009010:	f7fa f9af 	bl	8003372 <HAL_SUBGHZ_WriteBuffer>
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	f383 8810 	msr	PRIMASK, r3
}
 800901e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009020:	bf00      	nop
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20000110 	.word	0x20000110

0800902c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	71fb      	strb	r3, [r7, #7]
 8009038:	4613      	mov	r3, r2
 800903a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800903c:	f3ef 8310 	mrs	r3, PRIMASK
 8009040:	60fb      	str	r3, [r7, #12]
  return(result);
 8009042:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009044:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009046:	b672      	cpsid	i
}
 8009048:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800904a:	79bb      	ldrb	r3, [r7, #6]
 800904c:	b29b      	uxth	r3, r3
 800904e:	79f9      	ldrb	r1, [r7, #7]
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	4806      	ldr	r0, [pc, #24]	@ (800906c <SUBGRF_ReadBuffer+0x40>)
 8009054:	f7fa f9e0 	bl	8003418 <HAL_SUBGHZ_ReadBuffer>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f383 8810 	msr	PRIMASK, r3
}
 8009062:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009064:	bf00      	nop
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20000110 	.word	0x20000110

08009070 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	6039      	str	r1, [r7, #0]
 800907a:	71fb      	strb	r3, [r7, #7]
 800907c:	4613      	mov	r3, r2
 800907e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009080:	f3ef 8310 	mrs	r3, PRIMASK
 8009084:	60fb      	str	r3, [r7, #12]
  return(result);
 8009086:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800908a:	b672      	cpsid	i
}
 800908c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800908e:	88bb      	ldrh	r3, [r7, #4]
 8009090:	79f9      	ldrb	r1, [r7, #7]
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	4806      	ldr	r0, [pc, #24]	@ (80090b0 <SUBGRF_WriteCommand+0x40>)
 8009096:	f7fa f8b9 	bl	800320c <HAL_SUBGHZ_ExecSetCmd>
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	f383 8810 	msr	PRIMASK, r3
}
 80090a4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80090a6:	bf00      	nop
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20000110 	.word	0x20000110

080090b4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	71fb      	strb	r3, [r7, #7]
 80090c0:	4613      	mov	r3, r2
 80090c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090c4:	f3ef 8310 	mrs	r3, PRIMASK
 80090c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80090ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80090cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090ce:	b672      	cpsid	i
}
 80090d0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80090d2:	88bb      	ldrh	r3, [r7, #4]
 80090d4:	79f9      	ldrb	r1, [r7, #7]
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	4806      	ldr	r0, [pc, #24]	@ (80090f4 <SUBGRF_ReadCommand+0x40>)
 80090da:	f7fa f8f6 	bl	80032ca <HAL_SUBGHZ_ExecGetCmd>
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f383 8810 	msr	PRIMASK, r3
}
 80090e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80090ea:	bf00      	nop
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20000110 	.word	0x20000110

080090f8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	460a      	mov	r2, r1
 8009102:	71fb      	strb	r3, [r7, #7]
 8009104:	4613      	mov	r3, r2
 8009106:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8009108:	2301      	movs	r3, #1
 800910a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800910c:	79bb      	ldrb	r3, [r7, #6]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d10d      	bne.n	800912e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d104      	bne.n	8009122 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8009118:	2302      	movs	r3, #2
 800911a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800911c:	2004      	movs	r0, #4
 800911e:	f000 f8ef 	bl	8009300 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009122:	79fb      	ldrb	r3, [r7, #7]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d107      	bne.n	8009138 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009128:	2303      	movs	r3, #3
 800912a:	73fb      	strb	r3, [r7, #15]
 800912c:	e004      	b.n	8009138 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800912e:	79bb      	ldrb	r3, [r7, #6]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009134:	2301      	movs	r3, #1
 8009136:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009138:	7bfb      	ldrb	r3, [r7, #15]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fad2 	bl	80096e4 <RBI_ConfigRFSwitch>
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8009152:	2301      	movs	r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8009156:	f000 fb23 	bl	80097a0 <RBI_GetTxConfig>
 800915a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d016      	beq.n	8009190 <SUBGRF_SetRfTxPower+0x48>
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	2b02      	cmp	r3, #2
 8009166:	dc16      	bgt.n	8009196 <SUBGRF_SetRfTxPower+0x4e>
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <SUBGRF_SetRfTxPower+0x2e>
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d00a      	beq.n	800918a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009174:	e00f      	b.n	8009196 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800917a:	2b0f      	cmp	r3, #15
 800917c:	dd02      	ble.n	8009184 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800917e:	2302      	movs	r3, #2
 8009180:	73fb      	strb	r3, [r7, #15]
            break;
 8009182:	e009      	b.n	8009198 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009184:	2301      	movs	r3, #1
 8009186:	73fb      	strb	r3, [r7, #15]
            break;
 8009188:	e006      	b.n	8009198 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800918a:	2301      	movs	r3, #1
 800918c:	73fb      	strb	r3, [r7, #15]
            break;
 800918e:	e003      	b.n	8009198 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009190:	2302      	movs	r3, #2
 8009192:	73fb      	strb	r3, [r7, #15]
            break;
 8009194:	e000      	b.n	8009198 <SUBGRF_SetRfTxPower+0x50>
            break;
 8009196:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009198:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	2202      	movs	r2, #2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f7ff fbcd 	bl	8008940 <SUBGRF_SetTxParams>

    return paSelect;
 80091a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80091b4:	2301      	movs	r3, #1
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bc80      	pop	{r7}
 80091bc:	4770      	bx	lr
	...

080091c0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80091c8:	4b03      	ldr	r3, [pc, #12]	@ (80091d8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2001      	movs	r0, #1
 80091ce:	4798      	blx	r3
}
 80091d0:	bf00      	nop
 80091d2:	3708      	adds	r7, #8
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	20000400 	.word	0x20000400

080091dc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80091e4:	4b03      	ldr	r3, [pc, #12]	@ (80091f4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2002      	movs	r0, #2
 80091ea:	4798      	blx	r3
}
 80091ec:	bf00      	nop
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20000400 	.word	0x20000400

080091f8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8009200:	4b03      	ldr	r3, [pc, #12]	@ (8009210 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2040      	movs	r0, #64	@ 0x40
 8009206:	4798      	blx	r3
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000400 	.word	0x20000400

08009214 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b082      	sub	sp, #8
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8009226:	2b01      	cmp	r3, #1
 8009228:	d005      	beq.n	8009236 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800922a:	e00a      	b.n	8009242 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800922c:	4b07      	ldr	r3, [pc, #28]	@ (800924c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2080      	movs	r0, #128	@ 0x80
 8009232:	4798      	blx	r3
            break;
 8009234:	e005      	b.n	8009242 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8009236:	4b05      	ldr	r3, [pc, #20]	@ (800924c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800923e:	4798      	blx	r3
            break;
 8009240:	bf00      	nop
    }
}
 8009242:	bf00      	nop
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	20000400 	.word	0x20000400

08009250 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8009258:	4b04      	ldr	r3, [pc, #16]	@ (800926c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009260:	4798      	blx	r3
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000400 	.word	0x20000400

08009270 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009278:	4b03      	ldr	r3, [pc, #12]	@ (8009288 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2020      	movs	r0, #32
 800927e:	4798      	blx	r3
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000400 	.word	0x20000400

0800928c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009294:	4b03      	ldr	r3, [pc, #12]	@ (80092a4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2004      	movs	r0, #4
 800929a:	4798      	blx	r3
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20000400 	.word	0x20000400

080092a8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80092b0:	4b03      	ldr	r3, [pc, #12]	@ (80092c0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2008      	movs	r0, #8
 80092b6:	4798      	blx	r3
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000400 	.word	0x20000400

080092c4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80092cc:	4b03      	ldr	r3, [pc, #12]	@ (80092dc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2010      	movs	r0, #16
 80092d2:	4798      	blx	r3
}
 80092d4:	bf00      	nop
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	20000400 	.word	0x20000400

080092e0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80092e8:	4b04      	ldr	r3, [pc, #16]	@ (80092fc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80092f0:	4798      	blx	r3
}
 80092f2:	bf00      	nop
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000400 	.word	0x20000400

08009300 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800930a:	f000 fa5f 	bl	80097cc <RBI_IsDCDC>
 800930e:	4603      	mov	r3, r0
 8009310:	2b01      	cmp	r3, #1
 8009312:	d112      	bne.n	800933a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8009314:	f640 1023 	movw	r0, #2339	@ 0x923
 8009318:	f7ff fe0e 	bl	8008f38 <SUBGRF_ReadRegister>
 800931c:	4603      	mov	r3, r0
 800931e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	f023 0306 	bic.w	r3, r3, #6
 8009326:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8009328:	7bfa      	ldrb	r2, [r7, #15]
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	4313      	orrs	r3, r2
 800932e:	b2db      	uxtb	r3, r3
 8009330:	4619      	mov	r1, r3
 8009332:	f640 1023 	movw	r0, #2339	@ 0x923
 8009336:	f7ff fdeb 	bl	8008f10 <SUBGRF_WriteRegister>
  }
}
 800933a:	bf00      	nop
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8009352:	231f      	movs	r3, #31
 8009354:	e017      	b.n	8009386 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
 800935a:	e00f      	b.n	800937c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	4a0c      	ldr	r2, [pc, #48]	@ (8009390 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	429a      	cmp	r2, r3
 8009368:	d205      	bcs.n	8009376 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	4a08      	ldr	r2, [pc, #32]	@ (8009390 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	791b      	ldrb	r3, [r3, #4]
 8009374:	e007      	b.n	8009386 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	3301      	adds	r3, #1
 800937a:	73fb      	strb	r3, [r7, #15]
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	2b15      	cmp	r3, #21
 8009380:	d9ec      	bls.n	800935c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8009382:	bf00      	nop
 8009384:	e7fd      	b.n	8009382 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr
 8009390:	0800a82c 	.word	0x0800a82c

08009394 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08a      	sub	sp, #40	@ 0x28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800939e:	4b35      	ldr	r3, [pc, #212]	@ (8009474 <SUBGRF_GetCFO+0xe0>)
 80093a0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80093a2:	f640 0007 	movw	r0, #2055	@ 0x807
 80093a6:	f7ff fdc7 	bl	8008f38 <SUBGRF_ReadRegister>
 80093aa:	4603      	mov	r3, r0
 80093ac:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80093ae:	7ffb      	ldrb	r3, [r7, #31]
 80093b0:	08db      	lsrs	r3, r3, #3
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	3328      	adds	r3, #40	@ 0x28
 80093ba:	443b      	add	r3, r7
 80093bc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80093c0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80093c2:	7ffb      	ldrb	r3, [r7, #31]
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80093ca:	7fba      	ldrb	r2, [r7, #30]
 80093cc:	7f7b      	ldrb	r3, [r7, #29]
 80093ce:	3301      	adds	r3, #1
 80093d0:	fa02 f303 	lsl.w	r3, r2, r3
 80093d4:	461a      	mov	r2, r3
 80093d6:	4b28      	ldr	r3, [pc, #160]	@ (8009478 <SUBGRF_GetCFO+0xe4>)
 80093d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80093dc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80093de:	69ba      	ldr	r2, [r7, #24]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80093ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	fb02 f303 	mul.w	r3, r2, r3
 80093f8:	2b07      	cmp	r3, #7
 80093fa:	d802      	bhi.n	8009402 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 80093fc:	2302      	movs	r3, #2
 80093fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8009402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	fb02 f303 	mul.w	r3, r2, r3
 800940c:	2b03      	cmp	r3, #3
 800940e:	d802      	bhi.n	8009416 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8009410:	2304      	movs	r3, #4
 8009412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8009416:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	fb02 f303 	mul.w	r3, r2, r3
 8009420:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8009422:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8009426:	f7ff fd87 	bl	8008f38 <SUBGRF_ReadRegister>
 800942a:	4603      	mov	r3, r0
 800942c:	021b      	lsls	r3, r3, #8
 800942e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009432:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8009434:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8009438:	f7ff fd7e 	bl	8008f38 <SUBGRF_ReadRegister>
 800943c:	4603      	mov	r3, r0
 800943e:	461a      	mov	r2, r3
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	4313      	orrs	r3, r2
 8009444:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009456:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800945a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	095b      	lsrs	r3, r3, #5
 8009460:	6a3a      	ldr	r2, [r7, #32]
 8009462:	fb02 f303 	mul.w	r3, r2, r3
 8009466:	11da      	asrs	r2, r3, #7
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	601a      	str	r2, [r3, #0]
}
 800946c:	bf00      	nop
 800946e:	3728      	adds	r7, #40	@ 0x28
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	0c0a0804 	.word	0x0c0a0804
 8009478:	01e84800 	.word	0x01e84800

0800947c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	4603      	mov	r3, r0
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
 8009488:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800948e:	f04f 33ff 	mov.w	r3, #4294967295
 8009492:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8009494:	697b      	ldr	r3, [r7, #20]
}
 8009496:	4618      	mov	r0, r3
 8009498:	371c      	adds	r7, #28
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr

080094a0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 80094b2:	f04f 33ff 	mov.w	r3, #4294967295
 80094b6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 80094b8:	697b      	ldr	r3, [r7, #20]
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	371c      	adds	r7, #28
 80094be:	46bd      	mov	sp, r7
 80094c0:	bc80      	pop	{r7}
 80094c2:	4770      	bx	lr

080094c4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 80094d0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	bc80      	pop	{r7}
 80094dc:	4770      	bx	lr

080094de <RFW_DeInit>:

void RFW_DeInit( void )
{
 80094de:	b480      	push	{r7}
 80094e0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80094e2:	bf00      	nop
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bc80      	pop	{r7}
 80094e8:	4770      	bx	lr

080094ea <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 80094ea:	b480      	push	{r7}
 80094ec:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 80094ee:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bc80      	pop	{r7}
 80094f6:	4770      	bx	lr

080094f8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 80094fc:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 80094fe:	4618      	mov	r0, r3
 8009500:	46bd      	mov	sp, r7
 8009502:	bc80      	pop	{r7}
 8009504:	4770      	bx	lr

08009506 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	4603      	mov	r3, r0
 800950e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr

0800951a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800951a:	b480      	push	{r7}
 800951c:	b087      	sub	sp, #28
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	460b      	mov	r3, r1
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8009528:	f04f 33ff 	mov.w	r3, #4294967295
 800952c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800952e:	697b      	ldr	r3, [r7, #20]
}
 8009530:	4618      	mov	r0, r3
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr

0800953a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800953a:	b480      	push	{r7}
 800953c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800953e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8009542:	4618      	mov	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	bc80      	pop	{r7}
 8009548:	4770      	bx	lr

0800954a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800954a:	b480      	push	{r7}
 800954c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800954e:	bf00      	nop
 8009550:	46bd      	mov	sp, r7
 8009552:	bc80      	pop	{r7}
 8009554:	4770      	bx	lr

08009556 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8009556:	b480      	push	{r7}
 8009558:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800955a:	bf00      	nop
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr

08009562 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	4603      	mov	r3, r0
 800956a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800956c:	bf00      	nop
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	bc80      	pop	{r7}
 8009574:	4770      	bx	lr

08009576 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800957a:	f7f7 fcab 	bl	8000ed4 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800957e:	f000 f809 	bl	8009594 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009582:	bf00      	nop
 8009584:	bd80      	pop	{r7, pc}

08009586 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8009586:	b480      	push	{r7}
 8009588:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800958a:	bf00      	nop
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr
	...

08009594 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8009598:	4b0a      	ldr	r3, [pc, #40]	@ (80095c4 <SubghzApp_Init+0x30>)
 800959a:	4a0b      	ldr	r2, [pc, #44]	@ (80095c8 <SubghzApp_Init+0x34>)
 800959c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800959e:	4b09      	ldr	r3, [pc, #36]	@ (80095c4 <SubghzApp_Init+0x30>)
 80095a0:	4a0a      	ldr	r2, [pc, #40]	@ (80095cc <SubghzApp_Init+0x38>)
 80095a2:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80095a4:	4b07      	ldr	r3, [pc, #28]	@ (80095c4 <SubghzApp_Init+0x30>)
 80095a6:	4a0a      	ldr	r2, [pc, #40]	@ (80095d0 <SubghzApp_Init+0x3c>)
 80095a8:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 80095aa:	4b06      	ldr	r3, [pc, #24]	@ (80095c4 <SubghzApp_Init+0x30>)
 80095ac:	4a09      	ldr	r2, [pc, #36]	@ (80095d4 <SubghzApp_Init+0x40>)
 80095ae:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 80095b0:	4b04      	ldr	r3, [pc, #16]	@ (80095c4 <SubghzApp_Init+0x30>)
 80095b2:	4a09      	ldr	r2, [pc, #36]	@ (80095d8 <SubghzApp_Init+0x44>)
 80095b4:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 80095b6:	4b09      	ldr	r3, [pc, #36]	@ (80095dc <SubghzApp_Init+0x48>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4802      	ldr	r0, [pc, #8]	@ (80095c4 <SubghzApp_Init+0x30>)
 80095bc:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 80095be:	bf00      	nop
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	20000404 	.word	0x20000404
 80095c8:	080095e1 	.word	0x080095e1
 80095cc:	080095ed 	.word	0x080095ed
 80095d0:	08009611 	.word	0x08009611
 80095d4:	0800961d 	.word	0x0800961d
 80095d8:	08009629 	.word	0x08009629
 80095dc:	0800a79c 	.word	0x0800a79c

080095e0 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 80095e4:	bf00      	nop
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr

080095ec <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	4608      	mov	r0, r1
 80095f6:	4611      	mov	r1, r2
 80095f8:	461a      	mov	r2, r3
 80095fa:	4603      	mov	r3, r0
 80095fc:	817b      	strh	r3, [r7, #10]
 80095fe:	460b      	mov	r3, r1
 8009600:	813b      	strh	r3, [r7, #8]
 8009602:	4613      	mov	r3, r2
 8009604:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8009606:	bf00      	nop
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	bc80      	pop	{r7}
 800960e:	4770      	bx	lr

08009610 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8009614:	bf00      	nop
 8009616:	46bd      	mov	sp, r7
 8009618:	bc80      	pop	{r7}
 800961a:	4770      	bx	lr

0800961c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 8009620:	bf00      	nop
 8009622:	46bd      	mov	sp, r7
 8009624:	bc80      	pop	{r7}
 8009626:	4770      	bx	lr

08009628 <OnRxError>:

static void OnRxError(void)
{
 8009628:	b480      	push	{r7}
 800962a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800962c:	bf00      	nop
 800962e:	46bd      	mov	sp, r7
 8009630:	bc80      	pop	{r7}
 8009632:	4770      	bx	lr

08009634 <LL_AHB2_GRP1_EnableClock>:
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800963c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009640:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009642:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4313      	orrs	r3, r2
 800964a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800964c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009650:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4013      	ands	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009658:	68fb      	ldr	r3, [r7, #12]
}
 800965a:	bf00      	nop
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	bc80      	pop	{r7}
 8009662:	4770      	bx	lr

08009664 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800966e:	463b      	mov	r3, r7
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	605a      	str	r2, [r3, #4]
 8009676:	609a      	str	r2, [r3, #8]
 8009678:	60da      	str	r2, [r3, #12]
 800967a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800967c:	2004      	movs	r0, #4
 800967e:	f7ff ffd9 	bl	8009634 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 8009682:	2310      	movs	r3, #16
 8009684:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8009686:	2301      	movs	r3, #1
 8009688:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800968a:	2300      	movs	r3, #0
 800968c:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800968e:	2303      	movs	r3, #3
 8009690:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8009692:	463b      	mov	r3, r7
 8009694:	4619      	mov	r1, r3
 8009696:	4812      	ldr	r0, [pc, #72]	@ (80096e0 <RBI_Init+0x7c>)
 8009698:	f7f7 ff54 	bl	8001544 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800969c:	2320      	movs	r3, #32
 800969e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80096a0:	463b      	mov	r3, r7
 80096a2:	4619      	mov	r1, r3
 80096a4:	480e      	ldr	r0, [pc, #56]	@ (80096e0 <RBI_Init+0x7c>)
 80096a6:	f7f7 ff4d 	bl	8001544 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80096aa:	2308      	movs	r3, #8
 80096ac:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80096ae:	463b      	mov	r3, r7
 80096b0:	4619      	mov	r1, r3
 80096b2:	480b      	ldr	r0, [pc, #44]	@ (80096e0 <RBI_Init+0x7c>)
 80096b4:	f7f7 ff46 	bl	8001544 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80096b8:	2200      	movs	r2, #0
 80096ba:	2120      	movs	r1, #32
 80096bc:	4808      	ldr	r0, [pc, #32]	@ (80096e0 <RBI_Init+0x7c>)
 80096be:	f7f8 f8a1 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80096c2:	2200      	movs	r2, #0
 80096c4:	2110      	movs	r1, #16
 80096c6:	4806      	ldr	r0, [pc, #24]	@ (80096e0 <RBI_Init+0x7c>)
 80096c8:	f7f8 f89c 	bl	8001804 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80096cc:	2200      	movs	r2, #0
 80096ce:	2108      	movs	r1, #8
 80096d0:	4803      	ldr	r0, [pc, #12]	@ (80096e0 <RBI_Init+0x7c>)
 80096d2:	f7f8 f897 	bl	8001804 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 80096d6:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	48000800 	.word	0x48000800

080096e4 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	4603      	mov	r3, r0
 80096ec:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
	switch (Config) {
 80096f2:	79fb      	ldrb	r3, [r7, #7]
 80096f4:	2b03      	cmp	r3, #3
 80096f6:	d84b      	bhi.n	8009790 <RBI_ConfigRFSwitch+0xac>
 80096f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009700 <RBI_ConfigRFSwitch+0x1c>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	08009711 	.word	0x08009711
 8009704:	08009731 	.word	0x08009731
 8009708:	08009751 	.word	0x08009751
 800970c:	08009771 	.word	0x08009771
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 8009710:	2200      	movs	r2, #0
 8009712:	2108      	movs	r1, #8
 8009714:	4821      	ldr	r0, [pc, #132]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 8009716:	f7f8 f875 	bl	8001804 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800971a:	2200      	movs	r2, #0
 800971c:	2110      	movs	r1, #16
 800971e:	481f      	ldr	r0, [pc, #124]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 8009720:	f7f8 f870 	bl	8001804 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009724:	2200      	movs	r2, #0
 8009726:	2120      	movs	r1, #32
 8009728:	481c      	ldr	r0, [pc, #112]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 800972a:	f7f8 f86b 	bl	8001804 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800972e:	e030      	b.n	8009792 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009730:	2201      	movs	r2, #1
 8009732:	2108      	movs	r1, #8
 8009734:	4819      	ldr	r0, [pc, #100]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 8009736:	f7f8 f865 	bl	8001804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800973a:	2201      	movs	r2, #1
 800973c:	2110      	movs	r1, #16
 800973e:	4817      	ldr	r0, [pc, #92]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 8009740:	f7f8 f860 	bl	8001804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 8009744:	2200      	movs	r2, #0
 8009746:	2120      	movs	r1, #32
 8009748:	4814      	ldr	r0, [pc, #80]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 800974a:	f7f8 f85b 	bl	8001804 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800974e:	e020      	b.n	8009792 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009750:	2201      	movs	r2, #1
 8009752:	2108      	movs	r1, #8
 8009754:	4811      	ldr	r0, [pc, #68]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 8009756:	f7f8 f855 	bl	8001804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800975a:	2201      	movs	r2, #1
 800975c:	2110      	movs	r1, #16
 800975e:	480f      	ldr	r0, [pc, #60]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 8009760:	f7f8 f850 	bl	8001804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009764:	2201      	movs	r2, #1
 8009766:	2120      	movs	r1, #32
 8009768:	480c      	ldr	r0, [pc, #48]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 800976a:	f7f8 f84b 	bl	8001804 <HAL_GPIO_WritePin>
		break;
 800976e:	e010      	b.n	8009792 <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8009770:	2201      	movs	r2, #1
 8009772:	2108      	movs	r1, #8
 8009774:	4809      	ldr	r0, [pc, #36]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 8009776:	f7f8 f845 	bl	8001804 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800977a:	2200      	movs	r2, #0
 800977c:	2110      	movs	r1, #16
 800977e:	4807      	ldr	r0, [pc, #28]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 8009780:	f7f8 f840 	bl	8001804 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 8009784:	2201      	movs	r2, #1
 8009786:	2120      	movs	r1, #32
 8009788:	4804      	ldr	r0, [pc, #16]	@ (800979c <RBI_ConfigRFSwitch+0xb8>)
 800978a:	f7f8 f83b 	bl	8001804 <HAL_GPIO_WritePin>
		break;
 800978e:	e000      	b.n	8009792 <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 8009790:	bf00      	nop
	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009792:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	48000800 	.word	0x48000800

080097a0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 80097a6:	2300      	movs	r3, #0
 80097a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 80097aa:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bc80      	pop	{r7}
 80097b4:	4770      	bx	lr

080097b6 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80097b6:	b480      	push	{r7}
 80097b8:	b083      	sub	sp, #12
 80097ba:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 80097bc:	2301      	movs	r3, #1
 80097be:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 80097c0:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bc80      	pop	{r7}
 80097ca:	4770      	bx	lr

080097cc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 80097d2:	2301      	movs	r3, #1
 80097d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 80097d6:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	bc80      	pop	{r7}
 80097e0:	4770      	bx	lr

080097e2 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	4603      	mov	r3, r0
 80097ea:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 80097f6:	230f      	movs	r3, #15
 80097f8:	60fb      	str	r3, [r7, #12]
 80097fa:	e001      	b.n	8009800 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 80097fc:	2316      	movs	r3, #22
 80097fe:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009800:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009802:	4618      	mov	r0, r3
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr

0800980c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	613b      	str	r3, [r7, #16]

  while( size-- )
 8009822:	e007      	b.n	8009834 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	1c53      	adds	r3, r2, #1
 8009828:	613b      	str	r3, [r7, #16]
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	1c59      	adds	r1, r3, #1
 800982e:	6179      	str	r1, [r7, #20]
 8009830:	7812      	ldrb	r2, [r2, #0]
 8009832:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009834:	88fb      	ldrh	r3, [r7, #6]
 8009836:	1e5a      	subs	r2, r3, #1
 8009838:	80fa      	strh	r2, [r7, #6]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1f2      	bne.n	8009824 <UTIL_MEM_cpy_8+0x18>
    }
}
 800983e:	bf00      	nop
 8009840:	bf00      	nop
 8009842:	371c      	adds	r7, #28
 8009844:	46bd      	mov	sp, r7
 8009846:	bc80      	pop	{r7}
 8009848:	4770      	bx	lr

0800984a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800984a:	b480      	push	{r7}
 800984c:	b085      	sub	sp, #20
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	460b      	mov	r3, r1
 8009854:	70fb      	strb	r3, [r7, #3]
 8009856:	4613      	mov	r3, r2
 8009858:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800985e:	e004      	b.n	800986a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	60fa      	str	r2, [r7, #12]
 8009866:	78fa      	ldrb	r2, [r7, #3]
 8009868:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800986a:	883b      	ldrh	r3, [r7, #0]
 800986c:	1e5a      	subs	r2, r3, #1
 800986e:	803a      	strh	r2, [r7, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1f5      	bne.n	8009860 <UTIL_MEM_set_8+0x16>
  }
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr

08009880 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d023      	beq.n	80098de <UTIL_TIMER_Create+0x5e>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d020      	beq.n	80098de <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80098a2:	4b11      	ldr	r3, [pc, #68]	@ (80098e8 <UTIL_TIMER_Create+0x68>)
 80098a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a6:	68b8      	ldr	r0, [r7, #8]
 80098a8:	4798      	blx	r3
 80098aa:	4602      	mov	r2, r0
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	79fa      	ldrb	r2, [r7, #7]
 80098d2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	e000      	b.n	80098e0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 80098de:	2301      	movs	r3, #1
  }
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	0800a748 	.word	0x0800a748

080098ec <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	@ 0x28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d056      	beq.n	80099ae <UTIL_TIMER_Start+0xc2>
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f929 	bl	8009b58 <TimerExists>
 8009906:	4603      	mov	r3, r0
 8009908:	f083 0301 	eor.w	r3, r3, #1
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d04d      	beq.n	80099ae <UTIL_TIMER_Start+0xc2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	7a5b      	ldrb	r3, [r3, #9]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d149      	bne.n	80099ae <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800991a:	f3ef 8310 	mrs	r3, PRIMASK
 800991e:	613b      	str	r3, [r7, #16]
  return(result);
 8009920:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8009922:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009924:	b672      	cpsid	i
}
 8009926:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800992e:	4b24      	ldr	r3, [pc, #144]	@ (80099c0 <UTIL_TIMER_Start+0xd4>)
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	4798      	blx	r3
 8009934:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8009936:	6a3a      	ldr	r2, [r7, #32]
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	429a      	cmp	r2, r3
 800993c:	d201      	bcs.n	8009942 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a3a      	ldr	r2, [r7, #32]
 8009946:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800995a:	4b1a      	ldr	r3, [pc, #104]	@ (80099c4 <UTIL_TIMER_Start+0xd8>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8009962:	4b17      	ldr	r3, [pc, #92]	@ (80099c0 <UTIL_TIMER_Start+0xd4>)
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f96b 	bl	8009c44 <TimerInsertNewHeadTimer>
 800996e:	e017      	b.n	80099a0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8009970:	4b13      	ldr	r3, [pc, #76]	@ (80099c0 <UTIL_TIMER_Start+0xd4>)
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	4798      	blx	r3
 8009976:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	441a      	add	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	4b0e      	ldr	r3, [pc, #56]	@ (80099c4 <UTIL_TIMER_Start+0xd8>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	429a      	cmp	r2, r3
 8009990:	d203      	bcs.n	800999a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f956 	bl	8009c44 <TimerInsertNewHeadTimer>
 8009998:	e002      	b.n	80099a0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f922 	bl	8009be4 <TimerInsertTimer>
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f383 8810 	msr	PRIMASK, r3
}
 80099aa:	bf00      	nop
  {
 80099ac:	e002      	b.n	80099b4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 80099ae:	2301      	movs	r3, #1
 80099b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 80099b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3728      	adds	r7, #40	@ 0x28
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	0800a748 	.word	0x0800a748
 80099c4:	20000420 	.word	0x20000420

080099c8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d05b      	beq.n	8009a92 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099da:	f3ef 8310 	mrs	r3, PRIMASK
 80099de:	60fb      	str	r3, [r7, #12]
  return(result);
 80099e0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 80099e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80099e4:	b672      	cpsid	i
}
 80099e6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80099e8:	4b2d      	ldr	r3, [pc, #180]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80099ee:	4b2c      	ldr	r3, [pc, #176]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 80099fa:	4b29      	ldr	r3, [pc, #164]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d041      	beq.n	8009a86 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8009a08:	4b25      	ldr	r3, [pc, #148]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d134      	bne.n	8009a7c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8009a12:	4b23      	ldr	r3, [pc, #140]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2200      	movs	r2, #0
 8009a18:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8009a1a:	4b21      	ldr	r3, [pc, #132]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00a      	beq.n	8009a3a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8009a24:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 8009a2c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8009a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 f8ac 	bl	8009b90 <TimerSetTimeout>
 8009a38:	e023      	b.n	8009a82 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8009a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa4 <UTIL_TIMER_Stop+0xdc>)
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	4798      	blx	r3
            TimerListHead = NULL;
 8009a40:	4b17      	ldr	r3, [pc, #92]	@ (8009aa0 <UTIL_TIMER_Stop+0xd8>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	e01c      	b.n	8009a82 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d110      	bne.n	8009a72 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d006      	beq.n	8009a66 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	695b      	ldr	r3, [r3, #20]
 8009a5c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8009a64:	e00d      	b.n	8009a82 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	615a      	str	r2, [r3, #20]
            break;
 8009a70:	e007      	b.n	8009a82 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e2      	bne.n	8009a48 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	77fb      	strb	r3, [r7, #31]
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f383 8810 	msr	PRIMASK, r3
}
 8009a90:	e001      	b.n	8009a96 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8009a92:	2301      	movs	r3, #1
 8009a94:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8009a96:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3720      	adds	r7, #32
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000420 	.word	0x20000420
 8009aa4:	0800a748 	.word	0x0800a748

08009aa8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8009abc:	2301      	movs	r3, #1
 8009abe:	73fb      	strb	r3, [r7, #15]
 8009ac0:	e014      	b.n	8009aec <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8009af8 <UTIL_TIMER_SetPeriod+0x50>)
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac6:	6838      	ldr	r0, [r7, #0]
 8009ac8:	4798      	blx	r3
 8009aca:	4602      	mov	r2, r0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f841 	bl	8009b58 <TimerExists>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff ff73 	bl	80099c8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff ff02 	bl	80098ec <UTIL_TIMER_Start>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	0800a748 	.word	0x0800a748

08009afc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8009b02:	4b06      	ldr	r3, [pc, #24]	@ (8009b1c <UTIL_TIMER_GetCurrentTime+0x20>)
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	4798      	blx	r3
 8009b08:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8009b0a:	4b04      	ldr	r3, [pc, #16]	@ (8009b1c <UTIL_TIMER_GetCurrentTime+0x20>)
 8009b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	4798      	blx	r3
 8009b12:	4603      	mov	r3, r0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	0800a748 	.word	0x0800a748

08009b20 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8009b28:	4b0a      	ldr	r3, [pc, #40]	@ (8009b54 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	4798      	blx	r3
 8009b2e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8009b30:	4b08      	ldr	r3, [pc, #32]	@ (8009b54 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	4798      	blx	r3
 8009b38:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8009b3a:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <UTIL_TIMER_GetElapsedTime+0x34>)
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3e:	68f9      	ldr	r1, [r7, #12]
 8009b40:	68ba      	ldr	r2, [r7, #8]
 8009b42:	1a8a      	subs	r2, r1, r2
 8009b44:	4610      	mov	r0, r2
 8009b46:	4798      	blx	r3
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	0800a748 	.word	0x0800a748

08009b58 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009b60:	4b0a      	ldr	r3, [pc, #40]	@ (8009b8c <TimerExists+0x34>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8009b66:	e008      	b.n	8009b7a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d101      	bne.n	8009b74 <TimerExists+0x1c>
    {
      return true;
 8009b70:	2301      	movs	r3, #1
 8009b72:	e006      	b.n	8009b82 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1f3      	bne.n	8009b68 <TimerExists+0x10>
  }
  return false;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bc80      	pop	{r7}
 8009b8a:	4770      	bx	lr
 8009b8c:	20000420 	.word	0x20000420

08009b90 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8009b90:	b590      	push	{r4, r7, lr}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8009b98:	4b11      	ldr	r3, [pc, #68]	@ (8009be0 <TimerSetTimeout+0x50>)
 8009b9a:	6a1b      	ldr	r3, [r3, #32]
 8009b9c:	4798      	blx	r3
 8009b9e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681c      	ldr	r4, [r3, #0]
 8009baa:	4b0d      	ldr	r3, [pc, #52]	@ (8009be0 <TimerSetTimeout+0x50>)
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	4798      	blx	r3
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	429c      	cmp	r4, r3
 8009bb8:	d207      	bcs.n	8009bca <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8009bba:	4b09      	ldr	r3, [pc, #36]	@ (8009be0 <TimerSetTimeout+0x50>)
 8009bbc:	699b      	ldr	r3, [r3, #24]
 8009bbe:	4798      	blx	r3
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	441a      	add	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8009bca:	4b05      	ldr	r3, [pc, #20]	@ (8009be0 <TimerSetTimeout+0x50>)
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	6812      	ldr	r2, [r2, #0]
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	4798      	blx	r3
}
 8009bd6:	bf00      	nop
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd90      	pop	{r4, r7, pc}
 8009bde:	bf00      	nop
 8009be0:	0800a748 	.word	0x0800a748

08009be4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009bec:	4b14      	ldr	r3, [pc, #80]	@ (8009c40 <TimerInsertTimer+0x5c>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8009bf2:	4b13      	ldr	r3, [pc, #76]	@ (8009c40 <TimerInsertTimer+0x5c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8009bfa:	e012      	b.n	8009c22 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d905      	bls.n	8009c14 <TimerInsertTimer+0x30>
    {
        cur = next;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	695b      	ldr	r3, [r3, #20]
 8009c10:	60bb      	str	r3, [r7, #8]
 8009c12:	e006      	b.n	8009c22 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	615a      	str	r2, [r3, #20]
        return;
 8009c20:	e009      	b.n	8009c36 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e8      	bne.n	8009bfc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	615a      	str	r2, [r3, #20]
}
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	20000420 	.word	0x20000420

08009c44 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8009c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c7c <TimerInsertNewHeadTimer+0x38>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8009c64:	4a05      	ldr	r2, [pc, #20]	@ (8009c7c <TimerInsertNewHeadTimer+0x38>)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8009c6a:	4b04      	ldr	r3, [pc, #16]	@ (8009c7c <TimerInsertNewHeadTimer+0x38>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff ff8e 	bl	8009b90 <TimerSetTimeout>
}
 8009c74:	bf00      	nop
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	20000420 	.word	0x20000420

08009c80 <_vsniprintf_r>:
 8009c80:	b530      	push	{r4, r5, lr}
 8009c82:	4614      	mov	r4, r2
 8009c84:	2c00      	cmp	r4, #0
 8009c86:	b09b      	sub	sp, #108	@ 0x6c
 8009c88:	4605      	mov	r5, r0
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	da05      	bge.n	8009c9a <_vsniprintf_r+0x1a>
 8009c8e:	238b      	movs	r3, #139	@ 0x8b
 8009c90:	6003      	str	r3, [r0, #0]
 8009c92:	f04f 30ff 	mov.w	r0, #4294967295
 8009c96:	b01b      	add	sp, #108	@ 0x6c
 8009c98:	bd30      	pop	{r4, r5, pc}
 8009c9a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009c9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009ca2:	bf14      	ite	ne
 8009ca4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009ca8:	4623      	moveq	r3, r4
 8009caa:	9302      	str	r3, [sp, #8]
 8009cac:	9305      	str	r3, [sp, #20]
 8009cae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009cb2:	9100      	str	r1, [sp, #0]
 8009cb4:	9104      	str	r1, [sp, #16]
 8009cb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009cba:	4669      	mov	r1, sp
 8009cbc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009cbe:	f000 f9af 	bl	800a020 <_svfiprintf_r>
 8009cc2:	1c43      	adds	r3, r0, #1
 8009cc4:	bfbc      	itt	lt
 8009cc6:	238b      	movlt	r3, #139	@ 0x8b
 8009cc8:	602b      	strlt	r3, [r5, #0]
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	d0e3      	beq.n	8009c96 <_vsniprintf_r+0x16>
 8009cce:	9b00      	ldr	r3, [sp, #0]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	701a      	strb	r2, [r3, #0]
 8009cd4:	e7df      	b.n	8009c96 <_vsniprintf_r+0x16>
	...

08009cd8 <vsniprintf>:
 8009cd8:	b507      	push	{r0, r1, r2, lr}
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	460a      	mov	r2, r1
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	4803      	ldr	r0, [pc, #12]	@ (8009cf0 <vsniprintf+0x18>)
 8009ce4:	6800      	ldr	r0, [r0, #0]
 8009ce6:	f7ff ffcb 	bl	8009c80 <_vsniprintf_r>
 8009cea:	b003      	add	sp, #12
 8009cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cf0:	20000010 	.word	0x20000010

08009cf4 <memset>:
 8009cf4:	4402      	add	r2, r0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d100      	bne.n	8009cfe <memset+0xa>
 8009cfc:	4770      	bx	lr
 8009cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009d02:	e7f9      	b.n	8009cf8 <memset+0x4>

08009d04 <__errno>:
 8009d04:	4b01      	ldr	r3, [pc, #4]	@ (8009d0c <__errno+0x8>)
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	20000010 	.word	0x20000010

08009d10 <__libc_init_array>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4d0d      	ldr	r5, [pc, #52]	@ (8009d48 <__libc_init_array+0x38>)
 8009d14:	4c0d      	ldr	r4, [pc, #52]	@ (8009d4c <__libc_init_array+0x3c>)
 8009d16:	1b64      	subs	r4, r4, r5
 8009d18:	10a4      	asrs	r4, r4, #2
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	d109      	bne.n	8009d34 <__libc_init_array+0x24>
 8009d20:	4d0b      	ldr	r5, [pc, #44]	@ (8009d50 <__libc_init_array+0x40>)
 8009d22:	4c0c      	ldr	r4, [pc, #48]	@ (8009d54 <__libc_init_array+0x44>)
 8009d24:	f000 fc66 	bl	800a5f4 <_init>
 8009d28:	1b64      	subs	r4, r4, r5
 8009d2a:	10a4      	asrs	r4, r4, #2
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	d105      	bne.n	8009d3e <__libc_init_array+0x2e>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d38:	4798      	blx	r3
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	e7ee      	b.n	8009d1c <__libc_init_array+0xc>
 8009d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d42:	4798      	blx	r3
 8009d44:	3601      	adds	r6, #1
 8009d46:	e7f2      	b.n	8009d2e <__libc_init_array+0x1e>
 8009d48:	0800a918 	.word	0x0800a918
 8009d4c:	0800a918 	.word	0x0800a918
 8009d50:	0800a918 	.word	0x0800a918
 8009d54:	0800a91c 	.word	0x0800a91c

08009d58 <__retarget_lock_acquire_recursive>:
 8009d58:	4770      	bx	lr

08009d5a <__retarget_lock_release_recursive>:
 8009d5a:	4770      	bx	lr

08009d5c <memcpy>:
 8009d5c:	440a      	add	r2, r1
 8009d5e:	4291      	cmp	r1, r2
 8009d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d64:	d100      	bne.n	8009d68 <memcpy+0xc>
 8009d66:	4770      	bx	lr
 8009d68:	b510      	push	{r4, lr}
 8009d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d72:	4291      	cmp	r1, r2
 8009d74:	d1f9      	bne.n	8009d6a <memcpy+0xe>
 8009d76:	bd10      	pop	{r4, pc}

08009d78 <_free_r>:
 8009d78:	b538      	push	{r3, r4, r5, lr}
 8009d7a:	4605      	mov	r5, r0
 8009d7c:	2900      	cmp	r1, #0
 8009d7e:	d041      	beq.n	8009e04 <_free_r+0x8c>
 8009d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d84:	1f0c      	subs	r4, r1, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bfb8      	it	lt
 8009d8a:	18e4      	addlt	r4, r4, r3
 8009d8c:	f000 f8e0 	bl	8009f50 <__malloc_lock>
 8009d90:	4a1d      	ldr	r2, [pc, #116]	@ (8009e08 <_free_r+0x90>)
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	b933      	cbnz	r3, 8009da4 <_free_r+0x2c>
 8009d96:	6063      	str	r3, [r4, #4]
 8009d98:	6014      	str	r4, [r2, #0]
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009da0:	f000 b8dc 	b.w	8009f5c <__malloc_unlock>
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	d908      	bls.n	8009dba <_free_r+0x42>
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	1821      	adds	r1, r4, r0
 8009dac:	428b      	cmp	r3, r1
 8009dae:	bf01      	itttt	eq
 8009db0:	6819      	ldreq	r1, [r3, #0]
 8009db2:	685b      	ldreq	r3, [r3, #4]
 8009db4:	1809      	addeq	r1, r1, r0
 8009db6:	6021      	streq	r1, [r4, #0]
 8009db8:	e7ed      	b.n	8009d96 <_free_r+0x1e>
 8009dba:	461a      	mov	r2, r3
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	b10b      	cbz	r3, 8009dc4 <_free_r+0x4c>
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d9fa      	bls.n	8009dba <_free_r+0x42>
 8009dc4:	6811      	ldr	r1, [r2, #0]
 8009dc6:	1850      	adds	r0, r2, r1
 8009dc8:	42a0      	cmp	r0, r4
 8009dca:	d10b      	bne.n	8009de4 <_free_r+0x6c>
 8009dcc:	6820      	ldr	r0, [r4, #0]
 8009dce:	4401      	add	r1, r0
 8009dd0:	1850      	adds	r0, r2, r1
 8009dd2:	4283      	cmp	r3, r0
 8009dd4:	6011      	str	r1, [r2, #0]
 8009dd6:	d1e0      	bne.n	8009d9a <_free_r+0x22>
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	6053      	str	r3, [r2, #4]
 8009dde:	4408      	add	r0, r1
 8009de0:	6010      	str	r0, [r2, #0]
 8009de2:	e7da      	b.n	8009d9a <_free_r+0x22>
 8009de4:	d902      	bls.n	8009dec <_free_r+0x74>
 8009de6:	230c      	movs	r3, #12
 8009de8:	602b      	str	r3, [r5, #0]
 8009dea:	e7d6      	b.n	8009d9a <_free_r+0x22>
 8009dec:	6820      	ldr	r0, [r4, #0]
 8009dee:	1821      	adds	r1, r4, r0
 8009df0:	428b      	cmp	r3, r1
 8009df2:	bf04      	itt	eq
 8009df4:	6819      	ldreq	r1, [r3, #0]
 8009df6:	685b      	ldreq	r3, [r3, #4]
 8009df8:	6063      	str	r3, [r4, #4]
 8009dfa:	bf04      	itt	eq
 8009dfc:	1809      	addeq	r1, r1, r0
 8009dfe:	6021      	streq	r1, [r4, #0]
 8009e00:	6054      	str	r4, [r2, #4]
 8009e02:	e7ca      	b.n	8009d9a <_free_r+0x22>
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	bf00      	nop
 8009e08:	20000568 	.word	0x20000568

08009e0c <sbrk_aligned>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8009e4c <sbrk_aligned+0x40>)
 8009e10:	460c      	mov	r4, r1
 8009e12:	6831      	ldr	r1, [r6, #0]
 8009e14:	4605      	mov	r5, r0
 8009e16:	b911      	cbnz	r1, 8009e1e <sbrk_aligned+0x12>
 8009e18:	f000 fba6 	bl	800a568 <_sbrk_r>
 8009e1c:	6030      	str	r0, [r6, #0]
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4628      	mov	r0, r5
 8009e22:	f000 fba1 	bl	800a568 <_sbrk_r>
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	d103      	bne.n	8009e32 <sbrk_aligned+0x26>
 8009e2a:	f04f 34ff 	mov.w	r4, #4294967295
 8009e2e:	4620      	mov	r0, r4
 8009e30:	bd70      	pop	{r4, r5, r6, pc}
 8009e32:	1cc4      	adds	r4, r0, #3
 8009e34:	f024 0403 	bic.w	r4, r4, #3
 8009e38:	42a0      	cmp	r0, r4
 8009e3a:	d0f8      	beq.n	8009e2e <sbrk_aligned+0x22>
 8009e3c:	1a21      	subs	r1, r4, r0
 8009e3e:	4628      	mov	r0, r5
 8009e40:	f000 fb92 	bl	800a568 <_sbrk_r>
 8009e44:	3001      	adds	r0, #1
 8009e46:	d1f2      	bne.n	8009e2e <sbrk_aligned+0x22>
 8009e48:	e7ef      	b.n	8009e2a <sbrk_aligned+0x1e>
 8009e4a:	bf00      	nop
 8009e4c:	20000564 	.word	0x20000564

08009e50 <_malloc_r>:
 8009e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e54:	1ccd      	adds	r5, r1, #3
 8009e56:	f025 0503 	bic.w	r5, r5, #3
 8009e5a:	3508      	adds	r5, #8
 8009e5c:	2d0c      	cmp	r5, #12
 8009e5e:	bf38      	it	cc
 8009e60:	250c      	movcc	r5, #12
 8009e62:	2d00      	cmp	r5, #0
 8009e64:	4606      	mov	r6, r0
 8009e66:	db01      	blt.n	8009e6c <_malloc_r+0x1c>
 8009e68:	42a9      	cmp	r1, r5
 8009e6a:	d904      	bls.n	8009e76 <_malloc_r+0x26>
 8009e6c:	230c      	movs	r3, #12
 8009e6e:	6033      	str	r3, [r6, #0]
 8009e70:	2000      	movs	r0, #0
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f4c <_malloc_r+0xfc>
 8009e7a:	f000 f869 	bl	8009f50 <__malloc_lock>
 8009e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009e82:	461c      	mov	r4, r3
 8009e84:	bb44      	cbnz	r4, 8009ed8 <_malloc_r+0x88>
 8009e86:	4629      	mov	r1, r5
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f7ff ffbf 	bl	8009e0c <sbrk_aligned>
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	4604      	mov	r4, r0
 8009e92:	d158      	bne.n	8009f46 <_malloc_r+0xf6>
 8009e94:	f8d8 4000 	ldr.w	r4, [r8]
 8009e98:	4627      	mov	r7, r4
 8009e9a:	2f00      	cmp	r7, #0
 8009e9c:	d143      	bne.n	8009f26 <_malloc_r+0xd6>
 8009e9e:	2c00      	cmp	r4, #0
 8009ea0:	d04b      	beq.n	8009f3a <_malloc_r+0xea>
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	eb04 0903 	add.w	r9, r4, r3
 8009eac:	f000 fb5c 	bl	800a568 <_sbrk_r>
 8009eb0:	4581      	cmp	r9, r0
 8009eb2:	d142      	bne.n	8009f3a <_malloc_r+0xea>
 8009eb4:	6821      	ldr	r1, [r4, #0]
 8009eb6:	1a6d      	subs	r5, r5, r1
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ffa6 	bl	8009e0c <sbrk_aligned>
 8009ec0:	3001      	adds	r0, #1
 8009ec2:	d03a      	beq.n	8009f3a <_malloc_r+0xea>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	442b      	add	r3, r5
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	f8d8 3000 	ldr.w	r3, [r8]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	bb62      	cbnz	r2, 8009f2c <_malloc_r+0xdc>
 8009ed2:	f8c8 7000 	str.w	r7, [r8]
 8009ed6:	e00f      	b.n	8009ef8 <_malloc_r+0xa8>
 8009ed8:	6822      	ldr	r2, [r4, #0]
 8009eda:	1b52      	subs	r2, r2, r5
 8009edc:	d420      	bmi.n	8009f20 <_malloc_r+0xd0>
 8009ede:	2a0b      	cmp	r2, #11
 8009ee0:	d917      	bls.n	8009f12 <_malloc_r+0xc2>
 8009ee2:	1961      	adds	r1, r4, r5
 8009ee4:	42a3      	cmp	r3, r4
 8009ee6:	6025      	str	r5, [r4, #0]
 8009ee8:	bf18      	it	ne
 8009eea:	6059      	strne	r1, [r3, #4]
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	bf08      	it	eq
 8009ef0:	f8c8 1000 	streq.w	r1, [r8]
 8009ef4:	5162      	str	r2, [r4, r5]
 8009ef6:	604b      	str	r3, [r1, #4]
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 f82f 	bl	8009f5c <__malloc_unlock>
 8009efe:	f104 000b 	add.w	r0, r4, #11
 8009f02:	1d23      	adds	r3, r4, #4
 8009f04:	f020 0007 	bic.w	r0, r0, #7
 8009f08:	1ac2      	subs	r2, r0, r3
 8009f0a:	bf1c      	itt	ne
 8009f0c:	1a1b      	subne	r3, r3, r0
 8009f0e:	50a3      	strne	r3, [r4, r2]
 8009f10:	e7af      	b.n	8009e72 <_malloc_r+0x22>
 8009f12:	6862      	ldr	r2, [r4, #4]
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	bf0c      	ite	eq
 8009f18:	f8c8 2000 	streq.w	r2, [r8]
 8009f1c:	605a      	strne	r2, [r3, #4]
 8009f1e:	e7eb      	b.n	8009ef8 <_malloc_r+0xa8>
 8009f20:	4623      	mov	r3, r4
 8009f22:	6864      	ldr	r4, [r4, #4]
 8009f24:	e7ae      	b.n	8009e84 <_malloc_r+0x34>
 8009f26:	463c      	mov	r4, r7
 8009f28:	687f      	ldr	r7, [r7, #4]
 8009f2a:	e7b6      	b.n	8009e9a <_malloc_r+0x4a>
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d1fb      	bne.n	8009f2c <_malloc_r+0xdc>
 8009f34:	2300      	movs	r3, #0
 8009f36:	6053      	str	r3, [r2, #4]
 8009f38:	e7de      	b.n	8009ef8 <_malloc_r+0xa8>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	6033      	str	r3, [r6, #0]
 8009f3e:	4630      	mov	r0, r6
 8009f40:	f000 f80c 	bl	8009f5c <__malloc_unlock>
 8009f44:	e794      	b.n	8009e70 <_malloc_r+0x20>
 8009f46:	6005      	str	r5, [r0, #0]
 8009f48:	e7d6      	b.n	8009ef8 <_malloc_r+0xa8>
 8009f4a:	bf00      	nop
 8009f4c:	20000568 	.word	0x20000568

08009f50 <__malloc_lock>:
 8009f50:	4801      	ldr	r0, [pc, #4]	@ (8009f58 <__malloc_lock+0x8>)
 8009f52:	f7ff bf01 	b.w	8009d58 <__retarget_lock_acquire_recursive>
 8009f56:	bf00      	nop
 8009f58:	20000560 	.word	0x20000560

08009f5c <__malloc_unlock>:
 8009f5c:	4801      	ldr	r0, [pc, #4]	@ (8009f64 <__malloc_unlock+0x8>)
 8009f5e:	f7ff befc 	b.w	8009d5a <__retarget_lock_release_recursive>
 8009f62:	bf00      	nop
 8009f64:	20000560 	.word	0x20000560

08009f68 <__ssputs_r>:
 8009f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6c:	688e      	ldr	r6, [r1, #8]
 8009f6e:	461f      	mov	r7, r3
 8009f70:	42be      	cmp	r6, r7
 8009f72:	680b      	ldr	r3, [r1, #0]
 8009f74:	4682      	mov	sl, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	4690      	mov	r8, r2
 8009f7a:	d82d      	bhi.n	8009fd8 <__ssputs_r+0x70>
 8009f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f84:	d026      	beq.n	8009fd4 <__ssputs_r+0x6c>
 8009f86:	6965      	ldr	r5, [r4, #20]
 8009f88:	6909      	ldr	r1, [r1, #16]
 8009f8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f8e:	eba3 0901 	sub.w	r9, r3, r1
 8009f92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f96:	1c7b      	adds	r3, r7, #1
 8009f98:	444b      	add	r3, r9
 8009f9a:	106d      	asrs	r5, r5, #1
 8009f9c:	429d      	cmp	r5, r3
 8009f9e:	bf38      	it	cc
 8009fa0:	461d      	movcc	r5, r3
 8009fa2:	0553      	lsls	r3, r2, #21
 8009fa4:	d527      	bpl.n	8009ff6 <__ssputs_r+0x8e>
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f7ff ff52 	bl	8009e50 <_malloc_r>
 8009fac:	4606      	mov	r6, r0
 8009fae:	b360      	cbz	r0, 800a00a <__ssputs_r+0xa2>
 8009fb0:	6921      	ldr	r1, [r4, #16]
 8009fb2:	464a      	mov	r2, r9
 8009fb4:	f7ff fed2 	bl	8009d5c <memcpy>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	6126      	str	r6, [r4, #16]
 8009fc6:	6165      	str	r5, [r4, #20]
 8009fc8:	444e      	add	r6, r9
 8009fca:	eba5 0509 	sub.w	r5, r5, r9
 8009fce:	6026      	str	r6, [r4, #0]
 8009fd0:	60a5      	str	r5, [r4, #8]
 8009fd2:	463e      	mov	r6, r7
 8009fd4:	42be      	cmp	r6, r7
 8009fd6:	d900      	bls.n	8009fda <__ssputs_r+0x72>
 8009fd8:	463e      	mov	r6, r7
 8009fda:	6820      	ldr	r0, [r4, #0]
 8009fdc:	4632      	mov	r2, r6
 8009fde:	4641      	mov	r1, r8
 8009fe0:	f000 faa8 	bl	800a534 <memmove>
 8009fe4:	68a3      	ldr	r3, [r4, #8]
 8009fe6:	1b9b      	subs	r3, r3, r6
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	4433      	add	r3, r6
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff6:	462a      	mov	r2, r5
 8009ff8:	f000 fac6 	bl	800a588 <_realloc_r>
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d1e0      	bne.n	8009fc4 <__ssputs_r+0x5c>
 800a002:	6921      	ldr	r1, [r4, #16]
 800a004:	4650      	mov	r0, sl
 800a006:	f7ff feb7 	bl	8009d78 <_free_r>
 800a00a:	230c      	movs	r3, #12
 800a00c:	f8ca 3000 	str.w	r3, [sl]
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	e7e9      	b.n	8009ff2 <__ssputs_r+0x8a>
	...

0800a020 <_svfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	4698      	mov	r8, r3
 800a026:	898b      	ldrh	r3, [r1, #12]
 800a028:	061b      	lsls	r3, r3, #24
 800a02a:	b09d      	sub	sp, #116	@ 0x74
 800a02c:	4607      	mov	r7, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	4614      	mov	r4, r2
 800a032:	d510      	bpl.n	800a056 <_svfiprintf_r+0x36>
 800a034:	690b      	ldr	r3, [r1, #16]
 800a036:	b973      	cbnz	r3, 800a056 <_svfiprintf_r+0x36>
 800a038:	2140      	movs	r1, #64	@ 0x40
 800a03a:	f7ff ff09 	bl	8009e50 <_malloc_r>
 800a03e:	6028      	str	r0, [r5, #0]
 800a040:	6128      	str	r0, [r5, #16]
 800a042:	b930      	cbnz	r0, 800a052 <_svfiprintf_r+0x32>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	b01d      	add	sp, #116	@ 0x74
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	2340      	movs	r3, #64	@ 0x40
 800a054:	616b      	str	r3, [r5, #20]
 800a056:	2300      	movs	r3, #0
 800a058:	9309      	str	r3, [sp, #36]	@ 0x24
 800a05a:	2320      	movs	r3, #32
 800a05c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a060:	f8cd 800c 	str.w	r8, [sp, #12]
 800a064:	2330      	movs	r3, #48	@ 0x30
 800a066:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a204 <_svfiprintf_r+0x1e4>
 800a06a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a06e:	f04f 0901 	mov.w	r9, #1
 800a072:	4623      	mov	r3, r4
 800a074:	469a      	mov	sl, r3
 800a076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a07a:	b10a      	cbz	r2, 800a080 <_svfiprintf_r+0x60>
 800a07c:	2a25      	cmp	r2, #37	@ 0x25
 800a07e:	d1f9      	bne.n	800a074 <_svfiprintf_r+0x54>
 800a080:	ebba 0b04 	subs.w	fp, sl, r4
 800a084:	d00b      	beq.n	800a09e <_svfiprintf_r+0x7e>
 800a086:	465b      	mov	r3, fp
 800a088:	4622      	mov	r2, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	4638      	mov	r0, r7
 800a08e:	f7ff ff6b 	bl	8009f68 <__ssputs_r>
 800a092:	3001      	adds	r0, #1
 800a094:	f000 80a7 	beq.w	800a1e6 <_svfiprintf_r+0x1c6>
 800a098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a09a:	445a      	add	r2, fp
 800a09c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a09e:	f89a 3000 	ldrb.w	r3, [sl]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 809f 	beq.w	800a1e6 <_svfiprintf_r+0x1c6>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0b2:	f10a 0a01 	add.w	sl, sl, #1
 800a0b6:	9304      	str	r3, [sp, #16]
 800a0b8:	9307      	str	r3, [sp, #28]
 800a0ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0be:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0c0:	4654      	mov	r4, sl
 800a0c2:	2205      	movs	r2, #5
 800a0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c8:	484e      	ldr	r0, [pc, #312]	@ (800a204 <_svfiprintf_r+0x1e4>)
 800a0ca:	f7f6 f859 	bl	8000180 <memchr>
 800a0ce:	9a04      	ldr	r2, [sp, #16]
 800a0d0:	b9d8      	cbnz	r0, 800a10a <_svfiprintf_r+0xea>
 800a0d2:	06d0      	lsls	r0, r2, #27
 800a0d4:	bf44      	itt	mi
 800a0d6:	2320      	movmi	r3, #32
 800a0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0dc:	0711      	lsls	r1, r2, #28
 800a0de:	bf44      	itt	mi
 800a0e0:	232b      	movmi	r3, #43	@ 0x2b
 800a0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ec:	d015      	beq.n	800a11a <_svfiprintf_r+0xfa>
 800a0ee:	9a07      	ldr	r2, [sp, #28]
 800a0f0:	4654      	mov	r4, sl
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	f04f 0c0a 	mov.w	ip, #10
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0fe:	3b30      	subs	r3, #48	@ 0x30
 800a100:	2b09      	cmp	r3, #9
 800a102:	d94b      	bls.n	800a19c <_svfiprintf_r+0x17c>
 800a104:	b1b0      	cbz	r0, 800a134 <_svfiprintf_r+0x114>
 800a106:	9207      	str	r2, [sp, #28]
 800a108:	e014      	b.n	800a134 <_svfiprintf_r+0x114>
 800a10a:	eba0 0308 	sub.w	r3, r0, r8
 800a10e:	fa09 f303 	lsl.w	r3, r9, r3
 800a112:	4313      	orrs	r3, r2
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	46a2      	mov	sl, r4
 800a118:	e7d2      	b.n	800a0c0 <_svfiprintf_r+0xa0>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	1d19      	adds	r1, r3, #4
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	9103      	str	r1, [sp, #12]
 800a122:	2b00      	cmp	r3, #0
 800a124:	bfbb      	ittet	lt
 800a126:	425b      	neglt	r3, r3
 800a128:	f042 0202 	orrlt.w	r2, r2, #2
 800a12c:	9307      	strge	r3, [sp, #28]
 800a12e:	9307      	strlt	r3, [sp, #28]
 800a130:	bfb8      	it	lt
 800a132:	9204      	strlt	r2, [sp, #16]
 800a134:	7823      	ldrb	r3, [r4, #0]
 800a136:	2b2e      	cmp	r3, #46	@ 0x2e
 800a138:	d10a      	bne.n	800a150 <_svfiprintf_r+0x130>
 800a13a:	7863      	ldrb	r3, [r4, #1]
 800a13c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a13e:	d132      	bne.n	800a1a6 <_svfiprintf_r+0x186>
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	1d1a      	adds	r2, r3, #4
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	9203      	str	r2, [sp, #12]
 800a148:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a14c:	3402      	adds	r4, #2
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a208 <_svfiprintf_r+0x1e8>
 800a154:	7821      	ldrb	r1, [r4, #0]
 800a156:	2203      	movs	r2, #3
 800a158:	4650      	mov	r0, sl
 800a15a:	f7f6 f811 	bl	8000180 <memchr>
 800a15e:	b138      	cbz	r0, 800a170 <_svfiprintf_r+0x150>
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	eba0 000a 	sub.w	r0, r0, sl
 800a166:	2240      	movs	r2, #64	@ 0x40
 800a168:	4082      	lsls	r2, r0
 800a16a:	4313      	orrs	r3, r2
 800a16c:	3401      	adds	r4, #1
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	4825      	ldr	r0, [pc, #148]	@ (800a20c <_svfiprintf_r+0x1ec>)
 800a176:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a17a:	2206      	movs	r2, #6
 800a17c:	f7f6 f800 	bl	8000180 <memchr>
 800a180:	2800      	cmp	r0, #0
 800a182:	d036      	beq.n	800a1f2 <_svfiprintf_r+0x1d2>
 800a184:	4b22      	ldr	r3, [pc, #136]	@ (800a210 <_svfiprintf_r+0x1f0>)
 800a186:	bb1b      	cbnz	r3, 800a1d0 <_svfiprintf_r+0x1b0>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	3307      	adds	r3, #7
 800a18c:	f023 0307 	bic.w	r3, r3, #7
 800a190:	3308      	adds	r3, #8
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a196:	4433      	add	r3, r6
 800a198:	9309      	str	r3, [sp, #36]	@ 0x24
 800a19a:	e76a      	b.n	800a072 <_svfiprintf_r+0x52>
 800a19c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	e7a8      	b.n	800a0f8 <_svfiprintf_r+0xd8>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	3401      	adds	r4, #1
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f04f 0c0a 	mov.w	ip, #10
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b8:	3a30      	subs	r2, #48	@ 0x30
 800a1ba:	2a09      	cmp	r2, #9
 800a1bc:	d903      	bls.n	800a1c6 <_svfiprintf_r+0x1a6>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c6      	beq.n	800a150 <_svfiprintf_r+0x130>
 800a1c2:	9105      	str	r1, [sp, #20]
 800a1c4:	e7c4      	b.n	800a150 <_svfiprintf_r+0x130>
 800a1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e7f0      	b.n	800a1b2 <_svfiprintf_r+0x192>
 800a1d0:	ab03      	add	r3, sp, #12
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a214 <_svfiprintf_r+0x1f4>)
 800a1d8:	a904      	add	r1, sp, #16
 800a1da:	4638      	mov	r0, r7
 800a1dc:	f3af 8000 	nop.w
 800a1e0:	1c42      	adds	r2, r0, #1
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	d1d6      	bne.n	800a194 <_svfiprintf_r+0x174>
 800a1e6:	89ab      	ldrh	r3, [r5, #12]
 800a1e8:	065b      	lsls	r3, r3, #25
 800a1ea:	f53f af2d 	bmi.w	800a048 <_svfiprintf_r+0x28>
 800a1ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1f0:	e72c      	b.n	800a04c <_svfiprintf_r+0x2c>
 800a1f2:	ab03      	add	r3, sp, #12
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	462a      	mov	r2, r5
 800a1f8:	4b06      	ldr	r3, [pc, #24]	@ (800a214 <_svfiprintf_r+0x1f4>)
 800a1fa:	a904      	add	r1, sp, #16
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	f000 f879 	bl	800a2f4 <_printf_i>
 800a202:	e7ed      	b.n	800a1e0 <_svfiprintf_r+0x1c0>
 800a204:	0800a8dc 	.word	0x0800a8dc
 800a208:	0800a8e2 	.word	0x0800a8e2
 800a20c:	0800a8e6 	.word	0x0800a8e6
 800a210:	00000000 	.word	0x00000000
 800a214:	08009f69 	.word	0x08009f69

0800a218 <_printf_common>:
 800a218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a21c:	4616      	mov	r6, r2
 800a21e:	4698      	mov	r8, r3
 800a220:	688a      	ldr	r2, [r1, #8]
 800a222:	690b      	ldr	r3, [r1, #16]
 800a224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a228:	4293      	cmp	r3, r2
 800a22a:	bfb8      	it	lt
 800a22c:	4613      	movlt	r3, r2
 800a22e:	6033      	str	r3, [r6, #0]
 800a230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a234:	4607      	mov	r7, r0
 800a236:	460c      	mov	r4, r1
 800a238:	b10a      	cbz	r2, 800a23e <_printf_common+0x26>
 800a23a:	3301      	adds	r3, #1
 800a23c:	6033      	str	r3, [r6, #0]
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	0699      	lsls	r1, r3, #26
 800a242:	bf42      	ittt	mi
 800a244:	6833      	ldrmi	r3, [r6, #0]
 800a246:	3302      	addmi	r3, #2
 800a248:	6033      	strmi	r3, [r6, #0]
 800a24a:	6825      	ldr	r5, [r4, #0]
 800a24c:	f015 0506 	ands.w	r5, r5, #6
 800a250:	d106      	bne.n	800a260 <_printf_common+0x48>
 800a252:	f104 0a19 	add.w	sl, r4, #25
 800a256:	68e3      	ldr	r3, [r4, #12]
 800a258:	6832      	ldr	r2, [r6, #0]
 800a25a:	1a9b      	subs	r3, r3, r2
 800a25c:	42ab      	cmp	r3, r5
 800a25e:	dc26      	bgt.n	800a2ae <_printf_common+0x96>
 800a260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a264:	6822      	ldr	r2, [r4, #0]
 800a266:	3b00      	subs	r3, #0
 800a268:	bf18      	it	ne
 800a26a:	2301      	movne	r3, #1
 800a26c:	0692      	lsls	r2, r2, #26
 800a26e:	d42b      	bmi.n	800a2c8 <_printf_common+0xb0>
 800a270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a274:	4641      	mov	r1, r8
 800a276:	4638      	mov	r0, r7
 800a278:	47c8      	blx	r9
 800a27a:	3001      	adds	r0, #1
 800a27c:	d01e      	beq.n	800a2bc <_printf_common+0xa4>
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	6922      	ldr	r2, [r4, #16]
 800a282:	f003 0306 	and.w	r3, r3, #6
 800a286:	2b04      	cmp	r3, #4
 800a288:	bf02      	ittt	eq
 800a28a:	68e5      	ldreq	r5, [r4, #12]
 800a28c:	6833      	ldreq	r3, [r6, #0]
 800a28e:	1aed      	subeq	r5, r5, r3
 800a290:	68a3      	ldr	r3, [r4, #8]
 800a292:	bf0c      	ite	eq
 800a294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a298:	2500      	movne	r5, #0
 800a29a:	4293      	cmp	r3, r2
 800a29c:	bfc4      	itt	gt
 800a29e:	1a9b      	subgt	r3, r3, r2
 800a2a0:	18ed      	addgt	r5, r5, r3
 800a2a2:	2600      	movs	r6, #0
 800a2a4:	341a      	adds	r4, #26
 800a2a6:	42b5      	cmp	r5, r6
 800a2a8:	d11a      	bne.n	800a2e0 <_printf_common+0xc8>
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e008      	b.n	800a2c0 <_printf_common+0xa8>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4652      	mov	r2, sl
 800a2b2:	4641      	mov	r1, r8
 800a2b4:	4638      	mov	r0, r7
 800a2b6:	47c8      	blx	r9
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d103      	bne.n	800a2c4 <_printf_common+0xac>
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	e7c6      	b.n	800a256 <_printf_common+0x3e>
 800a2c8:	18e1      	adds	r1, r4, r3
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	2030      	movs	r0, #48	@ 0x30
 800a2ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2d2:	4422      	add	r2, r4
 800a2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2dc:	3302      	adds	r3, #2
 800a2de:	e7c7      	b.n	800a270 <_printf_common+0x58>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	4641      	mov	r1, r8
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	47c8      	blx	r9
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d0e6      	beq.n	800a2bc <_printf_common+0xa4>
 800a2ee:	3601      	adds	r6, #1
 800a2f0:	e7d9      	b.n	800a2a6 <_printf_common+0x8e>
	...

0800a2f4 <_printf_i>:
 800a2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f8:	7e0f      	ldrb	r7, [r1, #24]
 800a2fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2fc:	2f78      	cmp	r7, #120	@ 0x78
 800a2fe:	4691      	mov	r9, r2
 800a300:	4680      	mov	r8, r0
 800a302:	460c      	mov	r4, r1
 800a304:	469a      	mov	sl, r3
 800a306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a30a:	d807      	bhi.n	800a31c <_printf_i+0x28>
 800a30c:	2f62      	cmp	r7, #98	@ 0x62
 800a30e:	d80a      	bhi.n	800a326 <_printf_i+0x32>
 800a310:	2f00      	cmp	r7, #0
 800a312:	f000 80d2 	beq.w	800a4ba <_printf_i+0x1c6>
 800a316:	2f58      	cmp	r7, #88	@ 0x58
 800a318:	f000 80b9 	beq.w	800a48e <_printf_i+0x19a>
 800a31c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a324:	e03a      	b.n	800a39c <_printf_i+0xa8>
 800a326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a32a:	2b15      	cmp	r3, #21
 800a32c:	d8f6      	bhi.n	800a31c <_printf_i+0x28>
 800a32e:	a101      	add	r1, pc, #4	@ (adr r1, 800a334 <_printf_i+0x40>)
 800a330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a334:	0800a38d 	.word	0x0800a38d
 800a338:	0800a3a1 	.word	0x0800a3a1
 800a33c:	0800a31d 	.word	0x0800a31d
 800a340:	0800a31d 	.word	0x0800a31d
 800a344:	0800a31d 	.word	0x0800a31d
 800a348:	0800a31d 	.word	0x0800a31d
 800a34c:	0800a3a1 	.word	0x0800a3a1
 800a350:	0800a31d 	.word	0x0800a31d
 800a354:	0800a31d 	.word	0x0800a31d
 800a358:	0800a31d 	.word	0x0800a31d
 800a35c:	0800a31d 	.word	0x0800a31d
 800a360:	0800a4a1 	.word	0x0800a4a1
 800a364:	0800a3cb 	.word	0x0800a3cb
 800a368:	0800a45b 	.word	0x0800a45b
 800a36c:	0800a31d 	.word	0x0800a31d
 800a370:	0800a31d 	.word	0x0800a31d
 800a374:	0800a4c3 	.word	0x0800a4c3
 800a378:	0800a31d 	.word	0x0800a31d
 800a37c:	0800a3cb 	.word	0x0800a3cb
 800a380:	0800a31d 	.word	0x0800a31d
 800a384:	0800a31d 	.word	0x0800a31d
 800a388:	0800a463 	.word	0x0800a463
 800a38c:	6833      	ldr	r3, [r6, #0]
 800a38e:	1d1a      	adds	r2, r3, #4
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	6032      	str	r2, [r6, #0]
 800a394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a39c:	2301      	movs	r3, #1
 800a39e:	e09d      	b.n	800a4dc <_printf_i+0x1e8>
 800a3a0:	6833      	ldr	r3, [r6, #0]
 800a3a2:	6820      	ldr	r0, [r4, #0]
 800a3a4:	1d19      	adds	r1, r3, #4
 800a3a6:	6031      	str	r1, [r6, #0]
 800a3a8:	0606      	lsls	r6, r0, #24
 800a3aa:	d501      	bpl.n	800a3b0 <_printf_i+0xbc>
 800a3ac:	681d      	ldr	r5, [r3, #0]
 800a3ae:	e003      	b.n	800a3b8 <_printf_i+0xc4>
 800a3b0:	0645      	lsls	r5, r0, #25
 800a3b2:	d5fb      	bpl.n	800a3ac <_printf_i+0xb8>
 800a3b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	da03      	bge.n	800a3c4 <_printf_i+0xd0>
 800a3bc:	232d      	movs	r3, #45	@ 0x2d
 800a3be:	426d      	negs	r5, r5
 800a3c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3c4:	4859      	ldr	r0, [pc, #356]	@ (800a52c <_printf_i+0x238>)
 800a3c6:	230a      	movs	r3, #10
 800a3c8:	e011      	b.n	800a3ee <_printf_i+0xfa>
 800a3ca:	6821      	ldr	r1, [r4, #0]
 800a3cc:	6833      	ldr	r3, [r6, #0]
 800a3ce:	0608      	lsls	r0, r1, #24
 800a3d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3d4:	d402      	bmi.n	800a3dc <_printf_i+0xe8>
 800a3d6:	0649      	lsls	r1, r1, #25
 800a3d8:	bf48      	it	mi
 800a3da:	b2ad      	uxthmi	r5, r5
 800a3dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3de:	4853      	ldr	r0, [pc, #332]	@ (800a52c <_printf_i+0x238>)
 800a3e0:	6033      	str	r3, [r6, #0]
 800a3e2:	bf14      	ite	ne
 800a3e4:	230a      	movne	r3, #10
 800a3e6:	2308      	moveq	r3, #8
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3ee:	6866      	ldr	r6, [r4, #4]
 800a3f0:	60a6      	str	r6, [r4, #8]
 800a3f2:	2e00      	cmp	r6, #0
 800a3f4:	bfa2      	ittt	ge
 800a3f6:	6821      	ldrge	r1, [r4, #0]
 800a3f8:	f021 0104 	bicge.w	r1, r1, #4
 800a3fc:	6021      	strge	r1, [r4, #0]
 800a3fe:	b90d      	cbnz	r5, 800a404 <_printf_i+0x110>
 800a400:	2e00      	cmp	r6, #0
 800a402:	d04b      	beq.n	800a49c <_printf_i+0x1a8>
 800a404:	4616      	mov	r6, r2
 800a406:	fbb5 f1f3 	udiv	r1, r5, r3
 800a40a:	fb03 5711 	mls	r7, r3, r1, r5
 800a40e:	5dc7      	ldrb	r7, [r0, r7]
 800a410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a414:	462f      	mov	r7, r5
 800a416:	42bb      	cmp	r3, r7
 800a418:	460d      	mov	r5, r1
 800a41a:	d9f4      	bls.n	800a406 <_printf_i+0x112>
 800a41c:	2b08      	cmp	r3, #8
 800a41e:	d10b      	bne.n	800a438 <_printf_i+0x144>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	07df      	lsls	r7, r3, #31
 800a424:	d508      	bpl.n	800a438 <_printf_i+0x144>
 800a426:	6923      	ldr	r3, [r4, #16]
 800a428:	6861      	ldr	r1, [r4, #4]
 800a42a:	4299      	cmp	r1, r3
 800a42c:	bfde      	ittt	le
 800a42e:	2330      	movle	r3, #48	@ 0x30
 800a430:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a434:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a438:	1b92      	subs	r2, r2, r6
 800a43a:	6122      	str	r2, [r4, #16]
 800a43c:	f8cd a000 	str.w	sl, [sp]
 800a440:	464b      	mov	r3, r9
 800a442:	aa03      	add	r2, sp, #12
 800a444:	4621      	mov	r1, r4
 800a446:	4640      	mov	r0, r8
 800a448:	f7ff fee6 	bl	800a218 <_printf_common>
 800a44c:	3001      	adds	r0, #1
 800a44e:	d14a      	bne.n	800a4e6 <_printf_i+0x1f2>
 800a450:	f04f 30ff 	mov.w	r0, #4294967295
 800a454:	b004      	add	sp, #16
 800a456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	f043 0320 	orr.w	r3, r3, #32
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	4833      	ldr	r0, [pc, #204]	@ (800a530 <_printf_i+0x23c>)
 800a464:	2778      	movs	r7, #120	@ 0x78
 800a466:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	6831      	ldr	r1, [r6, #0]
 800a46e:	061f      	lsls	r7, r3, #24
 800a470:	f851 5b04 	ldr.w	r5, [r1], #4
 800a474:	d402      	bmi.n	800a47c <_printf_i+0x188>
 800a476:	065f      	lsls	r7, r3, #25
 800a478:	bf48      	it	mi
 800a47a:	b2ad      	uxthmi	r5, r5
 800a47c:	6031      	str	r1, [r6, #0]
 800a47e:	07d9      	lsls	r1, r3, #31
 800a480:	bf44      	itt	mi
 800a482:	f043 0320 	orrmi.w	r3, r3, #32
 800a486:	6023      	strmi	r3, [r4, #0]
 800a488:	b11d      	cbz	r5, 800a492 <_printf_i+0x19e>
 800a48a:	2310      	movs	r3, #16
 800a48c:	e7ac      	b.n	800a3e8 <_printf_i+0xf4>
 800a48e:	4827      	ldr	r0, [pc, #156]	@ (800a52c <_printf_i+0x238>)
 800a490:	e7e9      	b.n	800a466 <_printf_i+0x172>
 800a492:	6823      	ldr	r3, [r4, #0]
 800a494:	f023 0320 	bic.w	r3, r3, #32
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	e7f6      	b.n	800a48a <_printf_i+0x196>
 800a49c:	4616      	mov	r6, r2
 800a49e:	e7bd      	b.n	800a41c <_printf_i+0x128>
 800a4a0:	6833      	ldr	r3, [r6, #0]
 800a4a2:	6825      	ldr	r5, [r4, #0]
 800a4a4:	6961      	ldr	r1, [r4, #20]
 800a4a6:	1d18      	adds	r0, r3, #4
 800a4a8:	6030      	str	r0, [r6, #0]
 800a4aa:	062e      	lsls	r6, r5, #24
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	d501      	bpl.n	800a4b4 <_printf_i+0x1c0>
 800a4b0:	6019      	str	r1, [r3, #0]
 800a4b2:	e002      	b.n	800a4ba <_printf_i+0x1c6>
 800a4b4:	0668      	lsls	r0, r5, #25
 800a4b6:	d5fb      	bpl.n	800a4b0 <_printf_i+0x1bc>
 800a4b8:	8019      	strh	r1, [r3, #0]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6123      	str	r3, [r4, #16]
 800a4be:	4616      	mov	r6, r2
 800a4c0:	e7bc      	b.n	800a43c <_printf_i+0x148>
 800a4c2:	6833      	ldr	r3, [r6, #0]
 800a4c4:	1d1a      	adds	r2, r3, #4
 800a4c6:	6032      	str	r2, [r6, #0]
 800a4c8:	681e      	ldr	r6, [r3, #0]
 800a4ca:	6862      	ldr	r2, [r4, #4]
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f7f5 fe56 	bl	8000180 <memchr>
 800a4d4:	b108      	cbz	r0, 800a4da <_printf_i+0x1e6>
 800a4d6:	1b80      	subs	r0, r0, r6
 800a4d8:	6060      	str	r0, [r4, #4]
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	6123      	str	r3, [r4, #16]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4e4:	e7aa      	b.n	800a43c <_printf_i+0x148>
 800a4e6:	6923      	ldr	r3, [r4, #16]
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	47d0      	blx	sl
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	d0ad      	beq.n	800a450 <_printf_i+0x15c>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	079b      	lsls	r3, r3, #30
 800a4f8:	d413      	bmi.n	800a522 <_printf_i+0x22e>
 800a4fa:	68e0      	ldr	r0, [r4, #12]
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	4298      	cmp	r0, r3
 800a500:	bfb8      	it	lt
 800a502:	4618      	movlt	r0, r3
 800a504:	e7a6      	b.n	800a454 <_printf_i+0x160>
 800a506:	2301      	movs	r3, #1
 800a508:	4632      	mov	r2, r6
 800a50a:	4649      	mov	r1, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	47d0      	blx	sl
 800a510:	3001      	adds	r0, #1
 800a512:	d09d      	beq.n	800a450 <_printf_i+0x15c>
 800a514:	3501      	adds	r5, #1
 800a516:	68e3      	ldr	r3, [r4, #12]
 800a518:	9903      	ldr	r1, [sp, #12]
 800a51a:	1a5b      	subs	r3, r3, r1
 800a51c:	42ab      	cmp	r3, r5
 800a51e:	dcf2      	bgt.n	800a506 <_printf_i+0x212>
 800a520:	e7eb      	b.n	800a4fa <_printf_i+0x206>
 800a522:	2500      	movs	r5, #0
 800a524:	f104 0619 	add.w	r6, r4, #25
 800a528:	e7f5      	b.n	800a516 <_printf_i+0x222>
 800a52a:	bf00      	nop
 800a52c:	0800a8ed 	.word	0x0800a8ed
 800a530:	0800a8fe 	.word	0x0800a8fe

0800a534 <memmove>:
 800a534:	4288      	cmp	r0, r1
 800a536:	b510      	push	{r4, lr}
 800a538:	eb01 0402 	add.w	r4, r1, r2
 800a53c:	d902      	bls.n	800a544 <memmove+0x10>
 800a53e:	4284      	cmp	r4, r0
 800a540:	4623      	mov	r3, r4
 800a542:	d807      	bhi.n	800a554 <memmove+0x20>
 800a544:	1e43      	subs	r3, r0, #1
 800a546:	42a1      	cmp	r1, r4
 800a548:	d008      	beq.n	800a55c <memmove+0x28>
 800a54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a552:	e7f8      	b.n	800a546 <memmove+0x12>
 800a554:	4402      	add	r2, r0
 800a556:	4601      	mov	r1, r0
 800a558:	428a      	cmp	r2, r1
 800a55a:	d100      	bne.n	800a55e <memmove+0x2a>
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a566:	e7f7      	b.n	800a558 <memmove+0x24>

0800a568 <_sbrk_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4d06      	ldr	r5, [pc, #24]	@ (800a584 <_sbrk_r+0x1c>)
 800a56c:	2300      	movs	r3, #0
 800a56e:	4604      	mov	r4, r0
 800a570:	4608      	mov	r0, r1
 800a572:	602b      	str	r3, [r5, #0]
 800a574:	f7f6 fcd4 	bl	8000f20 <_sbrk>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_sbrk_r+0x1a>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_sbrk_r+0x1a>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	2000055c 	.word	0x2000055c

0800a588 <_realloc_r>:
 800a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58c:	4680      	mov	r8, r0
 800a58e:	4615      	mov	r5, r2
 800a590:	460c      	mov	r4, r1
 800a592:	b921      	cbnz	r1, 800a59e <_realloc_r+0x16>
 800a594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a598:	4611      	mov	r1, r2
 800a59a:	f7ff bc59 	b.w	8009e50 <_malloc_r>
 800a59e:	b92a      	cbnz	r2, 800a5ac <_realloc_r+0x24>
 800a5a0:	f7ff fbea 	bl	8009d78 <_free_r>
 800a5a4:	2400      	movs	r4, #0
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ac:	f000 f81a 	bl	800a5e4 <_malloc_usable_size_r>
 800a5b0:	4285      	cmp	r5, r0
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	d802      	bhi.n	800a5bc <_realloc_r+0x34>
 800a5b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a5ba:	d8f4      	bhi.n	800a5a6 <_realloc_r+0x1e>
 800a5bc:	4629      	mov	r1, r5
 800a5be:	4640      	mov	r0, r8
 800a5c0:	f7ff fc46 	bl	8009e50 <_malloc_r>
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d0ec      	beq.n	800a5a4 <_realloc_r+0x1c>
 800a5ca:	42b5      	cmp	r5, r6
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	bf28      	it	cs
 800a5d2:	4632      	movcs	r2, r6
 800a5d4:	f7ff fbc2 	bl	8009d5c <memcpy>
 800a5d8:	4621      	mov	r1, r4
 800a5da:	4640      	mov	r0, r8
 800a5dc:	f7ff fbcc 	bl	8009d78 <_free_r>
 800a5e0:	463c      	mov	r4, r7
 800a5e2:	e7e0      	b.n	800a5a6 <_realloc_r+0x1e>

0800a5e4 <_malloc_usable_size_r>:
 800a5e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e8:	1f18      	subs	r0, r3, #4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	bfbc      	itt	lt
 800a5ee:	580b      	ldrlt	r3, [r1, r0]
 800a5f0:	18c0      	addlt	r0, r0, r3
 800a5f2:	4770      	bx	lr

0800a5f4 <_init>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	bf00      	nop
 800a5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5fa:	bc08      	pop	{r3}
 800a5fc:	469e      	mov	lr, r3
 800a5fe:	4770      	bx	lr

0800a600 <_fini>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	bf00      	nop
 800a604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a606:	bc08      	pop	{r3}
 800a608:	469e      	mov	lr, r3
 800a60a:	4770      	bx	lr
